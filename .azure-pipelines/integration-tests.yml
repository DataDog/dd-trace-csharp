trigger:
  batch: 'true'
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - docs/*
      - .github/*

variables:
  buildConfiguration: Debug
  packageFeed: /ffc32c57-3e0e-4e8f-8633-a7ad01df2e45
  dotnetCoreSdkVersion: 2.2.401

jobs:

- job: Linux

  pool:
    vmImage: ubuntu-16.04

  steps:
  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true build

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeFileArgs: TestAllPackageVersions=true
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true IntegrationTests

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: Windows

  pool:
    vmImage: windows-2019

  variables:
    buildPlatform: 'x64'

  steps:
  - task: DotNetCoreInstaller@0
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  - task: DotNetCoreCLI@2
    displayName: dotnet build src/**/*.csproj
    inputs:
      command: build
      projects: |
        src/**/*.csproj
      arguments: --configuration $(buildConfiguration)

  - task: NuGetCommand@2
    displayName: nuget restore native
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      vstsFeed: $(packageFeed)
      verbosityRestore: Normal

  - task: MSBuild@1
    displayName: msbuild native
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:BuildCpp
      maximumCpuCount: true

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: |
        samples/Samples.HttpMessageHandler/Samples.HttpMessageHandler.csproj
        test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
        reproductions/**/*.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj
      vstsFeed: $(packageFeed)

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: |
        samples/Samples.HttpMessageHandler/Samples.HttpMessageHandler.csproj
        test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
        reproductions/**/*.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj
      arguments: --configuration $(buildConfiguration) -p:Platform=$(buildPlatform)

  - task: NuGetCommand@2
    displayName: 'nuget restore reproductions/**/packages.config'
    inputs:
      restoreSolution: reproductions/**/packages.config
      restoreDirectory: $(Build.SourcesDirectory)/packages
      vstsFeed: $(packageFeed)
      verbosityRestore: Normal

  - task: MSBuild@1
    displayName: 'Build .NET Framework projects (not SDK-based projects)'
    inputs:
      solution: Datadog.Trace.proj
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/t:BuildFrameworkReproductions'
      maximumCpuCount: true

#  - task: MSBuild@1
#    displayName: 'Build sample apps (x64 or x86)'
#    inputs:
#      solution: Datadog.Trace.proj
#      platform: '$(buildPlatform)'
#      configuration: '$(buildConfiguration)'
#      msbuildArguments: '/t:BuildSamples'
#      maximumCpuCount: true

#  - script: |
#    choco install redis-64
#    redis-server --service-install
#    redis-server --service-start
#    displayName: 'Install Redis'

#  - script: |
#    choco install elasticsearch
#    net start elasticsearch-service-x64
#    displayName: 'Install Elasticsearch'

#  - task: PowerShell@2
#    displayName: 'PowerShell Script'
#    inputs:
#      targetType: filePath
#      filePath: './ci/install-sqlserver.ps1'
#    enabled: false

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      configuration: $(buildConfiguration)
      projects: test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
      arguments: '--filter "FullyQualifiedName~Datadog.Trace.ClrProfiler.IntegrationTests.HttpClientTests|FullyQualifiedName~Datadog.Trace.ClrProfiler.IntegrationTests.GraphQLTests|Category=Smoke" -p:Platform=$(buildPlatform)'
