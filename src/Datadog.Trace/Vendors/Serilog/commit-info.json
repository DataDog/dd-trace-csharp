{
  "sha": "870feca66f81844ed279998a4d28a3b2614bbd7a",
  "node_id": "MDY6Q29tbWl0ODE5ODUxMTo4NzBmZWNhNjZmODE4NDRlZDI3OTk5OGE0ZDI4YTNiMjYxNGJiZDdh",
  "commit": {
    "author": {
      "name": "Nicholas Blumhardt",
      "email": "nblumhardt@nblumhardt.com",
      "date": "2019-01-16T23:24:01Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-01-16T23:24:01Z"
    },
    "message": "Merge pull request #1271 from serilog/dev\n\n2.8.0 Release",
    "tree": {
      "sha": "ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf",
      "url": "https://api.github.com/repos/serilog/serilog/git/trees/ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf"
    },
    "url": "https://api.github.com/repos/serilog/serilog/git/commits/870feca66f81844ed279998a4d28a3b2614bbd7a",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcP70RCRBK7hj4Ov3rIwAAdHIIAA221tbSOb0pETYUCJspvNqX\necMFH8adX0Qpze43uTV6e898NVh/TsH4UiWmDRzsUTDWL9fAcML5TtUXHu4NVKIk\nUUCcrBwu5BwFLnyYp3v5Z3Iu1z5yWanZwuxmGnWhUgq7HaoRyAGhrG/4yKWq/xk1\nWKbcfuvORk/30173EthVhuXLObdpxiUEL/vDPMrrOldGrgcurumUzgaSHIoWs1Qc\n1rCHceJnRLJxsJJxo\u002BWxoH6sUC/Ab1GJOrAzu71f08z4fiMEoIWsftHbjbxURwlw\nqsTCWTwxGM7YcZXN6A1cctMesaD55U7WyHWK3MJcb81MEf3IhS9pCdj43gi8A7I=\n=UhaB\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf\nparent 12ca0599315758d97d4fdccf0cf4db71029cbd4d\nparent f1972698c3912a8ded1f72829026608400cd66bc\nauthor Nicholas Blumhardt \u003Cnblumhardt@nblumhardt.com\u003E 1547681041 \u002B1000\ncommitter GitHub \u003Cnoreply@github.com\u003E 1547681041 \u002B1000\n\nMerge pull request #1271 from serilog/dev\n\n2.8.0 Release"
    }
  },
  "url": "https://api.github.com/repos/serilog/serilog/commits/870feca66f81844ed279998a4d28a3b2614bbd7a",
  "html_url": "https://github.com/serilog/serilog/commit/870feca66f81844ed279998a4d28a3b2614bbd7a",
  "comments_url": "https://api.github.com/repos/serilog/serilog/commits/870feca66f81844ed279998a4d28a3b2614bbd7a/comments",
  "author": {
    "login": "nblumhardt",
    "id": 342712,
    "node_id": "MDQ6VXNlcjM0MjcxMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/342712?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nblumhardt",
    "html_url": "https://github.com/nblumhardt",
    "followers_url": "https://api.github.com/users/nblumhardt/followers",
    "following_url": "https://api.github.com/users/nblumhardt/following{/other_user}",
    "gists_url": "https://api.github.com/users/nblumhardt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nblumhardt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nblumhardt/subscriptions",
    "organizations_url": "https://api.github.com/users/nblumhardt/orgs",
    "repos_url": "https://api.github.com/users/nblumhardt/repos",
    "events_url": "https://api.github.com/users/nblumhardt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nblumhardt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "12ca0599315758d97d4fdccf0cf4db71029cbd4d",
      "url": "https://api.github.com/repos/serilog/serilog/commits/12ca0599315758d97d4fdccf0cf4db71029cbd4d",
      "html_url": "https://github.com/serilog/serilog/commit/12ca0599315758d97d4fdccf0cf4db71029cbd4d"
    },
    {
      "sha": "f1972698c3912a8ded1f72829026608400cd66bc",
      "url": "https://api.github.com/repos/serilog/serilog/commits/f1972698c3912a8ded1f72829026608400cd66bc",
      "html_url": "https://github.com/serilog/serilog/commit/f1972698c3912a8ded1f72829026608400cd66bc"
    }
  ],
  "stats": {
    "total": 1201,
    "additions": 1111,
    "deletions": 90
  },
  "files": [
    {
      "sha": "a55a9938a24b83eccd4e511ffa3bad8b16fb8737",
      "filename": "CHANGES.md",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/CHANGES.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/CHANGES.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/CHANGES.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,3 \u002B1,33 @@\n\u002B2.7.1\n\u002B * #1075 - overload of \u0060LoggerSinkConfiguration.Wrap()\u0060 accepting \u0060LoggingLevelSwitch\u0060\n\u002B * #1083 - update package metadata, including \u0060https://\u0060 project and icon URLs\n\u002B * #1091 - make \u0060{Properties:j}\u0060 work consistently with the console sink\n\u002B * #1110 - expose an efficient \u0060Logger.None\u0060\n\u002B * #1113 - (tooling) improve tests for \u0060LogContext\u0060\n\u002B * #1136 - (tooling) fix \u0060build.sh\u0060 exit code\n\u002B * #1141 - fix logging of \u0060byte[]\u0060 smaller than 1 KB\n\u002B * #1157 - (tooling) update _.gitignore_\n\u002B * #1158 - (tooling) re-enable macOS builds\n\u002B * #1163 - SourceLink v2 support\n\u002B * #1165 - fix a number of issues with \u0060LoggerSinkConfiguration.Wrap()\u0060 affecting \u0060WriteTo.Async()\u0060\n\u002B * #1134 - (tooling) add README badges for downloads/stats\n\u002B * #1166 - allow \u0060LoggerConfiguration\u0060 to be garbage collected after logger is created\n\u002B * #1160 - (tooling) update NuGet.org API key\n\u002B * (tooling) Update to use the latest .NET SDK\n\u002B\n\u002B2.6.0\n\u002B * #992 - fix \u0060LogContext\u0060 remoting issue on .NET Framework 4.5\n\u002B * #1007 - \u0060LogContext.Suspend()\u0060 and \u0060LogContext.Reset()\u0060 to pass or drop context from child tasks\n\u002B * #1018 - include source in NUPKGs\n\u002B * #1020 - support for \u0060LoggingLevelSwitch\u0060 in key-value/\u0060\u003CappSettings\u003E\u0060 settings\n\u002B * #1033 - warn when \u0060MinimumLevel.Override()\u0060 is used in a sub-logger\n\u002B * #1034 - more efficient levelled \u0060ILogger.ForContext()\u0060/\u0060Log.ForContext()\u0060\n\u002B * #1051 - handle duplicate keys in key-value/\u0060\u003CappSettings\u003E\u0060 settings (last-in wins)\n\u002B * #1064 - support static member references as key-value/\u0060\u003CappSettings\u003E\u0060 values\n\u002B * #1059 - support for abstract class parameters in settings\n\u002B * #1068 - handle parsing of token width more robustly\n\u002B * Plus build/documentation items #988, #994, #996, #1019, #842, #1042, #1050, #1055, #1063.\n\u002B\n 2.5.0\n  * #939, #946, #972 - RTM .NET Standard/Core tooling\n  * #955 - \u0060LoggerSinkConfiguration.Wrap()\u0060"
    },
    {
      "sha": "da542a88a2eff587338608054c9b04717e62c466",
      "filename": "build.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/build.sh",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/build.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/build.sh?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -14,6 \u002B14,5 @@ for path in test/*.Tests/*.csproj; do\n done\n \n for path in test/*.PerformanceTests/*.PerformanceTests.csproj; do\n-    dotnet build -f netcoreapp1.1 -c Release ${path}\n-    # dotnet test -f netcoreapp1.1 -c Release ${path}\n\u002B    dotnet build -f netcoreapp2.0  -c Release ${path}\n done"
    },
    {
      "sha": "8c071d87a3428665361de5df5798051275993d20",
      "filename": "results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/AllocationsBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,19 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |               Method |          Mean |       Error |        StdDev |        Median |   Scaled | ScaledSD |  Gen 0 | Allocated |\n\u002B |--------------------- |--------------:|------------:|--------------:|--------------:|---------:|---------:|-------:|----------:|\n\u002B |             LogEmpty |      8.295 ns |   0.1916 ns |     0.1882 ns |      8.251 ns |     1.00 |     0.00 |      - |       0 B |\n\u002B | LogEmptyWithEnricher |    129.205 ns |   4.7752 ns |    13.5464 ns |    126.329 ns |    15.58 |     1.66 | 0.0265 |      56 B |\n\u002B |            LogScalar |    998.006 ns |  19.7947 ns |    48.5568 ns |    993.968 ns |   120.37 |     6.37 | 0.2060 |     432 B |\n\u002B |        LogDictionary |  6,418.543 ns | 142.5459 ns |   418.0626 ns |  6,304.087 ns |   774.13 |    52.90 | 1.0910 |    2296 B |\n\u002B |          LogSequence |  2,664.592 ns |  52.9768 ns |   145.9136 ns |  2,655.944 ns |   321.37 |    18.83 | 0.4158 |     880 B |\n\u002B |         LogAnonymous | 12,776.209 ns | 378.7175 ns | 1,110.7127 ns | 12,563.375 ns | 1,540.91 |   137.42 | 1.6785 |    3528 B |"
    },
    {
      "sha": "39897845d6000ed31e41a60fdbf1d1b04bdf577c",
      "filename": "results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/LevelControlBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,17 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |         Method |      Mean |     Error |    StdDev | Scaled | ScaledSD |\n\u002B |--------------- |----------:|----------:|----------:|-------:|---------:|\n\u002B |            Off |  2.931 ns | 0.0893 ns | 0.0877 ns |   1.00 |     0.00 |\n\u002B | LevelSwitchOff |  3.636 ns | 0.1048 ns | 0.1029 ns |   1.24 |     0.05 |\n\u002B | MinimumLevelOn | 10.497 ns | 0.2462 ns | 0.3370 ns |   3.58 |     0.15 |\n\u002B |  LevelSwitchOn | 10.981 ns | 0.3005 ns | 0.3340 ns |   3.75 |     0.15 |"
    },
    {
      "sha": "381593159d5c3dd76afba4557fba0fb35084766f",
      "filename": "results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,17 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |               Method |      Mean |     Error |     StdDev | Scaled | ScaledSD |\n\u002B |--------------------- |----------:|----------:|-----------:|-------:|---------:|\n\u002B |                 Bare |  12.05 ns | 0.3210 ns |  0.5789 ns |   1.00 |     0.00 |\n\u002B |         PushProperty | 149.67 ns | 2.9527 ns |  3.2820 ns |  12.45 |     0.62 |\n\u002B |   PushPropertyNested | 296.44 ns | 6.7011 ns | 11.0101 ns |  24.65 |     1.43 |\n\u002B | PushPropertyEnriched | 304.18 ns | 5.7287 ns |  8.3971 ns |  25.29 |     1.33 |"
    },
    {
      "sha": "c6040821389814868c2ff810852d2fd582ead624",
      "filename": "results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,43 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |     Method | Items | MaxDegreeOfParallelism |        Mean |      Error |      StdDev |      Median | Scaled | ScaledSD |\n\u002B |----------- |------ |----------------------- |------------:|-----------:|------------:|------------:|-------:|---------:|\n\u002B | **Dictionary** |    **10** |                     **-1** |   **484.65 us** | **29.5203 us** |  **86.1121 us** |   **475.13 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    10 |                     -1 |    74.78 us |  1.5697 us |   2.8304 us |    73.99 us |   0.16 |     0.03 |\n\u002B | Concurrent |    10 |                     -1 |    69.52 us |  0.6831 us |   0.5704 us |    69.62 us |   0.15 |     0.03 |\n\u002B | **Dictionary** |    **10** |                      **1** |   **116.22 us** |  **2.2490 us** |   **2.4998 us** |   **115.86 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    10 |                      1 |   140.77 us |  2.8065 us |   4.1137 us |   140.40 us |   1.21 |     0.04 |\n\u002B | Concurrent |    10 |                      1 |   132.99 us |  2.2509 us |   1.9954 us |   132.61 us |   1.14 |     0.03 |\n\u002B | **Dictionary** |    **20** |                     **-1** |   **593.71 us** | **30.5094 us** |  **89.9578 us** |   **602.83 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    20 |                     -1 |   136.36 us |  3.6865 us |  10.5773 us |   133.11 us |   0.24 |     0.04 |\n\u002B | Concurrent |    20 |                     -1 |   127.68 us |  2.7541 us |   5.1729 us |   125.60 us |   0.22 |     0.03 |\n\u002B | **Dictionary** |    **20** |                      **1** |   **247.53 us** |  **4.9128 us** |   **8.8589 us** |   **247.69 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    20 |                      1 |   269.34 us |  5.0332 us |   4.7081 us |   270.26 us |   1.09 |     0.04 |\n\u002B | Concurrent |    20 |                      1 |   265.41 us |  5.0592 us |   4.2247 us |   264.26 us |   1.07 |     0.04 |\n\u002B | **Dictionary** |    **50** |                     **-1** | **1,344.03 us** | **75.5937 us** | **219.3111 us** | **1,299.64 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    50 |                     -1 |   319.29 us |  6.2183 us |  10.7263 us |   316.55 us |   0.24 |     0.04 |\n\u002B | Concurrent |    50 |                     -1 |   311.74 us |  6.3992 us |  16.7456 us |   305.20 us |   0.24 |     0.04 |\n\u002B | **Dictionary** |    **50** |                      **1** |   **580.35 us** | **10.5809 us** |   **9.3797 us** |   **580.59 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |    50 |                      1 |   685.28 us | 16.2339 us |  23.2821 us |   682.71 us |   1.18 |     0.04 |\n\u002B | Concurrent |    50 |                      1 |   663.75 us | 14.2723 us |  16.9902 us |   664.83 us |   1.14 |     0.03 |\n\u002B | **Dictionary** |   **100** |                     **-1** | **2,766.91 us** | **70.1788 us** | **206.9237 us** | **2,776.40 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |   100 |                     -1 |   634.39 us | 11.9496 us |  17.8855 us |   632.35 us |   0.23 |     0.02 |\n\u002B | Concurrent |   100 |                     -1 |   607.86 us | 12.1245 us |  14.8900 us |   605.14 us |   0.22 |     0.02 |\n\u002B | **Dictionary** |   **100** |                      **1** | **1,145.86 us** | **21.7679 us** |  **19.2966 us** | **1,151.96 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |   100 |                      1 | 1,384.02 us | 26.6146 us |  27.3312 us | 1,386.84 us |   1.21 |     0.03 |\n\u002B | Concurrent |   100 |                      1 | 1,374.88 us | 30.0217 us |  59.2599 us | 1,363.38 us |   1.20 |     0.05 |\n\u002B | **Dictionary** |  **1000** |                     **-1** | **2,722.48 us** | **70.6602 us** | **206.1192 us** | **2,724.74 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |  1000 |                     -1 |   634.43 us | 12.5225 us |  19.4960 us |   642.28 us |   0.23 |     0.02 |\n\u002B | Concurrent |  1000 |                     -1 |   611.38 us | 11.9573 us |  22.1637 us |   609.39 us |   0.23 |     0.02 |\n\u002B | **Dictionary** |  **1000** |                      **1** | **1,202.34 us** | **27.6262 us** |  **32.8871 us** | **1,196.17 us** |   **1.00** |     **0.00** |\n\u002B |  Hashtable |  1000 |                      1 | 1,408.56 us | 24.4617 us |  22.8815 us | 1,410.87 us |   1.17 |     0.04 |\n\u002B | Concurrent |  1000 |                      1 | 1,342.42 us | 19.1854 us |  17.9460 us | 1,338.93 us |   1.12 |     0.03 |"
    },
    {
      "sha": "bf1ffdec5bbbaebb8da094bb58c02d1c01e8ab07",
      "filename": "results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,37 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |     Method | Items | OverflowCount | MaxDegreeOfParallelism |       Mean |      Error |     StdDev |     Median | Scaled | ScaledSD |\n\u002B |----------- |------ |-------------- |----------------------- |-----------:|-----------:|-----------:|-----------:|-------:|---------:|\n\u002B | **Dictionary** | **10000** |             **1** |                     **-1** |   **3.809 ms** |  **0.1689 ms** |  **0.4900 ms** |   **3.695 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |             1 |                     -1 |   3.401 ms |  0.0587 ms |  0.0763 ms |   3.386 ms |   0.91 |     0.11 |\n\u002B | Concurrent | 10000 |             1 |                     -1 | 141.271 ms | 14.7981 ms | 43.6325 ms | 141.945 ms |  37.67 |    12.51 |\n\u002B | **Dictionary** | **10000** |             **1** |                      **1** |   **1.995 ms** |  **0.0396 ms** |  **0.0617 ms** |   **1.982 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |             1 |                      1 |   2.581 ms |  0.0429 ms |  0.0401 ms |   2.575 ms |   1.30 |     0.04 |\n\u002B | Concurrent | 10000 |             1 |                      1 | 193.445 ms |  2.1087 ms |  1.9725 ms | 193.561 ms |  97.07 |     3.08 |\n\u002B | **Dictionary** | **10000** |            **10** |                     **-1** |   **3.300 ms** |  **0.0726 ms** |  **0.2119 ms** |   **3.281 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |            10 |                     -1 |   3.252 ms |  0.0646 ms |  0.1498 ms |   3.232 ms |   0.99 |     0.08 |\n\u002B | Concurrent | 10000 |            10 |                     -1 |  81.583 ms |  3.0187 ms |  8.9007 ms |  79.069 ms |  24.82 |     3.12 |\n\u002B | **Dictionary** | **10000** |            **10** |                      **1** |   **1.979 ms** |  **0.0390 ms** |  **0.0449 ms** |   **1.970 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |            10 |                      1 |   2.576 ms |  0.0398 ms |  0.0352 ms |   2.563 ms |   1.30 |     0.03 |\n\u002B | Concurrent | 10000 |            10 |                      1 | 200.065 ms |  4.9247 ms |  5.8626 ms | 200.199 ms | 101.16 |     3.64 |\n\u002B | **Dictionary** | **10000** |           **100** |                     **-1** |   **4.076 ms** |  **0.0813 ms** |  **0.2292 ms** |   **4.066 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |           100 |                     -1 |   3.660 ms |  0.0719 ms |  0.1008 ms |   3.653 ms |   0.90 |     0.06 |\n\u002B | Concurrent | 10000 |           100 |                     -1 | 167.547 ms | 20.0876 ms | 58.2777 ms | 175.712 ms |  41.23 |    14.48 |\n\u002B | **Dictionary** | **10000** |           **100** |                      **1** |   **2.061 ms** |  **0.0354 ms** |  **0.0331 ms** |   **2.054 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |           100 |                      1 |   2.685 ms |  0.0331 ms |  0.0310 ms |   2.685 ms |   1.30 |     0.02 |\n\u002B | Concurrent | 10000 |           100 |                      1 | 198.448 ms |  2.5433 ms |  2.3790 ms | 198.288 ms |  96.31 |     1.86 |\n\u002B | **Dictionary** | **10000** |          **1000** |                     **-1** |   **3.923 ms** |  **0.1650 ms** |  **0.4788 ms** |   **3.865 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |          1000 |                     -1 |   3.870 ms |  0.0766 ms |  0.1907 ms |   3.862 ms |   1.00 |     0.13 |\n\u002B | Concurrent | 10000 |          1000 |                     -1 | 207.440 ms | 23.7700 ms | 70.0864 ms | 182.505 ms |  53.66 |    19.30 |\n\u002B | **Dictionary** | **10000** |          **1000** |                      **1** |   **2.150 ms** |  **0.0278 ms** |  **0.0246 ms** |   **2.154 ms** |   **1.00** |     **0.00** |\n\u002B |  Hashtable | 10000 |          1000 |                      1 |   2.806 ms |  0.0398 ms |  0.0373 ms |   2.795 ms |   1.31 |     0.02 |\n\u002B | Concurrent | 10000 |          1000 |                      1 | 201.843 ms |  3.2293 ms |  2.8627 ms | 201.881 ms |  93.91 |     1.66 |"
    },
    {
      "sha": "e6d28084abc57763088ac08f719ce009c1624dba",
      "filename": "results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,15 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |                       Method |       Mean |     Error |    StdDev | Scaled | ScaledSD |  Gen 0 | Allocated |\n\u002B |----------------------------- |-----------:|----------:|----------:|-------:|---------:|-------:|----------:|\n\u002B |                EmptyTemplate |   371.0 ns |  7.570 ns |  14.03 ns |   1.00 |     0.00 | 0.1259 |     264 B |\n\u002B | DefaultConsoleOutputTemplate | 2,912.1 ns | 66.661 ns | 190.19 ns |   7.86 |     0.58 | 1.0948 |    2296 B |"
    },
    {
      "sha": "55bc3041a60e4afb2cca14b41a0bdc7ccad5b59a",
      "filename": "results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,15 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |                       Method |       Mean |     Error |     StdDev |  Gen 0 | Allocated |\n\u002B |----------------------------- |-----------:|----------:|-----------:|-------:|----------:|\n\u002B |     TemplateWithNoProperties |   5.067 ns | 0.1194 ns |  0.1058 ns |      - |       0 B |\n\u002B | TemplateWithVariedProperties | 423.457 ns | 8.8139 ns | 12.3559 ns | 0.0453 |      96 B |"
    },
    {
      "sha": "19223de66a7e24621426349600c8489c8a2a62b6",
      "filename": "results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,15 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |           Method |     Mean |    Error |   StdDev |\n\u002B |----------------- |---------:|---------:|---------:|\n\u002B | ForContextString | 104.5 ns | 2.126 ns | 4.884 ns |\n\u002B |   ForContextType | 173.8 ns | 3.425 ns | 5.021 ns |"
    },
    {
      "sha": "b722d87282e6781cd4c0701b9eec99c092cccd2d",
      "filename": "results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,15 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |       Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |\n\u002B |------------- |---------:|----------:|----------:|-------:|---------:|\n\u002B |   RootLogger | 11.78 ns | 0.1157 ns | 0.1082 ns |   1.00 |     0.00 |\n\u002B | NestedLogger | 41.70 ns | 0.1993 ns | 0.1556 ns |   3.54 |     0.03 |"
    },
    {
      "sha": "bba42387e6da0d24f417e4d5fe0b6ac5ad2a2807",
      "filename": "results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,14 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |         Method |     Mean |     Error |    StdDev |  Gen 0 | Allocated |\n\u002B |--------------- |---------:|----------:|----------:|-------:|----------:|\n\u002B | FormatToOutput | 1.386 us | 0.0237 us | 0.0222 us | 0.2327 |     488 B |"
    },
    {
      "sha": "e945e1b0958e3e4d163b1e15f781b661373bfedf",
      "filename": "results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/PipelineBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,14 @@\n\u002B\u0060\u0060\u0060 ini\n\u002B\n\u002BBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n\u002BProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n\u002BFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n\u002Bdotnet cli version=2.1.4\n\u002B  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\u002B\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B |       Method |     Mean |    Error |   StdDev |  Gen 0 | Allocated |\n\u002B |------------- |---------:|---------:|---------:|-------:|----------:|\n\u002B | EmitLogEvent | 837.9 ns | 16.17 ns | 15.88 ns | 0.2060 |     432 B |"
    },
    {
      "sha": "2a024ec1cb30e0f4c2a8e71a28c3d7b4d96592e7",
      "filename": "run_perf_tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/run_perf_tests.sh",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/run_perf_tests.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/run_perf_tests.sh?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -2,5 \u002B2,5 @@\n dotnet restore\n \n for path in test/*.PerformanceTests/*.csproj; do\n-    dotnet test -f netcoreapp1.1 -c Release ${path}\n\u002B    dotnet test -f netcoreapp2.0 -c Release ${path}\n done"
    },
    {
      "sha": "90f8a935c5a9911d3a5ed3f6f98d77bd427db56d",
      "filename": "src/Serilog/Capturing/GetablePropertyFinder.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Capturing/GetablePropertyFinder.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Capturing/GetablePropertyFinder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Capturing/GetablePropertyFinder.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -39,8 \u002B39,14 @@ internal static IEnumerable\u003CPropertyInfo\u003E GetPropertiesRecursive(this Type type)\n                     yield return propertyInfo;\n                 }\n \n-                currentTypeInfo = currentTypeInfo.BaseType.GetTypeInfo();\n\u002B                var baseType = currentTypeInfo.BaseType;\n\u002B                if(baseType == null)\n\u002B                {\n\u002B                    yield break;\n\u002B                }\n\u002B\n\u002B                currentTypeInfo = baseType.GetTypeInfo();\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n\u002B}"
    },
    {
      "sha": "05c3f3ae268acd0e0d44d8a195e5a3c1291e2ff6",
      "filename": "src/Serilog/Core/Logger.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Logger.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Logger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Core/Logger.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1377,6 \u002B1377,6 @@ public void Dispose()\n         /// \u003Csummary\u003E\n         /// An \u003Csee cref=\u0022ILogger\u0022/\u003E instance that efficiently ignores all method calls.\n         /// \u003C/summary\u003E\n-        public static ILogger None { get; } = new SilentLogger();\n\u002B        public static ILogger None { get; } = SilentLogger.Instance;\n     }\n }"
    },
    {
      "sha": "4d878d5cc14d1af15e990b3e8ea7eb2e9d8d2831",
      "filename": "src/Serilog/Core/Pipeline/SilentLogger.cs",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Pipeline/SilentLogger.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Pipeline/SilentLogger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Core/Pipeline/SilentLogger.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -20,6 \u002B20,12 @@ namespace Serilog.Core.Pipeline\n {\n     class SilentLogger : ILogger\n     {\n\u002B        public static readonly ILogger Instance = new SilentLogger();\n\u002B\n\u002B        private SilentLogger()\n\u002B        {\n\u002B        }\n\u002B\n         public ILogger ForContext(ILogEventEnricher enricher)\n         {\n             return this;"
    },
    {
      "sha": "4b30fc180a5509f0bc310ac7cd8dc03c2e33ac27",
      "filename": "src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -116,7 \u002B116,7 @@ public void Format(LogEvent logEvent, TextWriter output)\n                         }\n                         else\n                         {\n-                            propertyValue.Render(output, pt.Format, _formatProvider);\n\u002B                            propertyValue.Render(writer, pt.Format, _formatProvider);\n                         }\n                     }\n "
    },
    {
      "sha": "4efb023a9f7f70351313fdba5edd0f1846b0aba1",
      "filename": "src/Serilog/Log.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Log.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Log.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Log.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -40,7 \u002B40,7 @@ namespace Serilog\n     /// \u003C/remarks\u003E\n     public static class Log\n     {\n-        static ILogger _logger = new SilentLogger();\n\u002B        static ILogger _logger = SilentLogger.Instance;\n \n         /// \u003Csummary\u003E\n         /// The globally-shared logger.\n@@ -61,7 \u002B61,7 @@ public static ILogger Logger\n         /// \u003C/summary\u003E\n         public static void CloseAndFlush()\n         {\n-            ILogger logger = Interlocked.Exchange(ref _logger, new SilentLogger());\n\u002B            ILogger logger = Interlocked.Exchange(ref _logger, SilentLogger.Instance);\n \n             (logger as IDisposable)?.Dispose();\n         }"
    },
    {
      "sha": "333ef29f8d2e13559e9e5d91805bb91345ea633a",
      "filename": "src/Serilog/Serilog.csproj",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Serilog.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Serilog.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Serilog.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,10 \u002B1,10 @@\n-\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\u002B\uFEFF\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n \n   \u003CPropertyGroup\u003E\n     \u003CDescription\u003ESimple .NET logging with fully-structured events\u003C/Description\u003E\n-    \u003CVersionPrefix\u003E2.7.1\u003C/VersionPrefix\u003E\n\u002B    \u003CVersionPrefix\u003E2.8.0\u003C/VersionPrefix\u003E\n     \u003CAuthors\u003ESerilog Contributors\u003C/Authors\u003E\n-    \u003CTargetFrameworks\u003Enet45;net46;netstandard1.0;netstandard1.3\u003C/TargetFrameworks\u003E\n\u002B    \u003CTargetFrameworks\u003Enet45;net46;netstandard1.0;netstandard1.3;netstandard2.0\u003C/TargetFrameworks\u003E\n     \u003CGenerateDocumentationFile\u003Etrue\u003C/GenerateDocumentationFile\u003E\n     \u003CAssemblyName\u003ESerilog\u003C/AssemblyName\u003E\n     \u003CAssemblyOriginatorKeyFile\u003E../../assets/Serilog.snk\u003C/AssemblyOriginatorKeyFile\u003E\n@@ -15,6 \u002B15,8 @@\n     \u003CPackageIconUrl\u003Ehttps://serilog.net/images/serilog-nuget.png\u003C/PackageIconUrl\u003E\n     \u003CPackageProjectUrl\u003Ehttps://github.com/serilog/serilog\u003C/PackageProjectUrl\u003E\n     \u003CPackageLicenseUrl\u003Ehttps://www.apache.org/licenses/LICENSE-2.0\u003C/PackageLicenseUrl\u003E\n\u002B    \u003CRepositoryUrl\u003Ehttps://github.com/serilog/serilog\u003C/RepositoryUrl\u003E\n\u002B    \u003CRepositoryType\u003Egit\u003C/RepositoryType\u003E\n     \u003CGenerateAssemblyVersionAttribute\u003Efalse\u003C/GenerateAssemblyVersionAttribute\u003E\n     \u003CTreatWarningsAsErrors\u003ETrue\u003C/TreatWarningsAsErrors\u003E\n     \u003CTreatSpecificWarningsAsErrors /\u003E\n@@ -34,6 \u002B36,10 @@\n     \u003CDefineConstants\u003E$(DefineConstants);ASYNCLOCAL;HASHTABLE\u003C/DefineConstants\u003E\n   \u003C/PropertyGroup\u003E\n \n\u002B  \u003CPropertyGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netstandard2.0\u0027 \u0022\u003E\n\u002B    \u003CDefineConstants\u003E$(DefineConstants);ASYNCLOCAL;HASHTABLE\u003C/DefineConstants\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n   \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027net45\u0027 \u0022\u003E\n     \u003CReference Include=\u0022System\u0022 /\u003E\n     \u003CReference Include=\u0022System.Core\u0022 /\u003E\n@@ -50,4 \u002B56,8 @@\n     \u003CPackageReference Include=\u0022System.Collections.NonGeneric\u0022 Version=\u00224.3.0\u0022 /\u003E\n   \u003C/ItemGroup\u003E\n \n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netstandard2.0\u0027 \u0022\u003E\n\u002B    \u003CPackageReference Include=\u0022System.Collections.NonGeneric\u0022 Version=\u00224.3.0\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n \u003C/Project\u003E"
    },
    {
      "sha": "89366fa69ea950f186df9e200554bb1169d79f1f",
      "filename": "src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -23,13 \u002B23,6 @@ namespace Serilog.Settings.KeyValuePairs\n {\n     static class CallableConfigurationMethodFinder\n     {\n-        internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration)\n-        {\n-            return loggerEnrichmentConfiguration.FromLogContext();\n-        }\n-\n-        static readonly MethodInfo SurrogateFromLogContextConfigurationMethod = typeof(CallableConfigurationMethodFinder).GetTypeInfo().DeclaredMethods.Single(m =\u003E m.Name == nameof(FromLogContext));\n-\n         internal static IList\u003CMethodInfo\u003E FindConfigurationMethods(IEnumerable\u003CAssembly\u003E configurationAssemblies, Type configType)\n         {\n             var methods = configurationAssemblies\n@@ -41,10 \u002B34,30 @@ internal static IList\u003CMethodInfo\u003E FindConfigurationMethods(IEnumerable\u003CAssembly\u003E\n                 .Where(m =\u003E m.GetParameters()[0].ParameterType == configType)\n                 .ToList();\n \n-            // Unlike the other configuration methods, FromLogContext is an instance method rather than an extension. This\n-            // hack ensures we find it.\n\u002B            // some configuration methods are not extension methods. They are added manually\n\u002B            // so they can be discovered\n\u002B\n\u002B            // WriteTo.Sink(params ILogEventSink[]) is not an extension method\n\u002B            // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system\n\u002B            if (configType == typeof(LoggerSinkConfiguration))\n\u002B                methods.AddRange(SurrogateConfigurationMethods.WriteTo);\n\u002B\n\u002B            // AuditTo.Sink(params ILogEventSink[]) is not an extension method\n\u002B            // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system\n\u002B            if (configType == typeof(LoggerAuditSinkConfiguration))\n\u002B                methods.AddRange(SurrogateConfigurationMethods.AuditTo);\n\u002B\n\u002B            // FromLogContext is an instance method rather than an extension. \n             if (configType == typeof(LoggerEnrichmentConfiguration))\n-                methods.Add(SurrogateFromLogContextConfigurationMethod);\n\u002B                methods.AddRange(SurrogateConfigurationMethods.Enrich);\n\u002B\n\u002B            // Some of the useful Destructure configuration methods are defined as methods rather than extension methods\n\u002B            if (configType == typeof(LoggerDestructuringConfiguration))\n\u002B                methods.AddRange(SurrogateConfigurationMethods.Destructure);\n\u002B\n\u002B            // Some of the useful Filter configuration methods are defined as methods rather than extension methods\n\u002B            if (configType == typeof(LoggerFilterConfiguration))\n\u002B                methods.AddRange(SurrogateConfigurationMethods.Filter);\n \n             return methods;\n         }"
    },
    {
      "sha": "535cbf989f6b6b10fa9322ef70dc11bc099fbcf9",
      "filename": "src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -34,12 \u002B34,13 @@ class KeyValuePairSettings : ILoggerSettings\n         const string EnrichWithDirective = \u0022enrich\u0022;\n         const string EnrichWithPropertyDirective = \u0022enrich:with-property\u0022;\n         const string FilterDirective = \u0022filter\u0022;\n\u002B        const string DestructureDirective = \u0022destructure\u0022;\n \n         const string UsingDirectiveFullFormPrefix = \u0022using:\u0022;\n         const string EnrichWithPropertyDirectivePrefix = \u0022enrich:with-property:\u0022;\n         const string MinimumLevelOverrideDirectivePrefix = \u0022minimum-level:override:\u0022;\n \n-        const string CallableDirectiveRegex = @\u0022^(?\u003Cdirective\u003Eaudit-to|write-to|enrich|filter):(?\u003Cmethod\u003E[A-Za-z0-9]*)(\\.(?\u003Cargument\u003E[A-Za-z0-9]*)){0,1}$\u0022;\n\u002B        const string CallableDirectiveRegex = @\u0022^(?\u003Cdirective\u003Eaudit-to|write-to|enrich|filter|destructure):(?\u003Cmethod\u003E[A-Za-z0-9]*)(\\.(?\u003Cargument\u003E[A-Za-z0-9]*)){0,1}$\u0022;\n         const string LevelSwitchDeclarationDirectiveRegex = @\u0022^level-switch:(?\u003CswitchName\u003E.*)$\u0022;\n         const string LevelSwitchNameRegex = @\u0022^\\$[A-Za-z]\u002B[A-Za-z0-9]*$\u0022;\n \n@@ -53,23 \u002B54,26 @@ class KeyValuePairSettings : ILoggerSettings\n             MinimumLevelControlledByDirective,\n             EnrichWithPropertyDirective,\n             EnrichWithDirective,\n-            FilterDirective\n\u002B            FilterDirective,\n\u002B            DestructureDirective\n         };\n \n         static readonly Dictionary\u003Cstring, Type\u003E CallableDirectiveReceiverTypes = new Dictionary\u003Cstring, Type\u003E\n         {\n             [\u0022audit-to\u0022] = typeof(LoggerAuditSinkConfiguration),\n             [\u0022write-to\u0022] = typeof(LoggerSinkConfiguration),\n             [\u0022enrich\u0022] = typeof(LoggerEnrichmentConfiguration),\n-            [\u0022filter\u0022] = typeof(LoggerFilterConfiguration)\n\u002B            [\u0022filter\u0022] = typeof(LoggerFilterConfiguration),\n\u002B            [\u0022destructure\u0022] = typeof(LoggerDestructuringConfiguration),\n         };\n \n         static readonly Dictionary\u003CType, Func\u003CLoggerConfiguration, object\u003E\u003E CallableDirectiveReceivers = new Dictionary\u003CType, Func\u003CLoggerConfiguration, object\u003E\u003E\n         {\n             [typeof(LoggerAuditSinkConfiguration)] = lc =\u003E lc.AuditTo,\n             [typeof(LoggerSinkConfiguration)] = lc =\u003E lc.WriteTo,\n             [typeof(LoggerEnrichmentConfiguration)] = lc =\u003E lc.Enrich,\n-            [typeof(LoggerFilterConfiguration)] = lc =\u003E lc.Filter\n\u002B            [typeof(LoggerFilterConfiguration)] = lc =\u003E lc.Filter,\n\u002B            [typeof(LoggerDestructuringConfiguration)] = lc =\u003E lc.Destructure,\n         };\n \n         readonly IReadOnlyDictionary\u003Cstring, string\u003E _settings;"
    },
    {
      "sha": "9c1dace029971c27180c959dc7adfdbb75f09019",
      "filename": "src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -30,7 \u002B30,8 @@ class SettingValueConversions\n         static Dictionary\u003CType, Func\u003Cstring, object\u003E\u003E ExtendedTypeConversions = new Dictionary\u003CType, Func\u003Cstring, object\u003E\u003E\n             {\n                 { typeof(Uri), s =\u003E new Uri(s) },\n-                { typeof(TimeSpan), s =\u003E TimeSpan.Parse(s) }\n\u002B                { typeof(TimeSpan), s =\u003E TimeSpan.Parse(s) },\n\u002B                { typeof(Type), s =\u003E Type.GetType(s, throwOnError:true) },\n             };\n \n         public static object ConvertToType(string value, Type toType)"
    },
    {
      "sha": "1160f3366de0833f346119d99fede3b67b8508b8",
      "filename": "src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,111 @@\n\u002B\uFEFF// Copyright 2013-2018 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing System;\n\u002Busing System.Collections.Generic;\n\u002Busing System.Linq;\n\u002Busing System.Reflection;\n\u002Busing Serilog.Configuration;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Settings.KeyValuePairs\n\u002B{\n\u002B    /// \u003Csummary\u003E\n\u002B    /// Contains \u0022fake extension\u0022 methods for the Serilog configuration API.\n\u002B    /// By default the settings knows how to find extension methods, but some configuration\n\u002B    /// are actually \u0022regular\u0022 method calls and would not be found otherwise.\n\u002B    ///\n\u002B    /// This static class contains internal methods that can be used instead.\n\u002B    ///\n\u002B    /// See also \u003Cseealso cref=\u0022CallableConfigurationMethodFinder\u0022/\u003E\n\u002B    /// \u003C/summary\u003E\n\u002B    static class SurrogateConfigurationMethods\n\u002B    {\n\u002B        static readonly Dictionary\u003CType, MethodInfo[]\u003E SurrogateMethodCandidates = typeof(SurrogateConfigurationMethods)\n\u002B            .GetTypeInfo().DeclaredMethods\n\u002B            .GroupBy(m =\u003E m.GetParameters().First().ParameterType)\n\u002B            .ToDictionary(g =\u003E g.Key, g =\u003E g.ToArray());\n\u002B\n\u002B        internal static readonly MethodInfo[] WriteTo = SurrogateMethodCandidates[typeof(LoggerSinkConfiguration)];\n\u002B        internal static readonly MethodInfo[] AuditTo = SurrogateMethodCandidates[typeof(LoggerAuditSinkConfiguration)];\n\u002B        internal static readonly MethodInfo[] Enrich = SurrogateMethodCandidates[typeof(LoggerEnrichmentConfiguration)];\n\u002B        internal static readonly MethodInfo[] Destructure = SurrogateMethodCandidates[typeof(LoggerDestructuringConfiguration)];\n\u002B        internal static readonly MethodInfo[] Filter = SurrogateMethodCandidates[typeof(LoggerFilterConfiguration)];\n\u002B\n\u002B        internal static LoggerConfiguration Sink(\n\u002B            LoggerSinkConfiguration loggerSinkConfiguration,\n\u002B            ILogEventSink sink,\n\u002B            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n\u002B            LoggingLevelSwitch levelSwitch = null)\n\u002B        {\n\u002B            return loggerSinkConfiguration.Sink(sink, restrictedToMinimumLevel, levelSwitch);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration Sink(\n\u002B            LoggerAuditSinkConfiguration auditSinkConfiguration,\n\u002B            ILogEventSink sink,\n\u002B            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n\u002B            LoggingLevelSwitch levelSwitch = null)\n\u002B        {\n\u002B            return auditSinkConfiguration.Sink(sink, restrictedToMinimumLevel, levelSwitch);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration With(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, ILogEventEnricher enricher)\n\u002B        {\n\u002B            return loggerEnrichmentConfiguration.With(enricher);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration)\n\u002B        {\n\u002B            return loggerEnrichmentConfiguration.FromLogContext();\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration With(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            IDestructuringPolicy policy)\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.With(policy);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration AsScalar(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            Type scalarType)\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.AsScalar(scalarType);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration ToMaximumCollectionCount(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            int maximumCollectionCount)\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.ToMaximumCollectionCount(maximumCollectionCount);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration ToMaximumDepth(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            int maximumDestructuringDepth)\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.ToMaximumDepth(maximumDestructuringDepth);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration ToMaximumStringLength(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            int maximumStringLength)\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.ToMaximumStringLength(maximumStringLength);\n\u002B        }\n\u002B\n\u002B        internal static LoggerConfiguration With(LoggerFilterConfiguration loggerFilterConfiguration,\n\u002B            ILogEventFilter filter)\n\u002B        {\n\u002B            return loggerFilterConfiguration.With(filter);\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "03cb721d6d5ecaa31bb5eb83556eec5975107612",
      "filename": "test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,6 \u002B1,6 @@\n \uFEFF\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n   \u003CPropertyGroup\u003E\n-    \u003CTargetFrameworks\u003Enetcoreapp1.1;net46\u003C/TargetFrameworks\u003E\n\u002B    \u003CTargetFrameworks\u003Enetcoreapp2.0;net46\u003C/TargetFrameworks\u003E\n     \u003CAssemblyName\u003ESerilog.PerformanceTests\u003C/AssemblyName\u003E\n     \u003CAssemblyOriginatorKeyFile\u003E../../assets/Serilog.snk\u003C/AssemblyOriginatorKeyFile\u003E\n     \u003CSignAssembly\u003Etrue\u003C/SignAssembly\u003E"
    },
    {
      "sha": "dc3049c208ccd2cb4f577542fc079fa2b951b727",
      "filename": "test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,64 @@\n\u002B\uFEFFusing Serilog.Capturing;\n\u002Busing Xunit;\n\u002Busing System.Linq;\n\u002B\n\u002Bnamespace Serilog.Tests.Capturing\n\u002B{\n\u002B    public class GetablePropertyFinderTests\n\u002B    {\n\u002B        [Fact]\n\u002B        public void GetPropertiesRecursiveIntegerTypeYieldNoResult()\n\u002B        {\n\u002B            var result = (default(int)).GetType().GetPropertiesRecursive();\n\u002B            Assert.Empty(result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void GetPropertiesRecursiveBooleanTypeYieldNoResult()\n\u002B        {\n\u002B            var result = (default(bool)).GetType().GetPropertiesRecursive();\n\u002B            Assert.Empty(result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void GetPropertiesRecursiveCharTypeYieldNoResult()\n\u002B        {\n\u002B            var result = (default(char)).GetType().GetPropertiesRecursive();\n\u002B            Assert.Empty(result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void GetPropertiesRecursiveObjectTypeYieldNoResult()\n\u002B        {\n\u002B            var result = (new object()).GetType().GetPropertiesRecursive();\n\u002B            Assert.Empty(result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void GetPropertiesRecursiveStringTypeYieldResult()\n\u002B        {\n\u002B            var result = (string.Empty).GetType().GetPropertiesRecursive();\n\u002B            Assert.NotEmpty(result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        // https://github.com/serilog/serilog/issues/1235\n\u002B        public void GetPropertiesRecursiveBaseTypeSucceedsOnWcfProxyType()\n\u002B        {\n\u002B            var remoteAddress = new System.ServiceModel.EndpointAddress(\u0022http://localhost\u0022);\n\u002B            var binding = new System.ServiceModel.BasicHttpBinding();\n\u002B\n\u002B            var myFactory = new System.ServiceModel.ChannelFactory\u003CIMyChannel\u003E(binding, remoteAddress);\n\u002B            var channel = myFactory.CreateChannel();\n\u002B\n\u002B            var _ = channel.GetType().GetPropertiesRecursive().ToList();\n\u002B        }\n\u002B\n\u002B        [System.ServiceModel.ServiceContract]\n\u002B        interface IMyChannel\n\u002B        {\n\u002B            [System.ServiceModel.OperationContract]\n\u002B            string Get();\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "bcdd401d3cc5acc963b85cae21b5da87527f64bb",
      "filename": "test/Serilog.Tests/Core/LoggerTests.cs",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Core/LoggerTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Core/LoggerTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Core/LoggerTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -133,5 \u002B133,15 @@ public void TheNoneLoggerIsAConstant()\n             var secondCall = Logger.None;\n             Assert.Equal(firstCall, secondCall);\n         }\n-\t}\n\u002B\n\u002B        [Fact]\n\u002B        public void TheNoneLoggerIsSingleton()\n\u002B        {\n\u002B            lock (new object())\n\u002B            {\n\u002B                Log.CloseAndFlush();\n\u002B                Assert.Same(Log.Logger, Logger.None);\n\u002B            }\n\u002B        }\n\u002B    }\n }"
    },
    {
      "sha": "e6a86f4d129f0a833edac22ef24d239ed16a89a1",
      "filename": "test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "status": "modified",
      "additions": 87,
      "deletions": 3,
      "changes": 90,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,4 \u002B1,4 @@\n-\uFEFFusing System;\n\u002Busing System;\n using System.Globalization;\n using System.IO;\n using System.Linq;\n@@ -101,7 \u002B101,7 @@ public void LowercaseFormatSpecifierIsSupportedForStrings()\n         [InlineData(LogEventLevel.Warning, 8, \u0022Warning\u0022)]\n         public void FixedLengthLevelIsSupported(\n             LogEventLevel level,\n-            int width, \n\u002B            int width,\n             string expected)\n         {\n             var formatter = new MessageTemplateTextFormatter($\u0022{{Level:t{width}}}\u0022, CultureInfo.InvariantCulture);\n@@ -245,7 \u002B245,7 @@ public void AppliesLiteralFormattingToMessageStringsWhenSpecified(string format,\n         public void AppliesJsonFormattingToMessageStructuresWhenSpecified(string format, string expected)\n         {\n             var formatter = new MessageTemplateTextFormatter(\u0022{Message\u0022 \u002B format \u002B \u0022}\u0022, null);\n-            var evt = DelegatingSink.GetLogEvent(l =\u003E l.Information(\u0022{@Obj}\u0022, new {Name = \u0022World\u0022}));\n\u002B            var evt = DelegatingSink.GetLogEvent(l =\u003E l.Information(\u0022{@Obj}\u0022, new { Name = \u0022World\u0022 }));\n             var sw = new StringWriter();\n             formatter.Format(evt, sw);\n             Assert.Equal(expected, sw.ToString());\n@@ -276,5 \u002B276,89 @@ public void AnEmptyPropertiesTokenIsAnEmptyStructureValueWithDefaultFormatting()\n             var expected = new StructureValue(Enumerable.Empty\u003CLogEventProperty\u003E()).ToString();\n             Assert.Equal(expected, sw.ToString());\n         }\n\u002B\n\u002B        [Theory]\n\u002B        [InlineData(\u0022\u0022, true)]\n\u002B        [InlineData(\u0022:lj\u0022, false)]\n\u002B        [InlineData(\u0022:jl\u0022, false)]\n\u002B        [InlineData(\u0022:j\u0022, false)]\n\u002B        [InlineData(\u0022:l\u0022, true)]\n\u002B        public void FormatProviderWithScalarProperties(string format, bool shouldUseCustomFormatter)\n\u002B        {\n\u002B            var frenchFormatProvider = new CultureInfo(\u0022fr-FR\u0022);\n\u002B            var defaultFormatProvider = CultureInfo.InvariantCulture;\n\u002B\n\u002B            var date = new DateTime(2018, 01, 01);\n\u002B            var number = 12.345;\n\u002B\n\u002B            var expectedFormattedDate = shouldUseCustomFormatter\n\u002B                ? date.ToString(frenchFormatProvider)\n\u002B                : date.ToString(\u0022O\u0022, defaultFormatProvider);\n\u002B            var expectedFormattedNumber = shouldUseCustomFormatter\n\u002B                ? number.ToString(frenchFormatProvider)\n\u002B                : number.ToString(defaultFormatProvider);\n\u002B\n\u002B            var formatter = new MessageTemplateTextFormatter(\u0022{Message\u0022 \u002B format \u002B \u0022}\u0022, frenchFormatProvider);\n\u002B            var evt = DelegatingSink.GetLogEvent(l =\u003E\n\u002B            {\n\u002B                l.Information(\u0022{MyDate}{MyNumber}\u0022, date, number);\n\u002B            });\n\u002B            var sw = new StringWriter();\n\u002B            formatter.Format(evt, sw);\n\u002B\n\u002B            Assert.Contains(expectedFormattedDate, sw.ToString());\n\u002B            Assert.Contains(expectedFormattedNumber, sw.ToString());\n\u002B        }\n\u002B\n\u002B        [Theory]\n\u002B        [InlineData(\u0022\u0022, true)]\n\u002B        [InlineData(\u0022:lj\u0022, false)]\n\u002B        [InlineData(\u0022:jl\u0022, false)]\n\u002B        [InlineData(\u0022:j\u0022, false)]\n\u002B        [InlineData(\u0022:l\u0022, true)]\n\u002B        public void FormatProviderWithDestructuredProperties(string format, bool shouldUseCustomFormatter)\n\u002B        {\n\u002B            var frenchFormatProvider = new CultureInfo(\u0022fr-FR\u0022);\n\u002B            var defaultFormatProvider = CultureInfo.InvariantCulture;\n\u002B\n\u002B            var date = new DateTime(2018, 01, 01);\n\u002B            var number = 12.345;\n\u002B\n\u002B            var expectedFormattedDate = shouldUseCustomFormatter\n\u002B                ? date.ToString(frenchFormatProvider)\n\u002B                : date.ToString(\u0022O\u0022, defaultFormatProvider);\n\u002B            var expectedFormattedNumber = shouldUseCustomFormatter\n\u002B                ? number.ToString(frenchFormatProvider)\n\u002B                : number.ToString(defaultFormatProvider);\n\u002B\n\u002B            var formatter = new MessageTemplateTextFormatter(\u0022{Message\u0022 \u002B format \u002B \u0022}\u0022, frenchFormatProvider);\n\u002B            var evt = DelegatingSink.GetLogEvent(l =\u003E\n\u002B            {\n\u002B                l.Information(\u0022{@Item}\u0022, new\n\u002B                {\n\u002B                    MyDate = date,\n\u002B                    MyNumber = number\n\u002B                });\n\u002B            });\n\u002B            var sw = new StringWriter();\n\u002B            formatter.Format(evt, sw);\n\u002B\n\u002B            Assert.Contains(expectedFormattedDate, sw.ToString());\n\u002B            Assert.Contains(expectedFormattedNumber, sw.ToString());\n\u002B        }\n\u002B\n\u002B        [Theory]\n\u002B        [InlineData(15, \u0022\u0022, \u002215\u0022)]\n\u002B        [InlineData(15, \u0022,5\u0022, \u0022   15\u0022)]\n\u002B        [InlineData(15, \u0022,-5\u0022, \u002215   \u0022)]\n\u002B        public void PaddingIsApplied(int n, string format, string expected)\n\u002B        {\n\u002B            var formatter = new MessageTemplateTextFormatter(\u0022{ThreadId\u0022 \u002B format \u002B \u0022}\u0022, null);\n\u002B            var evt = Some.InformationEvent();\n\u002B            evt.AddOrUpdateProperty(new LogEventProperty(\u0022ThreadId\u0022, new ScalarValue(n)));\n\u002B            var sw = new StringWriter();\n\u002B            formatter.Format(evt, sw);\n\u002B            Assert.Equal(expected, sw.ToString());\n\u002B        }\n     }\n }"
    },
    {
      "sha": "82e8a3056c1d67c2733b900b5bb2b59166943bca",
      "filename": "test/Serilog.Tests/LoggerConfigurationTests.cs",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/LoggerConfigurationTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/LoggerConfigurationTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/LoggerConfigurationTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -590,7 \u002B590,7 @@ class ThrowingProperty\n         [Fact]\n         public void WrappingDecoratesTheConfiguredSink()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.Dummy(w =\u003E w.Sink(sink))\n@@ -623,7 \u002B623,7 @@ public void WrappingDoesNotPermitEnrichment()\n         [Fact]\n         public void WrappingIsAppliedWhenChaining()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink1 = new CollectingSink();\n             var sink2 = new CollectingSink();\n             var logger = new LoggerConfiguration()\n@@ -642,7 \u002B642,7 @@ public void WrappingIsAppliedWhenChaining()\n         [Fact]\n         public void WrappingIsAppliedWhenCallingMultipleTimes()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink1 = new CollectingSink();\n             var sink2 = new CollectingSink();\n             var logger = new LoggerConfiguration()\n@@ -678,7 \u002B678,7 @@ public void WrappingWarnsAboutNonDisposableWrapper()\n         [Fact]\n         public void WrappingSinkRespectsLogEventLevelSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap(w =\u003E w.Sink(sink), LogEventLevel.Error, null)\n@@ -693,7 \u002B693,7 @@ public void WrappingSinkRespectsLogEventLevelSetting()\n         [Fact]\n         public void WrappingSinkRespectsLevelSwitchSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap(\n@@ -710,7 \u002B710,7 @@ public void WrappingSinkRespectsLevelSwitchSetting()\n         [Fact]\n         public void WrappingSinkRespectsSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n\u002B            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap("
    },
    {
      "sha": "e6cfd86e14c44ec8dc19d67b8c6ca04950065d17",
      "filename": "test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/MethodOverloadConventionTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -933,7 \u002B933,7 @@ static ILogger GetLogger(Type loggerType, out CollectingSink sink, LogEventLevel\n             }\n \n             if (loggerType == typeof(SilentLogger))\n-                return new SilentLogger();\n\u002B                return SilentLogger.Instance;\n \n             throw new ArgumentException($\u0022Logger Type of {loggerType} is not supported\u0022);\n         }"
    },
    {
      "sha": "9ab406ea74e42627cfbf47d5877e908157154e2f",
      "filename": "test/Serilog.Tests/Serilog.Tests.csproj",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Serilog.Tests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Serilog.Tests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Serilog.Tests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -15,6 \u002B15,8 @@\n   \u003CItemGroup\u003E\n     \u003CPackageReference Include=\u0022Microsoft.NET.Test.Sdk\u0022 Version=\u002215.5.0\u0022 /\u003E\n     \u003CPackageReference Include=\u0022Newtonsoft.Json\u0022 Version=\u00229.0.1\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.ServiceModel.Http\u0022 Version=\u00224.5.3\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.ServiceModel.Primitives\u0022 Version=\u00224.5.3\u0022 /\u003E\n     \u003CPackageReference Include=\u0022xunit.runner.visualstudio\u0022 Version=\u00222.3.1\u0022 /\u003E\n     \u003CPackageReference Include=\u0022xunit\u0022 Version=\u00222.3.1\u0022 /\u003E\n     \u003CPackageReference Include=\u0022System.ValueTuple\u0022 Version=\u00224.3.1\u0022 /\u003E"
    },
    {
      "sha": "ed463994fa4cd521ebea4b044d198483aefd32cb",
      "filename": "test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "status": "modified",
      "additions": 80,
      "deletions": 8,
      "changes": 88,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -9,22 \u002B9,94 @@ namespace Serilog.Tests.Settings\n {\n     public class CallableConfigurationMethodFinderTests\n     {\n\u002B        static readonly Assembly SerilogAssembly = typeof(Log).GetTypeInfo().Assembly;\n\u002B        static readonly Assembly TestDummiesAssembly = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly;\n\u002B\n\u002B        [Fact]\n\u002B        public void FindsSinkSpecificConfigurationMethods()\n\u002B        {\n\u002B            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n\u002B\n\u002B            var sinkMethods = CallableConfigurationMethodFinder\n\u002B                .FindConfigurationMethods(\n\u002B                    searchInAssemblies,\n\u002B                    typeof(LoggerSinkConfiguration))\n\u002B                .Select(m =\u003E m.Name)\n\u002B                .Distinct()\n\u002B                .ToList();\n\u002B\n\u002B            Assert.Contains(nameof(LoggerSinkConfiguration.Sink), sinkMethods);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void FindsAuditSinkSpecificConfigurationMethods()\n\u002B        {\n\u002B            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n\u002B\n\u002B            var auditSinkMethods = CallableConfigurationMethodFinder\n\u002B                .FindConfigurationMethods(\n\u002B                    searchInAssemblies,\n\u002B                    typeof(LoggerAuditSinkConfiguration))\n\u002B                .Select(m =\u003E m.Name)\n\u002B                .Distinct()\n\u002B                .ToList();\n\u002B\n\u002B            Assert.Contains(nameof(LoggerAuditSinkConfiguration.Sink), auditSinkMethods);\n\u002B        }\n\u002B\n         [Fact]\n         public void FindsEnricherSpecificConfigurationMethods()\n         {\n-            var eventEnrichers = CallableConfigurationMethodFinder\n-                .FindConfigurationMethods(new[]\n-                {\n-                    typeof(Log).GetTypeInfo().Assembly,\n-                    typeof(DummyThreadIdEnricher).GetTypeInfo().Assembly\n-                }, typeof(LoggerEnrichmentConfiguration))\n\u002B            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n\u002B\n\u002B            var enricherMethods = CallableConfigurationMethodFinder\n\u002B                .FindConfigurationMethods(\n\u002B                    searchInAssemblies,\n\u002B                    typeof(LoggerEnrichmentConfiguration))\n\u002B                .Select(m =\u003E m.Name)\n\u002B                .Distinct()\n\u002B                .ToList();\n\u002B\n\u002B            Assert.Contains(nameof(LoggerEnrichmentConfiguration.With), enricherMethods);\n\u002B            Assert.Contains(nameof(LoggerEnrichmentConfiguration.FromLogContext), enricherMethods);\n\u002B            Assert.Contains(nameof(DummyLoggerConfigurationExtensions.WithDummyThreadId), enricherMethods);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void FindsDestructureSpecificConfigurationMethods()\n\u002B        {\n\u002B            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n\u002B\n\u002B            var destructuringMethods = CallableConfigurationMethodFinder\n\u002B                .FindConfigurationMethods(\n\u002B                    searchInAssemblies,\n\u002B                    typeof(LoggerDestructuringConfiguration))\n                 .Select(m =\u003E m.Name)\n                 .Distinct()\n                 .ToList();\n \n\u002B            Assert.Contains(nameof(LoggerDestructuringConfiguration.AsScalar), destructuringMethods);\n\u002B            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumCollectionCount), destructuringMethods);\n\u002B            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumDepth), destructuringMethods);\n\u002B            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumStringLength), destructuringMethods);\n\u002B            Assert.Contains(nameof(DummyLoggerConfigurationExtensions.WithDummyHardCodedString), destructuringMethods);\n\u002B            Assert.Contains(nameof(LoggerDestructuringConfiguration.With), destructuringMethods);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void FindsFilterSpecificConfigurationMethods()\n\u002B        {\n\u002B            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n\u002B\n\u002B            var filterMethods = CallableConfigurationMethodFinder\n\u002B                .FindConfigurationMethods(\n\u002B                    searchInAssemblies,\n\u002B                    typeof(LoggerFilterConfiguration))\n\u002B                .Select(m =\u003E m.Name)\n\u002B                .Distinct()\n\u002B                .ToList();\n \n-            Assert.Contains(\u0022FromLogContext\u0022, eventEnrichers);\n-            Assert.Contains(\u0022WithDummyThreadId\u0022, eventEnrichers);\n\u002B            Assert.Contains(nameof(LoggerFilterConfiguration.With), filterMethods);\n         }\n     }\n }"
    },
    {
      "sha": "0659dfd0c2fdf04464dbdda4366204ed50521725",
      "filename": "test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "status": "modified",
      "additions": 300,
      "deletions": 4,
      "changes": 304,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -115,8 \u002B115,8 @@ public void SinksAreConfigured()\n                 .ReadFrom.KeyValuePairs(settings)\n                 .CreateLogger();\n \n-            DummyRollingFileSink.Emitted.Clear();\n-            DummyRollingFileAuditSink.Emitted.Clear();\n\u002B            DummyRollingFileSink.Reset();\n\u002B            DummyRollingFileAuditSink.Reset();\n \n             log.Write(Some.InformationEvent());\n \n@@ -137,8 \u002B137,8 @@ public void AuditSinksAreConfigured()\n                 .ReadFrom.KeyValuePairs(settings)\n                 .CreateLogger();\n \n-            DummyRollingFileSink.Emitted.Clear();\n-            DummyRollingFileAuditSink.Emitted.Clear();\n\u002B            DummyRollingFileSink.Reset();\n\u002B            DummyRollingFileAuditSink.Reset();\n \n             log.Write(Some.InformationEvent());\n \n@@ -381,5 \u002B381,301 @@ public void SinksAreConfiguredWithStaticMember()\n \n             Assert.Equal(ConsoleThemes.Theme1, DummyConsoleSink.Theme);\n         }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringToMaximumDepthIsApplied()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022destructure:ToMaximumDepth.maximumDestructuringDepth\u0022] = \u00223\u0022\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            var nestedObject = new\n\u002B            {\n\u002B                A = new\n\u002B                {\n\u002B                    B = new\n\u002B                    {\n\u002B                        C = new\n\u002B                        {\n\u002B                            D = \u0022F\u0022\n\u002B                        }\n\u002B                    }\n\u002B                }\n\u002B            };\n\u002B\n\u002B            log.Information(\u0022Destructuring a big graph {@DeeplyNested}\u0022, nestedObject);\n\u002B            var formattedProperty = evt.Properties[\u0022DeeplyNested\u0022].ToString();\n\u002B\n\u002B            Assert.Contains(\u0022C\u0022, formattedProperty);\n\u002B            Assert.DoesNotContain(\u0022D\u0022, formattedProperty);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringToMaximumStringLengthIsApplied()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022destructure:ToMaximumStringLength.maximumStringLength\u0022] = \u00223\u0022\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Information(\u0022Destructuring a long string {@LongString}\u0022, \u0022ABCDEFGH\u0022);\n\u002B            var formattedProperty = evt.Properties[\u0022LongString\u0022].ToString();\n\u002B\n\u002B            Assert.Equal(\u0022\\\u0022AB\u2026\\\u0022\u0022, formattedProperty);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringToMaximumCollectionCountIsApplied()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022destructure:ToMaximumCollectionCount.maximumCollectionCount\u0022] = \u00223\u0022\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            var collection = new[] { 1, 2, 3, 4, 5, 6 };\n\u002B            log.Information(\u0022Destructuring a big collection {@BigCollection}\u0022, collection);\n\u002B            var formattedProperty = evt.Properties[\u0022BigCollection\u0022].ToString();\n\u002B\n\u002B            Assert.Contains(\u00223\u0022, formattedProperty);\n\u002B            Assert.DoesNotContain(\u00224\u0022, formattedProperty);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringWithCustomExtensionMethodIsApplied()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022destructure:WithDummyHardCodedString.hardCodedString\u0022] = \u0022hardcoded\u0022\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Information(\u0022Destructuring with hard-coded policy {@Input}\u0022, new { Foo = \u0022Bar\u0022 });\n\u002B            var formattedProperty = evt.Properties[\u0022Input\u0022].ToString();\n\u002B\n\u002B            Assert.Equal(\u0022\\\u0022hardcoded\\\u0022\u0022, formattedProperty);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringAsScalarIsAppliedWithShortTypeName()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022destructure:AsScalar.scalarType\u0022] = \u0022System.Version\u0022\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Information(\u0022Destructuring as scalar {@Scalarized}\u0022, new Version(2, 3));\n\u002B            var prop = evt.Properties[\u0022Scalarized\u0022];\n\u002B\n\u002B            Assert.IsType\u003CScalarValue\u003E(prop);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringAsScalarIsAppliedWithAssemblyQualifiedName()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022destructure:AsScalar.scalarType\u0022] = typeof(Version).AssemblyQualifiedName\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Information(\u0022Destructuring as scalar {@Scalarized}\u0022, new Version(2, 3));\n\u002B            var prop = evt.Properties[\u0022Scalarized\u0022];\n\u002B\n\u002B            Assert.IsType\u003CScalarValue\u003E(prop);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void DestructuringWithIsAppliedWithCustomDestructuringPolicy()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022destructure:With.policy\u0022] = typeof(DummyReduceVersionToMajorPolicy).AssemblyQualifiedName\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Information(\u0022Destructuring with policy {@Version}\u0022, new Version(2, 3));\n\u002B            var prop = evt.Properties[\u0022Version\u0022];\n\u002B\n\u002B            Assert.IsType\u003CScalarValue\u003E(prop);\n\u002B            Assert.Equal(2, (prop as ScalarValue)?.Value);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WriteToSinkIsAppliedWithCustomSink()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022write-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WriteToSinkIsAppliedWithCustomSinkAndMinimumLevel()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022write-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n\u002B                    [\u0022write-to:Sink.restrictedToMinimumLevel\u0022] = \u0022Warning\u0022\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B            log.Write(Some.WarningEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WriteToSinkIsAppliedWithCustomSinkAndLevelSwitch()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022level-switch:$switch1\u0022] = \u0022Warning\u0022,\n\u002B                    [\u0022write-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n\u002B                    [\u0022write-to:Sink.levelSwitch\u0022] = \u0022$switch1\u0022\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B            log.Write(Some.WarningEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void AuditToSinkIsAppliedWithCustomSink()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022audit-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void AuditToSinkIsAppliedWithCustomSinkAndMinimumLevel()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022audit-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n\u002B                    [\u0022audit-to:Sink.restrictedToMinimumLevel\u0022] = \u0022Warning\u0022\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B            log.Write(Some.WarningEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void AuditToSinkIsAppliedWithCustomSinkAndLevelSwitch()\n\u002B        {\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022level-switch:$switch1\u0022] = \u0022Warning\u0022,\n\u002B                    [\u0022audit-to:Sink.sink\u0022] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n\u002B                    [\u0022audit-to:Sink.levelSwitch\u0022] = \u0022$switch1\u0022\n\u002B                })\n\u002B                .CreateLogger();\n\u002B\n\u002B            DummyRollingFileSink.Reset();\n\u002B            log.Write(Some.InformationEvent());\n\u002B            log.Write(Some.WarningEvent());\n\u002B\n\u002B            Assert.Single(DummyRollingFileSink.Emitted);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void EnrichWithIsAppliedWithCustomEnricher()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022enrich:With.enricher\u0022] = typeof(DummyThreadIdEnricher).AssemblyQualifiedName\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.Write(Some.InformationEvent());\n\u002B\n\u002B            Assert.NotNull(evt);\n\u002B            Assert.True(evt.Properties.ContainsKey(\u0022ThreadId\u0022), \u0022Event should have enriched property ThreadId\u0022);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void FilterWithIsAppliedWithCustomFilter()\n\u002B        {\n\u002B            LogEvent evt = null;\n\u002B            var log = new LoggerConfiguration()\n\u002B                .ReadFrom.KeyValuePairs(new Dictionary\u003Cstring, string\u003E\n\u002B                {\n\u002B                    [\u0022using:TestDummies\u0022] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n\u002B                    [\u0022filter:With.filter\u0022] = typeof(DummyAnonymousUserFilter).AssemblyQualifiedName\n\u002B                })\n\u002B                .WriteTo.Sink(new DelegatingSink(e =\u003E evt = e))\n\u002B                .CreateLogger();\n\u002B\n\u002B            log.ForContext(\u0022User\u0022, \u0022anonymous\u0022).Write(Some.InformationEvent());\n\u002B            Assert.Null(evt);\n\u002B            log.ForContext(\u0022User\u0022, \u0022the user\u0022).Write(Some.InformationEvent());\n\u002B            Assert.NotNull(evt);\n\u002B        }\n     }\n }"
    },
    {
      "sha": "e53a1b9b55c4e9e6364baf0f26018b47465110e6",
      "filename": "test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -45,6 \u002B45,21 @@ public void ValuesConvertToEnumMembers()\n             Assert.Equal(LogEventLevel.Information, result);\n         }\n \n\u002B        [Fact]\n\u002B        public void ValuesConvertToTypeFromQualifiedName()\n\u002B        {\n\u002B            var result = (Type)SettingValueConversions.ConvertToType(\u0022System.Version\u0022, typeof(Type));\n\u002B            Assert.Equal(typeof(Version), result);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void ValuesConvertToTypeFromAssemblyQualifiedName()\n\u002B        {\n\u002B            var assemblyQualifiedName = typeof(Version).AssemblyQualifiedName;\n\u002B            var result = (Type)SettingValueConversions.ConvertToType(assemblyQualifiedName, typeof(Type));\n\u002B            Assert.Equal(typeof(Version), result);\n\u002B        }\n\u002B\n         [Fact]\n         public void StringValuesConvertToDefaultInstancesIfTargetIsInterface()\n         {\n@@ -102,7 \u002B117,7 @@ public void TimeSpanValuesCanBeParsed(string input, int expDays, int expHours, i\n                     null, null)]\n         [InlineData(null,\n                     null, null)]\n-        [InlineData(\u0022 \u0022 ,\n\u002B        [InlineData(\u0022 \u0022,\n                     null, null)]\n         // a full-qualified type name should not be considered a static member accessor\n         [InlineData(\u0022My.NameSpace.Class, MyAssembly, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\u0022,"
    },
    {
      "sha": "6f6bc642498ec279d45d0f74dcd439545eabbcb9",
      "filename": "test/Serilog.UwpTests/Package.appxmanifest",
      "status": "modified",
      "additions": 7,
      "deletions": 24,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Package.appxmanifest",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Package.appxmanifest",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Package.appxmanifest?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,40 \u002B1,23 @@\n \uFEFF\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u003E\n-\u003CPackage\n-  xmlns=\u0022http://schemas.microsoft.com/appx/manifest/foundation/windows10\u0022\n-  xmlns:mp=\u0022http://schemas.microsoft.com/appx/2014/phone/manifest\u0022\n-  xmlns:uap=\u0022http://schemas.microsoft.com/appx/manifest/uap/windows10\u0022\n-  IgnorableNamespaces=\u0022uap mp\u0022\u003E\n-\n-  \u003CIdentity Name=\u002287ea80a0-d6f0-4b89-beeb-900b848f1b7c\u0022\n-            Publisher=\u0022CN=User\u0022\n-            Version=\u00221.0.0.0\u0022 /\u003E\n-\n-  \u003Cmp:PhoneIdentity PhoneProductId=\u002287ea80a0-d6f0-4b89-beeb-900b848f1b7c\u0022 PhonePublisherId=\u002200000000-0000-0000-0000-000000000000\u0022/\u003E\n-\n\u002B\u003CPackage xmlns=\u0022http://schemas.microsoft.com/appx/manifest/foundation/windows10\u0022 xmlns:mp=\u0022http://schemas.microsoft.com/appx/2014/phone/manifest\u0022 xmlns:uap=\u0022http://schemas.microsoft.com/appx/manifest/uap/windows10\u0022 IgnorableNamespaces=\u0022uap mp\u0022\u003E\n\u002B  \u003CIdentity Name=\u002287ea80a0-d6f0-4b89-beeb-900b848f1b7c\u0022 Publisher=\u0022CN=Serilog\u0022 Version=\u00221.0.0.0\u0022 /\u003E\n\u002B  \u003Cmp:PhoneIdentity PhoneProductId=\u002287ea80a0-d6f0-4b89-beeb-900b848f1b7c\u0022 PhonePublisherId=\u002200000000-0000-0000-0000-000000000000\u0022 /\u003E\n   \u003CProperties\u003E\n     \u003CDisplayName\u003ESerilog.UwpTests\u003C/DisplayName\u003E\n     \u003CPublisherDisplayName\u003EUser\u003C/PublisherDisplayName\u003E\n     \u003CLogo\u003EAssets\\StoreLogo.png\u003C/Logo\u003E\n   \u003C/Properties\u003E\n-\n   \u003CDependencies\u003E\n     \u003CTargetDeviceFamily Name=\u0022Windows.Universal\u0022 MinVersion=\u002210.0.0.0\u0022 MaxVersionTested=\u002210.0.0.0\u0022 /\u003E\n   \u003C/Dependencies\u003E\n-\n   \u003CResources\u003E\n     \u003CResource Language=\u0022x-generate\u0022 /\u003E\n   \u003C/Resources\u003E\n   \u003CApplications\u003E\n-    \u003CApplication Id=\u0022vstest.executionengine.universal.App\u0022\n-        Executable=\u0022$targetnametoken$.exe\u0022\n-        EntryPoint=\u0022Serilog.UwpTests.App\u0022\u003E\n-      \u003Cuap:VisualElements\n-        DisplayName=\u0022Serilog.UwpTests\u0022\n-        Square150x150Logo=\u0022Assets\\Square150x150Logo.png\u0022\n-        Square44x44Logo=\u0022Assets\\Square44x44Logo.png\u0022\n-        Description=\u0022Serilog.UwpTests\u0022\n-        BackgroundColor=\u0022transparent\u0022\u003E\n-        \u003Cuap:DefaultTile Wide310x150Logo=\u0022Assets\\Wide310x150Logo.png\u0022/\u003E\n\u002B    \u003CApplication Id=\u0022vstest.executionengine.universal.App\u0022 Executable=\u0022$targetnametoken$.exe\u0022 EntryPoint=\u0022Serilog.UwpTests.App\u0022\u003E\n\u002B      \u003Cuap:VisualElements DisplayName=\u0022Serilog.UwpTests\u0022 Square150x150Logo=\u0022Assets\\Square150x150Logo.png\u0022 Square44x44Logo=\u0022Assets\\Square44x44Logo.png\u0022 Description=\u0022Serilog.UwpTests\u0022 BackgroundColor=\u0022transparent\u0022\u003E\n\u002B        \u003Cuap:DefaultTile Wide310x150Logo=\u0022Assets\\Wide310x150Logo.png\u0022\u003E\n\u002B        \u003C/uap:DefaultTile\u003E\n         \u003Cuap:SplashScreen Image=\u0022Assets\\SplashScreen.png\u0022 /\u003E\n       \u003C/uap:VisualElements\u003E\n     \u003C/Application\u003E"
    },
    {
      "sha": "956847f18bdb85cc0d9cdd1f8418368f9d8f5070",
      "filename": "test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Serilog.UwpTests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -18,6 \u002B18,7 @@\n     \u003CProjectTypeGuids\u003E{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\u003C/ProjectTypeGuids\u003E\n     \u003CPackageCertificateKeyFile\u003ESerilog.UwpTests_TemporaryKey.pfx\u003C/PackageCertificateKeyFile\u003E\n     \u003CUnitTestPlatformVersion Condition=\u0022\u0027$(UnitTestPlatformVersion)\u0027 == \u0027\u0027\u0022\u003E$(VisualStudioVersion)\u003C/UnitTestPlatformVersion\u003E\n\u002B    \u003CPackageCertificateThumbprint\u003EBDD6FD6CCE198001F3CD008EAF2F1CD86E3682D5\u003C/PackageCertificateThumbprint\u003E\n   \u003C/PropertyGroup\u003E\n   \u003CPropertyGroup Condition=\u0022\u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|x86\u0027\u0022\u003E\n     \u003CDebugSymbols\u003Etrue\u003C/DebugSymbols\u003E\n@@ -128,13 \u002B129,13 @@\n   \u003C/ItemGroup\u003E\n   \u003CItemGroup\u003E\n     \u003CPackageReference Include=\u0022Microsoft.NETCore.UniversalWindowsPlatform\u0022\u003E\n-      \u003CVersion\u003E5.3.3\u003C/Version\u003E\n\u002B      \u003CVersion\u003E6.1.5\u003C/Version\u003E\n     \u003C/PackageReference\u003E\n     \u003CPackageReference Include=\u0022xunit\u0022\u003E\n-      \u003CVersion\u003E2.2.0\u003C/Version\u003E\n\u002B      \u003CVersion\u003E2.3.1\u003C/Version\u003E\n     \u003C/PackageReference\u003E\n     \u003CPackageReference Include=\u0022xunit.runner.visualstudio\u0022\u003E\n-      \u003CVersion\u003E2.2.0\u003C/Version\u003E\n\u002B      \u003CVersion\u003E2.3.1\u003C/Version\u003E\n     \u003C/PackageReference\u003E\n   \u003C/ItemGroup\u003E\n   \u003CItemGroup\u003E"
    },
    {
      "sha": "c9cc685c2eb5d0339d4ab97d3c799032b66ffa69",
      "filename": "test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx?ref=870feca66f81844ed279998a4d28a3b2614bbd7a"
    },
    {
      "sha": "a47dd11b833725ecea7fe37da13fdb546931d8da",
      "filename": "test/TestDummies/DummyAnonymousUserFilter.cs",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyAnonymousUserFilter.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyAnonymousUserFilter.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyAnonymousUserFilter.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,25 @@\n\u002B\uFEFF\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace TestDummies\n\u002B{\n\u002B    public class DummyAnonymousUserFilter : ILogEventFilter\n\u002B    {\n\u002B        public bool IsEnabled(LogEvent logEvent)\n\u002B        {\n\u002B            if (logEvent.Properties.ContainsKey(\u0022User\u0022))\n\u002B            {\n\u002B                if (logEvent.Properties[\u0022User\u0022] is ScalarValue sv)\n\u002B                {\n\u002B                    if (sv.Value is string s \u0026\u0026 s == \u0022anonymous\u0022)\n\u002B                    {\n\u002B                        return false;\n\u002B                    }\n\u002B                }\n\u002B            }\n\u002B\n\u002B            return true;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "25d27249074f6592eb1cd4703c67b9cd16f97749",
      "filename": "test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,22 @@\n\u002B\uFEFFusing System;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace TestDummies\n\u002B{\n\u002B    public class DummyHardCodedStringDestructuringPolicy : IDestructuringPolicy\n\u002B    {\n\u002B        readonly string _hardCodedString;\n\u002B\n\u002B        public DummyHardCodedStringDestructuringPolicy(string hardCodedString)\n\u002B        {\n\u002B            _hardCodedString = hardCodedString ?? throw new ArgumentNullException(nameof(hardCodedString));\n\u002B        }\n\u002B\n\u002B        public bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue result)\n\u002B        {\n\u002B            result = new ScalarValue(_hardCodedString);\n\u002B            return true;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "aa6e61932ab8ff32a0a81ba34dcaa8358652fdc3",
      "filename": "test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyLoggerConfigurationExtensions.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -86,5 \u002B86,13 @@ public static LoggerConfiguration WithDummyThreadId(this LoggerEnrichmentConfigu\n                 logEventLevel,\n                 levelSwitch);\n         }\n\u002B\n\u002B        public static LoggerConfiguration WithDummyHardCodedString(\n\u002B            this LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n\u002B            string hardCodedString\n\u002B        )\n\u002B        {\n\u002B            return loggerDestructuringConfiguration.With(new DummyHardCodedStringDestructuringPolicy(hardCodedString));\n\u002B        }\n     }\n }"
    },
    {
      "sha": "bf754477313cc64f574ef0ffd5b40bf4a69c2b13",
      "filename": "test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyReduceVersionToMajorPolicy.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 \u002B1,21 @@\n\u002B\uFEFFusing System;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace TestDummies\n\u002B{\n\u002B    public class DummyReduceVersionToMajorPolicy : IDestructuringPolicy\n\u002B    {\n\u002B        public bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue result)\n\u002B        {\n\u002B            if (value is Version version)\n\u002B            {\n\u002B                result = new ScalarValue(version.Major);\n\u002B                return true;\n\u002B            }\n\u002B\n\u002B            result = null;\n\u002B            return false;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "2ba17e35752c703778bb0086e352ce133799adb9",
      "filename": "test/TestDummies/DummyRollingFileAuditSink.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileAuditSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileAuditSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyRollingFileAuditSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,13 \u002B8,18 @@ namespace TestDummies\n     public class DummyRollingFileAuditSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List\u003CLogEvent\u003E Emitted = new List\u003CLogEvent\u003E();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n\u002B        static List\u003CLogEvent\u003E _emitted;\n\u002B\n\u002B        public static List\u003CLogEvent\u003E Emitted =\u003E _emitted ?? (_emitted = new List\u003CLogEvent\u003E());\n \n         public void Emit(LogEvent logEvent)\n         {\n             Emitted.Add(logEvent);\n         }\n\u002B\n\u002B        public static void Reset()\n\u002B        {\n\u002B            _emitted = null;\n\u002B        }\n     }\n }"
    },
    {
      "sha": "2f6f229ebb71a25f6564f50259a419bd9558cbbc",
      "filename": "test/TestDummies/DummyRollingFileSink.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyRollingFileSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,13 \u002B8,18 @@ namespace TestDummies\n     public class DummyRollingFileSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List\u003CLogEvent\u003E Emitted = new List\u003CLogEvent\u003E();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n\u002B        static List\u003CLogEvent\u003E _emitted;\n\u002B\n\u002B        public static List\u003CLogEvent\u003E Emitted =\u003E _emitted ?? (_emitted = new List\u003CLogEvent\u003E());\n \n         public void Emit(LogEvent logEvent)\n         {\n             Emitted.Add(logEvent);\n         }\n\u002B\n\u002B        public static void Reset()\n\u002B        {\n\u002B            _emitted = null;\n\u002B        }\n     }\n }"
    },
    {
      "sha": "a640d55e4ff84e4c8709277f8e92e8a747107682",
      "filename": "test/TestDummies/DummyThreadIdEnricher.cs",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyThreadIdEnricher.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyThreadIdEnricher.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyThreadIdEnricher.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -6,7 \u002B6,9 @@ namespace TestDummies\n     public class DummyThreadIdEnricher : ILogEventEnricher\n     {\n         public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n-        {          \n\u002B        {\n\u002B            logEvent.AddPropertyIfAbsent(propertyFactory\n\u002B                .CreateProperty(\u0022ThreadId\u0022, \u0022SomeId\u0022));\n         }\n     }\n }"
    },
    {
      "sha": "cb2f048ff2188237a88622b9146308c9905d78ca",
      "filename": "test/TestDummies/DummyWrappingSink.cs",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyWrappingSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyWrappingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyWrappingSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,11 \u002B8,11 @@ namespace TestDummies\n     public class DummyWrappingSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List\u003CLogEvent\u003E Emitted = new List\u003CLogEvent\u003E();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n\u002B        static List\u003CLogEvent\u003E _emitted;\n \n-        private readonly ILogEventSink _sink;\n\u002B        public static List\u003CLogEvent\u003E Emitted =\u003E _emitted ?? (_emitted = new List\u003CLogEvent\u003E());\n\u002B\n\u002B        readonly ILogEventSink _sink;\n \n         public DummyWrappingSink(ILogEventSink sink)\n         {\n@@ -24,5 \u002B24,10 @@ public void Emit(LogEvent logEvent)\n             Emitted.Add(logEvent);\n             _sink.Emit(logEvent);\n         }\n\u002B\n\u002B        public static void Reset()\n\u002B        {\n\u002B            _emitted = null;\n\u002B        }\n     }\n }"
    }
  ]
}