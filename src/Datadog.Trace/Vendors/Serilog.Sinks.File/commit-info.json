{
  "sha": "6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "node_id": "MDY6Q29tbWl0NTM0NzIxMzE6NmQ0NjNjMDUwYjI2ZWEwNTJjODJhZjlkN2ZhZmEwYzZlNGI3ZTUwZA==",
  "commit": {
    "author": {
      "name": "Nicholas Blumhardt",
      "email": "nblumhardt@nblumhardt.com",
      "date": "2017-10-30T01:29:33Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2017-10-30T01:29:33Z"
    },
    "message": "Merge pull request #37 from serilog/dev\n\n4.0.0 Release",
    "tree": {
      "sha": "8b7100bbfb41fc47363ba1f458baa52984334ed3",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/git/trees/8b7100bbfb41fc47363ba1f458baa52984334ed3"
    },
    "url": "https://api.github.com/repos/serilog/serilog-sinks-file/git/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ9oB9CRBK7hj4Ov3rIwAAdHIIAAvhaShpq9uaShpS/zWZiKyG\n2Awd2mayevjMXUep06V1acHEd8CrvNBha8q/m/KGCI3sX3NjLFZs1WNV8skuClf9\nGE1\u002BVhSwYeTbkuht77TNgHEw0i57KCAr7XbSU\u002BaCLoqxIeTL9Bm7xYFX6YJ9/\u002B8q\nP/OkxKTuosqFCcqf7Qyrl4uF58raCS0JxrirQkr0hIeAPji4YlaoQ3YmcbP0Fv/m\nXXPONVvqO9A3s2VaN59qxq4cOgnu01U5lIRSkminRcZTvW79AbxhqwMyeTtRh2cH\n7HnYFJy0PIDm2nzADGKcj2PAflDBCiLkp5ovGDlj5u9vyoEyPTvrZIBzxv76kz0=\n=v7NH\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 8b7100bbfb41fc47363ba1f458baa52984334ed3\nparent c8418ed96ad8c02fa4b472b03459153175adb4d6\nparent 3e0510ccd57777f8641267fed7b17040d6ed2f2c\nauthor Nicholas Blumhardt \u003Cnblumhardt@nblumhardt.com\u003E 1509326973 \u002B1000\ncommitter GitHub \u003Cnoreply@github.com\u003E 1509326973 \u002B1000\n\nMerge pull request #37 from serilog/dev\n\n4.0.0 Release"
    }
  },
  "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "html_url": "https://github.com/serilog/serilog-sinks-file/commit/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "comments_url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/comments",
  "author": {
    "login": "nblumhardt",
    "id": 342712,
    "node_id": "MDQ6VXNlcjM0MjcxMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/342712?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nblumhardt",
    "html_url": "https://github.com/nblumhardt",
    "followers_url": "https://api.github.com/users/nblumhardt/followers",
    "following_url": "https://api.github.com/users/nblumhardt/following{/other_user}",
    "gists_url": "https://api.github.com/users/nblumhardt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nblumhardt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nblumhardt/subscriptions",
    "organizations_url": "https://api.github.com/users/nblumhardt/orgs",
    "repos_url": "https://api.github.com/users/nblumhardt/repos",
    "events_url": "https://api.github.com/users/nblumhardt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nblumhardt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "html_url": "https://github.com/serilog/serilog-sinks-file/commit/c8418ed96ad8c02fa4b472b03459153175adb4d6"
    },
    {
      "sha": "3e0510ccd57777f8641267fed7b17040d6ed2f2c",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/3e0510ccd57777f8641267fed7b17040d6ed2f2c",
      "html_url": "https://github.com/serilog/serilog-sinks-file/commit/3e0510ccd57777f8641267fed7b17040d6ed2f2c"
    }
  ],
  "stats": {
    "total": 2426,
    "additions": 2121,
    "deletions": 305
  },
  "files": [
    {
      "sha": "6a880da5aee9524ab8caa0f4d626aa9ae9d43016",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 7,
      "deletions": 45,
      "changes": 52,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/.travis.yml",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/.travis.yml",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/.travis.yml?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,49 \u002B1,11 @@\n language: csharp\n \n-#dotnet cli require Ubuntu 14.04\n-sudo: required\n-dist: trusty\n-\n-#dotnet cli require OSX 10.10\n-osx_image: xcode7.1\n-\n-addons:\n-  apt:\n-    packages:\n-    - gettext\n-    - libcurl4-openssl-dev\n-    - libicu-dev\n-    - libssl-dev\n-    - libunwind8\n-    - zlib1g\n-\n-os:\n-  - linux\n-\n-env:\n-  global:\n-    - DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\n-    - TMP: /tmp\n-\n-  matrix: \n-    - CLI_VERSION=1.0.0-preview2-003121\n-    - CLI_VERSION=Latest\n-\n matrix:\n-  allow_failures:\n-    - env: CLI_VERSION=Latest\n-\n-before_install:\n-  - if test \u0022$TRAVIS_OS_NAME\u0022 == \u0022osx\u0022; then brew update; brew install openssl; brew link --force openssl; fi\n-  # Download script to install dotnet cli\n-  - if test \u0022$CLI_OBTAIN_URL\u0022 == \u0022\u0022; then export CLI_OBTAIN_URL=\u0022https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.sh\u0022; fi\n-  - curl -L --create-dirs $CLI_OBTAIN_URL -o ./scripts/obtain/install.sh\n-  - find ./scripts -name \u0022*.sh\u0022 -exec chmod \u002Bx {} \\;\n-  - export DOTNET_INSTALL_DIR=\u0022$PWD/.dotnetcli\u0022\n-  # use bash to workaround bug https://github.com/dotnet/cli/issues/1725\n-  - sudo bash ./scripts/obtain/install.sh --channel \u0022preview\u0022 --version \u0022$CLI_VERSION\u0022 --install-dir \u0022$DOTNET_INSTALL_DIR\u0022 --no-path\n-  # add dotnet to PATH\n-  - export PATH=\u0022$DOTNET_INSTALL_DIR:$PATH\u0022\n-\n\u002B  include:\n\u002B    - os: linux\n\u002B      dist: trusty\n\u002B      sudo: required\n\u002B      dotnet: 2.0.0\n\u002B      group: edge\n script:\n-  - ./build.sh\n\\ No newline at end of file\n\u002B  - ./build.sh"
    },
    {
      "sha": "ee4117d648f6e200fd9de2dee1040dac8cf4217e",
      "filename": "Build.ps1",
      "status": "modified",
      "additions": 25,
      "deletions": 6,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/Build.ps1",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/Build.ps1",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/Build.ps1?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,27 \u002B1,46 @@\n\u002Becho \u0022build: Build started\u0022\n\u002B\n Push-Location $PSScriptRoot\n \n-if(Test-Path .\\artifacts) { Remove-Item .\\artifacts -Force -Recurse }\n\u002Bif(Test-Path .\\artifacts) {\n\u002B\techo \u0022build: Cleaning .\\artifacts\u0022\n\u002B\tRemove-Item .\\artifacts -Force -Recurse\n\u002B}\n \n \u0026 dotnet restore --no-cache\n \n $branch = @{ $true = $env:APPVEYOR_REPO_BRANCH; $false = $(git symbolic-ref --short -q HEAD) }[$env:APPVEYOR_REPO_BRANCH -ne $NULL];\n $revision = @{ $true = \u0022{0:00000}\u0022 -f [convert]::ToInt32(\u00220\u0022 \u002B $env:APPVEYOR_BUILD_NUMBER, 10); $false = \u0022local\u0022 }[$env:APPVEYOR_BUILD_NUMBER -ne $NULL];\n-$suffix = @{ $true = \u0022\u0022; $false = \u0022$branch-$revision\u0022}[$branch -eq \u0022master\u0022 -and $revision -ne \u0022local\u0022]\n\u002B$suffix = @{ $true = \u0022\u0022; $false = \u0022$($branch.Substring(0, [math]::Min(10,$branch.Length)))-$revision\u0022}[$branch -eq \u0022master\u0022 -and $revision -ne \u0022local\u0022]\n\u002B$commitHash = $(git rev-parse --short HEAD)\n\u002B$buildSuffix = @{ $true = \u0022$($suffix)-$($commitHash)\u0022; $false = \u0022$($branch)-$($commitHash)\u0022 }[$suffix -ne \u0022\u0022]\n\u002B\n\u002Becho \u0022build: Package version suffix is $suffix\u0022\n\u002Becho \u0022build: Build version suffix is $buildSuffix\u0022 \n \n-foreach ($src in ls src/Serilog.*) {\n\u002Bforeach ($src in ls src/*) {\n     Push-Location $src\n \n-    \u0026 dotnet pack -c Release -o ..\\..\\.\\artifacts --version-suffix=$suffix\n\u002B\techo \u0022build: Packaging project in $src\u0022\n\u002B\n\u002B    \u0026 dotnet build -c Release --version-suffix=$buildSuffix\n\u002B    if ($suffix) {\n\u002B        \u0026 dotnet pack -c Release --include-source -o ..\\..\\artifacts --version-suffix=$suffix --no-build\n\u002B    } else {\n\u002B        \u0026 dotnet pack -c Release --include-source -o ..\\..\\artifacts --no-build\n\u002B    }\n     if($LASTEXITCODE -ne 0) { exit 1 }    \n \n     Pop-Location\n }\n \n-foreach ($test in ls test/Serilog.*.Tests) {\n\u002Bforeach ($test in ls test/*.Tests) {\n     Push-Location $test\n \n\u002B\techo \u0022build: Testing project in $test\u0022\n\u002B\n     \u0026 dotnet test -c Release\n-    if($LASTEXITCODE -ne 0) { exit 2 }\n\u002B    if($LASTEXITCODE -ne 0) { exit 3 }\n \n     Pop-Location\n }"
    },
    {
      "sha": "87596a7f1e210f3266de8916306fd3781de7d389",
      "filename": "README.md",
      "status": "modified",
      "additions": 155,
      "deletions": 14,
      "changes": 169,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/README.md",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/README.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/README.md?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,53 \u002B1,194 @@\n # Serilog.Sinks.File [![Build status](https://ci.appveyor.com/api/projects/status/hh9gymy0n6tne46j?svg=true)](https://ci.appveyor.com/project/serilog/serilog-sinks-file) [![Travis build](https://travis-ci.org/serilog/serilog-sinks-file.svg)](https://travis-ci.org/serilog/serilog-sinks-file) [![NuGet Version](http://img.shields.io/nuget/v/Serilog.Sinks.File.svg?style=flat)](https://www.nuget.org/packages/Serilog.Sinks.File/) [![Documentation](https://img.shields.io/badge/docs-wiki-yellow.svg)](https://github.com/serilog/serilog/wiki) [![Join the chat at https://gitter.im/serilog/serilog](https://img.shields.io/gitter/room/serilog/serilog.svg)](https://gitter.im/serilog/serilog)\n \n-Writes [Serilog](https://serilog.net) events to a text file.\n\u002BWrites [Serilog](https://serilog.net) events to one or more text files.\n\u002B\n\u002B### Getting started\n\u002B\n\u002BInstall the [Serilog.Sinks.File](https://nuget.org/serilog/serilog-sinks-file) package from NuGet:\n\u002B\n\u002B\u0060\u0060\u0060powershell\n\u002BInstall-Package Serilog.Sinks.File\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BTo configure the sink in C# code, call \u0060WriteTo.File()\u0060 during logger configuration:\n \n \u0060\u0060\u0060csharp\n var log = new LoggerConfiguration()\n-    .WriteTo.File(\u0022log.txt\u0022)\n\u002B    .WriteTo.File(\u0022log.txt\u0022, rollingInterval: RollingInterval.Day)\n     .CreateLogger();\n \u0060\u0060\u0060\n \n\u002BThis will append the time period to the filename, creating a file set like:\n\u002B\n\u002B\u0060\u0060\u0060\n\u002Blog20180631.txt\n\u002Blog20180701.txt\n\u002Blog20180702.txt\n\u002B\u0060\u0060\u0060\n\u002B\n\u002B\u003E **Important**: By default, only one process may write to a log file at a given time. See _Shared log files_ below for information on multi-process sharing.\n\u002B\n\u002B### Limits\n\u002B\n To avoid bringing down apps with runaway disk usage the file sink **limits file size to 1GB by default**. The limit can be increased or removed using the \u0060fileSizeLimitBytes\u0060 parameter.\n \n \u0060\u0060\u0060csharp\n     .WriteTo.File(\u0022log.txt\u0022, fileSizeLimitBytes: null)\n \u0060\u0060\u0060\n \n-\u003E **Important:** By default only one process may use a log file at a given time. See _Shared log files_ below if multi-process logging is required. \n\u002BFor the same reason, only **the most recent 31 files** are retained by default (i.e. one long month). To change or remove this limit, pass the \u0060retainedFileCountLimit\u0060 parameter.\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002B    .WriteTo.RollingFile(\u0022log.txt\u0022, rollingInterval: RollingInterval.Day, retainedFileCountLimit: null)\n\u002B\u0060\u0060\u0060\n\u002B\n\u002B### Rolling policies\n\u002B\n\u002BTo create a log file per day or other time period, specify a \u0060rollingInterval\u0060 as shown in the examples above.\n\u002B\n\u002BTo roll when the file reaches \u0060fileSizeLimitBytes\u0060, specify \u0060rollOnFileSizeLimit\u0060:\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002B    .WriteTo.File(\u0022log.txt\u0022, rollOnFileSizeLimit: true)\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BThis will create a file set like:\n\u002B\n\u002B\u0060\u0060\u0060\n\u002Blog.txt\n\u002Blog_001.txt\n\u002Blog_002.txt\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BSpecifying both \u0060rollingInterval\u0060 and \u0060rollOnFileSizeLimit\u0060 will cause both policies to be applied, while specifying neither will result in all events being written to a single file.\n\u002B\n\u002BOld files will be cleaned up as per \u0060retainedFileCountLimit\u0060 - the default is 31.\n\u002B\n\u002B### XML \u0060\u003CappSettings\u003E\u0060 configuration\n\u002B\n\u002BTo use the file sink with the [Serilog.Settings.AppSettings](https://github.com/serilog/serilog-settings-appsettings) package, first install that package if you haven\u0027t already done so:\n\u002B\n\u002B\u0060\u0060\u0060powershell\n\u002BInstall-Package Serilog.Settings.AppSettings\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BInstead of configuring the logger in code, call \u0060ReadFrom.AppSettings()\u0060:\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002Bvar log = new LoggerConfiguration()\n\u002B    .ReadFrom.AppSettings()\n\u002B    .CreateLogger();\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BIn your application\u0027s \u0060App.config\u0060 or \u0060Web.config\u0060 file, specify the file sink assembly and required path format under the \u0060\u003CappSettings\u003E\u0060 node:\n\u002B\n\u002B\u0060\u0060\u0060xml\n\u002B\u003Cconfiguration\u003E\n\u002B  \u003CappSettings\u003E\n\u002B    \u003Cadd key=\u0022serilog:using:File\u0022 value=\u0022Serilog.Sinks.File\u0022 /\u003E\n\u002B    \u003Cadd key=\u0022serilog:write-to:File.pathFormat\u0022 value=\u0022log.txt\u0022 /\u003E\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BThe parameters that can be set through the \u0060serilog:write-to:File\u0060 keys are the method parameters accepted by the \u0060WriteTo.File()\u0060 configuration method. This means, for example, that the \u0060fileSizeLimitBytes\u0060 parameter can be set with:\n\u002B\n\u002B\u0060\u0060\u0060xml\n\u002B    \u003Cadd key=\u0022serilog:write-to:File.fileSizeLimitBytes\u0022 value=\u00221234567\u0022 /\u003E\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BOmitting the \u0060value\u0060 will set the parameter to \u0060null\u0060:\n \n-### \u0060\u003CappSettings\u003E\u0060 configuration\n\u002B\u0060\u0060\u0060xml\n\u002B    \u003Cadd key=\u0022serilog:write-to:File.fileSizeLimitBytes\u0022 /\u003E\n\u002B\u0060\u0060\u0060\n \n-The sink can be configured in XML [app-settings format](https://github.com/serilog/serilog/wiki/AppSettings) if the _Serilog.Settings.AppSettings_ package is in use:\n\u002BIn XML and JSON configuration formats, environment variables can be used in setting values. This means, for instance, that the log file path can be based on \u0060TMP\u0060 or \u0060APPDATA\u0060:\n \n \u0060\u0060\u0060xml\n-\u003Cadd key=\u0022serilog:using:File\u0022 value=\u0022Serilog.Sinks.File\u0022 /\u003E\n-\u003Cadd key=\u0022serilog:write-to:File.path\u0022 value=\u0022log.txt\u0022 /\u003E\n-\u003Cadd key=\u0022serilog:write-to:File.fileSizeLimitBytes\u0022 value=\u0022\u0022 /\u003E\n\u002B    \u003Cadd key=\u0022serilog:write-to:File.path\u0022 value=\u0022%APPDATA%\\MyApp\\log.txt\u0022 /\u003E\n\u002B\u0060\u0060\u0060\n\u002B\n\u002B### JSON \u0060appsettings.json\u0060 configuration\n\u002B\n\u002BTo use the file sink with _Microsoft.Extensions.Configuration_, for example with ASP.NET Core or .NET Core, use the [Serilog.Settings.Configuration](https://github.com/serilog/serilog-settings-configuration) package. First install that package if you have not already done so:\n\u002B\n\u002B\u0060\u0060\u0060powershell\n\u002BInstall-Package Serilog.Settings.Configuration\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BInstead of configuring the file directly in code, call \u0060ReadFrom.Configuration()\u0060:\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002Bvar configuration = new ConfigurationBuilder()\n\u002B    .AddJsonFile(\u0022appsettings.json\u0022)\n\u002B    .Build();\n\u002B\n\u002Bvar logger = new LoggerConfiguration()\n\u002B    .ReadFrom.Configuration(configuration)\n\u002B    .CreateLogger();\n \u0060\u0060\u0060\n \n-### JSON formatting\n\u002BIn your \u0060appsettings.json\u0060 file, under the \u0060Serilog\u0060 node, :\n \n-To emit JSON, rather than plain text, a formatter can be specified:\n\u002B\u0060\u0060\u0060json\n\u002B{\n\u002B  \u0022Serilog\u0022: {\n\u002B    \u0022WriteTo\u0022: [\n\u002B      { \u0022Name\u0022: \u0022File\u0022, \u0022Args\u0022: { \u0022path\u0022: \u0022log.txt\u0022, \u0022rollingInterval\u0022: \u0022Day\u0022 } }\n\u002B    ]\n\u002B  }\n\u002B}\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BSee the XML \u0060\u003CappSettings\u003E\u0060 example above for a discussion of available \u0060Args\u0060 options.\n\u002B\n\u002B### Controlling event formatting\n\u002B\n\u002BThe file sink creates events in a fixed text format by default:\n\u002B\n\u002B\u0060\u0060\u0060\n\u002B2018-07-06 09:02:17.148 \u002B10:00 [INF] HTTP GET / responded 200 in 1994 ms\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BThe format is controlled using an _output template_, which the file configuration method accepts as an \u0060outputTemplate\u0060 parameter.\n\u002B\n\u002BThe default format above corresponds to an output template like:\n \n \u0060\u0060\u0060csharp\n-    .WriteTo.File(new JsonFormatter(), \u0022log.txt\u0022)\n\u002B    .WriteTo.File(\u0022log.txt\u0022,\n\u002B        outputTemplate: \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{u3}] {Message:lj}{NewLine}{Exception}\u0022)\n \u0060\u0060\u0060\n \n-To configure an alternative formatter in XML \u0060\u003CappSettings\u003E\u0060, specify the formatter\u0027s assembly-qualified type name as the setting \u0060value\u0060.\n\u002B##### JSON event formatting\n\u002B\n\u002BTo write events to the file in an alternative format such as [JSON](https://github.com/serilog/serilog-formatting-compact), pass an \u0060ITextFormatter\u0060 as the first argument:\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002B    // Install-Package Serilog.Formatting.Compact\n\u002B    .WriteTo.File(new CompactJsonFormatter(), \u0022log.txt\u0022)\n\u002B\u0060\u0060\u0060\n \n ### Shared log files\n \n-Multiple processes can concurrently write to the same log file if the \u0060shared\u0060 parameter is set to \u0060true\u0060:\n\u002BTo enable multi-process shared log files, set \u0060shared\u0060 to \u0060true\u0060:\n \n \u0060\u0060\u0060csharp\n     .WriteTo.File(\u0022log.txt\u0022, shared: true)\n \u0060\u0060\u0060\n \n\u002B### Auditing\n\u002B\n\u002BThe file sink can operate as an audit file through \u0060AuditTo\u0060:\n\u002B\n\u002B\u0060\u0060\u0060csharp\n\u002B    .AuditTo.File(\u0022audit.txt\u0022)\n\u002B\u0060\u0060\u0060\n\u002B\n\u002BOnly a limited subset of configuration options are currently available in this mode.\n\u002B\n ### Performance\n \n By default, the file sink will flush each event written through it to disk. To improve write performance, specifying \u0060buffered: true\u0060 will permit the underlying stream to buffer writes.\n \n-The [Serilog.Sinks.Async](https://github.com/serilog/serilog-sinks-async) package can be used to wrap the file sink and perform all disk accss on a background worker thread.\n\u002BThe [Serilog.Sinks.Async](https://github.com/serilog/serilog-sinks-async) package can be used to wrap the file sink and perform all disk access on a background worker thread.\n \n _Copyright \u0026copy; 2016 Serilog Contributors - Provided under the [Apache License, Version 2.0](http://apache.org/licenses/LICENSE-2.0.html)._"
    },
    {
      "sha": "7e5f9b5ee0b8bbce73a62bc3a954c3b17973459f",
      "filename": "appveyor.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/appveyor.yml",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/appveyor.yml",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/appveyor.yml?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,13 \u002B1,9 @@\n version: \u0027{build}\u0027\n skip_tags: true\n-image: Visual Studio 2015\n\u002Bimage: Visual Studio 2017\n configuration: Release\n install:\n   - ps: mkdir -Force \u0022.\\build\\\u0022 | Out-Null\n-  - ps: Invoke-WebRequest \u0022https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.ps1\u0022 -OutFile \u0022.\\build\\installcli.ps1\u0022\n-  - ps: $env:DOTNET_INSTALL_DIR = \u0022$pwd\\.dotnetcli\u0022\n-  - ps: \u0027\u0026 .\\build\\installcli.ps1 -InstallDir \u0022$env:DOTNET_INSTALL_DIR\u0022 -NoPath -Version 1.0.0-preview2-003121\u0027\n-  - ps: $env:Path = \u0022$env:DOTNET_INSTALL_DIR;$env:Path\u0022\n build_script:\n - ps: ./Build.ps1\n test: off"
    },
    {
      "sha": "4e46f40c7061d287f8edd130c7352719dd5088e3",
      "filename": "build.sh",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/build.sh",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/build.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/build.sh?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,12 \u002B1,11 @@\n #!/bin/bash\n-dotnet restore --no-cache\n-for path in src/*/project.json; do\n-    dirname=\u0022$(dirname \u0022${path}\u0022)\u0022\n-    dotnet build ${dirname} -f netstandard1.3 -c Release\n\u002Bdotnet --info\n\u002Bdotnet restore\n\u002B\n\u002Bfor path in src/**/*.csproj; do\n\u002B    dotnet build -f netstandard1.3 -c Release ${path}\n done\n \n-for path in test/*.Tests/project.json; do\n-    dirname=\u0022$(dirname \u0022${path}\u0022)\u0022\n-    dotnet build ${dirname} -f netcoreapp1.0 -c Release\n-    dotnet test ${dirname} -f netcoreapp1.0  -c Release\n\u002Bfor path in test/*.Tests/*.csproj; do\n\u002B    dotnet test -f netcoreapp2.0  -c Release ${path}\n done"
    },
    {
      "sha": "ec04f9572090e31bbbb01065f005e970b354dc50",
      "filename": "example/Sample/Sample.csproj",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/example/Sample/Sample.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/example/Sample/Sample.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/Sample.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,24 @@\n\u002B\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\u002B\n\u002B  \u003CPropertyGroup\u003E\n\u002B    \u003CTargetFrameworks\u003Enetcoreapp2.0;net47\u003C/TargetFrameworks\u003E\n\u002B    \u003CAssemblyName\u003ESample\u003C/AssemblyName\u003E\n\u002B    \u003COutputType\u003EExe\u003C/OutputType\u003E\n\u002B    \u003CPackageId\u003ESample\u003C/PackageId\u003E\n\u002B    \u003CAutoGenerateBindingRedirects\u003Etrue\u003C/AutoGenerateBindingRedirects\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n\u002B  \u003CItemGroup\u003E\n\u002B    \u003CProjectReference Include=\u0022..\\..\\src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027net47\u0027 \u0022\u003E\n\u002B    \u003CReference Include=\u0022System\u0022 /\u003E\n\u002B    \u003CReference Include=\u0022Microsoft.CSharp\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netcoreapp2.0\u0027 \u0022\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B\u003C/Project\u003E\n\u002B"
    },
    {
      "sha": "000aa0632773351fc6ddcdefbb4b9e9258f9820b",
      "filename": "example/Sample/Sample.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/Sample.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/Sample.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/Sample.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,21 \u002B0,0 @@\n-\uFEFF\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u003E\n-\u003CProject ToolsVersion=\u002214.0\u0022 DefaultTargets=\u0022Build\u0022 xmlns=\u0022http://schemas.microsoft.com/developer/msbuild/2003\u0022\u003E\n-  \u003CPropertyGroup\u003E\n-    \u003CVisualStudioVersion Condition=\u0022\u0027$(VisualStudioVersion)\u0027 == \u0027\u0027\u0022\u003E14.0\u003C/VisualStudioVersion\u003E\n-    \u003CVSToolsPath Condition=\u0022\u0027$(VSToolsPath)\u0027 == \u0027\u0027\u0022\u003E$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\u003C/VSToolsPath\u003E\n-  \u003C/PropertyGroup\u003E\n-\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DotNet\\Microsoft.DotNet.Props\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-  \u003CPropertyGroup Label=\u0022Globals\u0022\u003E\n-    \u003CProjectGuid\u003Ea34235a2-a717-4a1c-bf5c-f4a9e06e1260\u003C/ProjectGuid\u003E\n-    \u003CRootNamespace\u003ESample\u003C/RootNamespace\u003E\n-    \u003CBaseIntermediateOutputPath Condition=\u0022\u0027$(BaseIntermediateOutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\obj\u003C/BaseIntermediateOutputPath\u003E\n-    \u003COutputPath Condition=\u0022\u0027$(OutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\bin\\\u003C/OutputPath\u003E\n-    \u003CTargetFrameworkVersion\u003Ev4.5.2\u003C/TargetFrameworkVersion\u003E\n-  \u003C/PropertyGroup\u003E\n-\n-  \u003CPropertyGroup\u003E\n-    \u003CSchemaVersion\u003E2.0\u003C/SchemaVersion\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-\u003C/Project\u003E"
    },
    {
      "sha": "525d510d13c74dc1c03ecc155a16f5bde5253883",
      "filename": "example/Sample/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,23 \u002B0,0 @@\n-\uFEFF{\n-  \u0022buildOptions\u0022: {\n-    \u0022emitEntryPoint\u0022: true\n-  },\n-\n-  \u0022dependencies\u0022: {\n-    \u0022Serilog.Sinks.File\u0022: { \u0022target\u0022: \u0022project\u0022 }\n-  },\n-\n-  \u0022frameworks\u0022: {\n-    \u0022netcoreapp1.0\u0022: {\n-      \u0022imports\u0022: \u0022dnxcore50\u0022,\n-      \u0022dependencies\u0022: {\n-        \u0022Microsoft.NETCore.App\u0022: {\n-          \u0022type\u0022: \u0022platform\u0022,\n-          \u0022version\u0022: \u00221.0.0\u0022\n-        }\n-      }\n-    },\n-    \u0022net4.5\u0022: {}\n-  },\n-  \u0022runtimes\u0022: { \u0022win10-x64\u0022: {} }\n-}"
    },
    {
      "sha": "a2b2a41526b183bb30e38b64c6ea9705c542bde8",
      "filename": "global.json",
      "status": "removed",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/global.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/global.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/global.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,6 \u002B0,0 @@\n-{\n-  \u0022projects\u0022: [ \u0022src\u0022, \u0022test\u0022 ],\n-  \u0022sdk\u0022: {\n-    \u0022version\u0022: \u00221.0.0-preview2-003121\u0022\n-  }\n-}"
    },
    {
      "sha": "71527e43e99c16562f18e747c883bb2c562dcf78",
      "filename": "serilog-sinks-file.sln",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/serilog-sinks-file.sln",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/serilog-sinks-file.sln",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/serilog-sinks-file.sln?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,7 \u002B1,7 @@\n \uFEFF\n Microsoft Visual Studio Solution File, Format Version 12.00\n-# Visual Studio 14\n-VisualStudioVersion = 14.0.25420.1\n\u002B# Visual Studio 15\n\u002BVisualStudioVersion = 15.0.26730.15\n MinimumVisualStudioVersion = 10.0.40219.1\n Project(\u0022{2150E333-8FDC-42A3-9474-1A3956D46DE8}\u0022) = \u0022src\u0022, \u0022src\u0022, \u0022{037440DE-440B-4129-9F7A-09B42D00397E}\u0022\n EndProject\n@@ -12,21 \u002B12,20 @@ Project(\u0022{2150E333-8FDC-42A3-9474-1A3956D46DE8}\u0022) = \u0022assets\u0022, \u0022assets\u0022, \u0022{E9D1B5\n \t\tappveyor.yml = appveyor.yml\n \t\tBuild.ps1 = Build.ps1\n \t\tbuild.sh = build.sh\n-\t\tglobal.json = global.json\n \t\tNuGet.Config = NuGet.Config\n \t\tREADME.md = README.md\n \t\tassets\\Serilog.snk = assets\\Serilog.snk\n \tEndProjectSection\n EndProject\n-Project(\u0022{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\u0022) = \u0022Serilog.Sinks.File\u0022, \u0022src\\Serilog.Sinks.File\\Serilog.Sinks.File.xproj\u0022, \u0022{57E0ED0E-0F45-48AB-A73D-6A92B7C32095}\u0022\n-EndProject\n Project(\u0022{2150E333-8FDC-42A3-9474-1A3956D46DE8}\u0022) = \u0022test\u0022, \u0022test\u0022, \u0022{7B927378-9F16-4F6F-B3F6-156395136646}\u0022\n EndProject\n-Project(\u0022{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\u0022) = \u0022Serilog.Sinks.File.Tests\u0022, \u0022test\\Serilog.Sinks.File.Tests\\Serilog.Sinks.File.Tests.xproj\u0022, \u0022{3C2D8E01-5580-426A-BDD9-EC59CD98E618}\u0022\n-EndProject\n Project(\u0022{2150E333-8FDC-42A3-9474-1A3956D46DE8}\u0022) = \u0022example\u0022, \u0022example\u0022, \u0022{196B1544-C617-4D7C-96D1-628713BDD52A}\u0022\n EndProject\n-Project(\u0022{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\u0022) = \u0022Sample\u0022, \u0022example\\Sample\\Sample.xproj\u0022, \u0022{A34235A2-A717-4A1C-BF5C-F4A9E06E1260}\u0022\n\u002BProject(\u0022{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\u0022) = \u0022Serilog.Sinks.File\u0022, \u0022src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\u0022, \u0022{57E0ED0E-0F45-48AB-A73D-6A92B7C32095}\u0022\n\u002BEndProject\n\u002BProject(\u0022{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\u0022) = \u0022Serilog.Sinks.File.Tests\u0022, \u0022test\\Serilog.Sinks.File.Tests\\Serilog.Sinks.File.Tests.csproj\u0022, \u0022{3C2D8E01-5580-426A-BDD9-EC59CD98E618}\u0022\n\u002BEndProject\n\u002BProject(\u0022{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\u0022) = \u0022Sample\u0022, \u0022example\\Sample\\Sample.csproj\u0022, \u0022{A34235A2-A717-4A1C-BF5C-F4A9E06E1260}\u0022\n EndProject\n Global\n \tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n@@ -55,4 \u002B54,7 @@ Global\n \t\t{3C2D8E01-5580-426A-BDD9-EC59CD98E618} = {7B927378-9F16-4F6F-B3F6-156395136646}\n \t\t{A34235A2-A717-4A1C-BF5C-F4A9E06E1260} = {196B1544-C617-4D7C-96D1-628713BDD52A}\n \tEndGlobalSection\n\u002B\tGlobalSection(ExtensibilityGlobals) = postSolution\n\u002B\t\tSolutionGuid = {EA0197B4-FCA8-4DF2-BF34-274FA41333D1}\n\u002B\tEndGlobalSection\n EndGlobal"
    },
    {
      "sha": "5cb19e924cf3a0594ec95425f838befd79674c7f",
      "filename": "src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "status": "modified",
      "additions": 157,
      "deletions": 34,
      "changes": 191,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,4 \u002B1,4 @@\n-\uFEFF// Copyright 2013-2016 Serilog Contributors\n\u002B\uFEFF// Copyright 2013-2017 Serilog Contributors\n //\n // Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n // you may not use this file except in compliance with the License.\n@@ -13,6 \u002B13,8 @@\n // limitations under the License.\n \n using System;\n\u002Busing System.ComponentModel;\n\u002Busing System.Text;\n using Serilog.Configuration;\n using Serilog.Core;\n using Serilog.Debugging;\n@@ -22,13 \u002B24,96 @@\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File;\n \n\u002B// ReSharper disable MethodOverloadWithOptionalParameter\n\u002B\n namespace Serilog\n {\n     /// \u003Csummary\u003EExtends \u003Csee cref=\u0022LoggerConfiguration\u0022/\u003E with methods to add file sinks.\u003C/summary\u003E\n     public static class FileLoggerConfigurationExtensions\n     {\n\u002B        const int DefaultRetainedFileCountLimit = 31; // A long month of logs\n         const long DefaultFileSizeLimitBytes = 1L * 1024 * 1024 * 1024;\n-        const string DefaultOutputTemplate = \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}\u0022;\n\u002B        const string DefaultOutputTemplate = \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\u0022;\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Write log events to the specified file.\n\u002B        /// \u003C/summary\u003E\n\u002B        /// \u003Cparam name=\u0022sinkConfiguration\u0022\u003ELogger sink configuration.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022path\u0022\u003EPath to the file.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022restrictedToMinimumLevel\u0022\u003EThe minimum level for\n\u002B        /// events passed through the sink. Ignored when \u003Cparamref name=\u0022levelSwitch\u0022/\u003E is specified.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022levelSwitch\u0022\u003EA switch allowing the pass-through minimum level\n\u002B        /// to be changed at runtime.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022formatProvider\u0022\u003ESupplies culture-specific formatting information, or null.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022outputTemplate\u0022\u003EA message template describing the format used to write to the sink.\n\u002B        /// the default is \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\u0022.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022fileSizeLimitBytes\u0022\u003EThe approximate maximum size, in bytes, to which a log file will be allowed to grow.\n\u002B        /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n\u002B        /// will be written in full even if it exceeds the limit.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022buffered\u0022\u003EIndicates if flushing to the output file can be buffered or not. The default\n\u002B        /// is false.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022shared\u0022\u003EAllow the log file to be shared by multiple processes. The default is false.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022flushToDiskInterval\u0022\u003EIf provided, a full disk flush will be performed periodically at the specified interval.\u003C/param\u003E\n\u002B        /// \u003Creturns\u003EConfiguration object allowing method chaining.\u003C/returns\u003E\n\u002B        /// \u003Cremarks\u003EThe file will be written using the UTF-8 character set.\u003C/remarks\u003E\n\u002B        [Obsolete(\u0022New code should not be compiled against this obsolete overload\u0022), EditorBrowsable(EditorBrowsableState.Never)]\n\u002B        public static LoggerConfiguration File(\n\u002B            this LoggerSinkConfiguration sinkConfiguration,\n\u002B            string path,\n\u002B            LogEventLevel restrictedToMinimumLevel,\n\u002B            string outputTemplate,\n\u002B            IFormatProvider formatProvider,\n\u002B            long? fileSizeLimitBytes,\n\u002B            LoggingLevelSwitch levelSwitch,\n\u002B            bool buffered,\n\u002B            bool shared,\n\u002B            TimeSpan? flushToDiskInterval)\n\u002B        {\n\u002B            // ReSharper disable once RedundantArgumentDefaultValue\n\u002B            return File(sinkConfiguration, path, restrictedToMinimumLevel, outputTemplate, formatProvider, fileSizeLimitBytes,\n\u002B                levelSwitch, buffered, shared, flushToDiskInterval, RollingInterval.Infinite, false,\n\u002B                null, null);\n\u002B        }\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Write log events to the specified file.\n\u002B        /// \u003C/summary\u003E\n\u002B        /// \u003Cparam name=\u0022sinkConfiguration\u0022\u003ELogger sink configuration.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022formatter\u0022\u003EA formatter, such as \u003Csee cref=\u0022JsonFormatter\u0022/\u003E, to convert the log events into\n\u002B        /// text for the file. If control of regular text formatting is required, use the other\n\u002B        /// overload of \u003Csee cref=\u0022File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?)\u0022/\u003E\n\u002B        /// and specify the outputTemplate parameter instead.\n\u002B        /// \u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022path\u0022\u003EPath to the file.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022restrictedToMinimumLevel\u0022\u003EThe minimum level for\n\u002B        /// events passed through the sink. Ignored when \u003Cparamref name=\u0022levelSwitch\u0022/\u003E is specified.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022levelSwitch\u0022\u003EA switch allowing the pass-through minimum level\n\u002B        /// to be changed at runtime.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022fileSizeLimitBytes\u0022\u003EThe approximate maximum size, in bytes, to which a log file will be allowed to grow.\n\u002B        /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n\u002B        /// will be written in full even if it exceeds the limit.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022buffered\u0022\u003EIndicates if flushing to the output file can be buffered or not. The default\n\u002B        /// is false.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022shared\u0022\u003EAllow the log file to be shared by multiple processes. The default is false.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022flushToDiskInterval\u0022\u003EIf provided, a full disk flush will be performed periodically at the specified interval.\u003C/param\u003E\n\u002B        /// \u003Creturns\u003EConfiguration object allowing method chaining.\u003C/returns\u003E\n\u002B        /// \u003Cremarks\u003EThe file will be written using the UTF-8 character set.\u003C/remarks\u003E\n\u002B        [Obsolete(\u0022New code should not be compiled against this obsolete overload\u0022), EditorBrowsable(EditorBrowsableState.Never)]\n\u002B        public static LoggerConfiguration File(\n\u002B            this LoggerSinkConfiguration sinkConfiguration,\n\u002B            ITextFormatter formatter,\n\u002B            string path,\n\u002B            LogEventLevel restrictedToMinimumLevel,\n\u002B            long? fileSizeLimitBytes,\n\u002B            LoggingLevelSwitch levelSwitch,\n\u002B            bool buffered,\n\u002B            bool shared,\n\u002B            TimeSpan? flushToDiskInterval)\n\u002B        {\n\u002B            // ReSharper disable once RedundantArgumentDefaultValue\n\u002B            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch,\n\u002B                buffered, shared, flushToDiskInterval, RollingInterval.Infinite, false, null, null);\n\u002B        }\n \n         /// \u003Csummary\u003E\n         /// Write log events to the specified file.\n@@ -41,14 \u002B126,20 @@ public static class FileLoggerConfigurationExtensions\n         /// to be changed at runtime.\u003C/param\u003E\n         /// \u003Cparam name=\u0022formatProvider\u0022\u003ESupplies culture-specific formatting information, or null.\u003C/param\u003E\n         /// \u003Cparam name=\u0022outputTemplate\u0022\u003EA message template describing the format used to write to the sink.\n-        /// the default is \u0022{Timestamp} [{Level}] {Message}{NewLine}{Exception}\u0022.\u003C/param\u003E\n\u002B        /// the default is \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\u0022.\u003C/param\u003E\n         /// \u003Cparam name=\u0022fileSizeLimitBytes\u0022\u003EThe approximate maximum size, in bytes, to which a log file will be allowed to grow.\n         /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n         /// will be written in full even if it exceeds the limit.\u003C/param\u003E\n         /// \u003Cparam name=\u0022buffered\u0022\u003EIndicates if flushing to the output file can be buffered or not. The default\n         /// is false.\u003C/param\u003E\n         /// \u003Cparam name=\u0022shared\u0022\u003EAllow the log file to be shared by multiple processes. The default is false.\u003C/param\u003E\n         /// \u003Cparam name=\u0022flushToDiskInterval\u0022\u003EIf provided, a full disk flush will be performed periodically at the specified interval.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022rollingInterval\u0022\u003EThe interval at which logging will roll over to a new file.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022rollOnFileSizeLimit\u0022\u003EIf \u003Ccode\u003Etrue\u003C/code\u003E, a new file will be created when the file size limit is reached. Filenames \n\u002B        /// will have a number appended in the format \u003Ccode\u003E_NNN\u003C/code\u003E, with the first filename given no number.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022retainedFileCountLimit\u0022\u003EThe maximum number of log files that will be retained,\n\u002B        /// including the current log file. For unlimited retention, pass null. The default is 31.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022encoding\u0022\u003ECharacter encoding used to write the text file. The default is UTF-8 without BOM.\u003C/param\u003E\n         /// \u003Creturns\u003EConfiguration object allowing method chaining.\u003C/returns\u003E\n         /// \u003Cremarks\u003EThe file will be written using the UTF-8 character set.\u003C/remarks\u003E\n         public static LoggerConfiguration File(\n@@ -61,14 \u002B152,20 @@ public static class FileLoggerConfigurationExtensions\n             LoggingLevelSwitch levelSwitch = null,\n             bool buffered = false,\n             bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n\u002B            TimeSpan? flushToDiskInterval = null,\n\u002B            RollingInterval rollingInterval = RollingInterval.Infinite,\n\u002B            bool rollOnFileSizeLimit = false,\n\u002B            int? retainedFileCountLimit = DefaultRetainedFileCountLimit,\n\u002B            Encoding encoding = null)\n         {\n             if (sinkConfiguration == null) throw new ArgumentNullException(nameof(sinkConfiguration));\n             if (path == null) throw new ArgumentNullException(nameof(path));\n             if (outputTemplate == null) throw new ArgumentNullException(nameof(outputTemplate));\n \n             var formatter = new MessageTemplateTextFormatter(outputTemplate, formatProvider);\n-            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch, buffered: buffered, shared: shared, flushToDiskInterval: flushToDiskInterval);\n\u002B            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes,\n\u002B                levelSwitch, buffered, shared, flushToDiskInterval,\n\u002B                rollingInterval, rollOnFileSizeLimit, retainedFileCountLimit, encoding);\n         }\n \n         /// \u003Csummary\u003E\n@@ -77,7 \u002B174,7 @@ public static class FileLoggerConfigurationExtensions\n         /// \u003Cparam name=\u0022sinkConfiguration\u0022\u003ELogger sink configuration.\u003C/param\u003E\n         /// \u003Cparam name=\u0022formatter\u0022\u003EA formatter, such as \u003Csee cref=\u0022JsonFormatter\u0022/\u003E, to convert the log events into\n         /// text for the file. If control of regular text formatting is required, use the other\n-        /// overload of \u003Csee cref=\u0022File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?)\u0022/\u003E\n\u002B        /// overload of \u003Csee cref=\u0022File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?, RollingInterval, bool, int?, Encoding)\u0022/\u003E\n         /// and specify the outputTemplate parameter instead.\n         /// \u003C/param\u003E\n         /// \u003Cparam name=\u0022path\u0022\u003EPath to the file.\u003C/param\u003E\n@@ -92,6 \u002B189,12 @@ public static class FileLoggerConfigurationExtensions\n         /// is false.\u003C/param\u003E\n         /// \u003Cparam name=\u0022shared\u0022\u003EAllow the log file to be shared by multiple processes. The default is false.\u003C/param\u003E\n         /// \u003Cparam name=\u0022flushToDiskInterval\u0022\u003EIf provided, a full disk flush will be performed periodically at the specified interval.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022rollingInterval\u0022\u003EThe interval at which logging will roll over to a new file.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022rollOnFileSizeLimit\u0022\u003EIf \u003Ccode\u003Etrue\u003C/code\u003E, a new file will be created when the file size limit is reached. Filenames \n\u002B        /// will have a number appended in the format \u003Ccode\u003E_NNN\u003C/code\u003E, with the first filename given no number.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022retainedFileCountLimit\u0022\u003EThe maximum number of log files that will be retained,\n\u002B        /// including the current log file. For unlimited retention, pass null. The default is 31.\u003C/param\u003E\n\u002B        /// \u003Cparam name=\u0022encoding\u0022\u003ECharacter encoding used to write the text file. The default is UTF-8 without BOM.\u003C/param\u003E\n         /// \u003Creturns\u003EConfiguration object allowing method chaining.\u003C/returns\u003E\n         /// \u003Cremarks\u003EThe file will be written using the UTF-8 character set.\u003C/remarks\u003E\n         public static LoggerConfiguration File(\n@@ -103,9 \u002B206,14 @@ public static class FileLoggerConfigurationExtensions\n             LoggingLevelSwitch levelSwitch = null,\n             bool buffered = false,\n             bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n\u002B            TimeSpan? flushToDiskInterval = null,\n\u002B            RollingInterval rollingInterval = RollingInterval.Infinite,\n\u002B            bool rollOnFileSizeLimit = false,\n\u002B            int? retainedFileCountLimit = DefaultRetainedFileCountLimit,\n\u002B            Encoding encoding = null)\n         {\n-            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch, buffered: buffered, shared: shared, flushToDiskInterval: flushToDiskInterval);\n\u002B            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch,\n\u002B                buffered, false, shared, flushToDiskInterval, encoding, rollingInterval, rollOnFileSizeLimit, retainedFileCountLimit);\n         }\n \n         /// \u003Csummary\u003E\n@@ -119,7 \u002B227,7 @@ public static class FileLoggerConfigurationExtensions\n         /// to be changed at runtime.\u003C/param\u003E\n         /// \u003Cparam name=\u0022formatProvider\u0022\u003ESupplies culture-specific formatting information, or null.\u003C/param\u003E\n         /// \u003Cparam name=\u0022outputTemplate\u0022\u003EA message template describing the format used to write to the sink.\n-        /// the default is \u0022{Timestamp} [{Level}] {Message}{NewLine}{Exception}\u0022.\u003C/param\u003E\n\u002B        /// the default is \u0022{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\u0022.\u003C/param\u003E\n         /// \u003Creturns\u003EConfiguration object allowing method chaining.\u003C/returns\u003E\n         /// \u003Cremarks\u003EThe file will be written using the UTF-8 character set.\u003C/remarks\u003E\n         public static LoggerConfiguration File(\n@@ -161,48 \u002B269,63 @@ public static class FileLoggerConfigurationExtensions\n             LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n             LoggingLevelSwitch levelSwitch = null)\n         {\n-            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, null, levelSwitch, false, true);\n\u002B            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, null, levelSwitch, false, true,\n\u002B                false, null, null, RollingInterval.Infinite, false, null);\n         }\n \n         static LoggerConfiguration ConfigureFile(\n             this Func\u003CILogEventSink, LogEventLevel, LoggingLevelSwitch, LoggerConfiguration\u003E addSink,\n             ITextFormatter formatter,\n             string path,\n-            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n-            long? fileSizeLimitBytes = DefaultFileSizeLimitBytes,\n-            LoggingLevelSwitch levelSwitch = null,\n-            bool buffered = false,\n-            bool propagateExceptions = false,\n-            bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n\u002B            LogEventLevel restrictedToMinimumLevel,\n\u002B            long? fileSizeLimitBytes,\n\u002B            LoggingLevelSwitch levelSwitch,\n\u002B            bool buffered,\n\u002B            bool propagateExceptions,\n\u002B            bool shared,\n\u002B            TimeSpan? flushToDiskInterval,\n\u002B            Encoding encoding,\n\u002B            RollingInterval rollingInterval,\n\u002B            bool rollOnFileSizeLimit,\n\u002B            int? retainedFileCountLimit)\n         {\n             if (addSink == null) throw new ArgumentNullException(nameof(addSink));\n             if (formatter == null) throw new ArgumentNullException(nameof(formatter));\n             if (path == null) throw new ArgumentNullException(nameof(path));\n-            if (fileSizeLimitBytes.HasValue \u0026\u0026 fileSizeLimitBytes \u003C 0) throw new ArgumentException(\u0022Negative value provided; file size limit must be non-negative\u0022);\n-            if (shared \u0026\u0026 buffered)\n-                throw new ArgumentException(\u0022Buffered writes are not available when file sharing is enabled.\u0022, nameof(buffered));\n\u002B            if (fileSizeLimitBytes.HasValue \u0026\u0026 fileSizeLimitBytes \u003C 0) throw new ArgumentException(\u0022Negative value provided; file size limit must be non-negative.\u0022, nameof(fileSizeLimitBytes));\n\u002B            if (retainedFileCountLimit.HasValue \u0026\u0026 retainedFileCountLimit \u003C 1) throw new ArgumentException(\u0022At least one file must be retained.\u0022, nameof(retainedFileCountLimit));\n\u002B            if (shared \u0026\u0026 buffered) throw new ArgumentException(\u0022Buffered writes are not available when file sharing is enabled.\u0022, nameof(buffered));\n \n             ILogEventSink sink;\n-            try\n\u002B\n\u002B            if (rollOnFileSizeLimit || rollingInterval != RollingInterval.Infinite)\n\u002B            {\n\u002B                sink = new RollingFileSink(path, formatter, fileSizeLimitBytes, retainedFileCountLimit, encoding, buffered, shared, rollingInterval, rollOnFileSizeLimit);\n\u002B            }\n\u002B            else\n             {\n-                if (shared)\n\u002B                try\n                 {\n-                    sink = new SharedFileSink(path, formatter, fileSizeLimitBytes);\n\u002B#pragma warning disable 618\n\u002B                    if (shared)\n\u002B                    {\n\u002B                        sink = new SharedFileSink(path, formatter, fileSizeLimitBytes);\n\u002B                    }\n\u002B                    else\n\u002B                    {\n\u002B                        sink = new FileSink(path, formatter, fileSizeLimitBytes, buffered: buffered);\n\u002B                    }\n\u002B#pragma warning restore 618\n                 }\n-                else\n\u002B                catch (Exception ex)\n                 {\n-                    sink = new FileSink(path, formatter, fileSizeLimitBytes, buffered: buffered);\n-                }\n-            }\n-            catch (Exception ex)\n-            {\n-                SelfLog.WriteLine(\u0022Unable to open file sink for {0}: {1}\u0022, path, ex);\n\u002B                    SelfLog.WriteLine(\u0022Unable to open file sink for {0}: {1}\u0022, path, ex);\n \n-                if (propagateExceptions)\n-                    throw;\n\u002B                    if (propagateExceptions)\n\u002B                        throw;\n \n-                return addSink(new NullSink(), LevelAlias.Maximum, null);\n\u002B                    return addSink(new NullSink(), LevelAlias.Maximum, null);\n\u002B                }\n             }\n \n             if (flushToDiskInterval.HasValue)\n@@ -212,5 \u002B335,5 @@ public static class FileLoggerConfigurationExtensions\n \n             return addSink(sink, restrictedToMinimumLevel, levelSwitch);\n         }\n-    }  \n\u002B    }\n }"
    },
    {
      "sha": "9fac848ebd091f0908a4d1acff0bf0b1ebcc1d6b",
      "filename": "src/Serilog.Sinks.File/RollingInterval.cs",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/RollingInterval.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/RollingInterval.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/RollingInterval.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,52 @@\n\u002B\uFEFF// Copyright 2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Bnamespace Serilog\n\u002B{\n\u002B    /// \u003Csummary\u003E\n\u002B    /// Specifies the frequency at which the log file should roll.\n\u002B    /// \u003C/summary\u003E\n\u002B    public enum RollingInterval\n\u002B    {\n\u002B        /// \u003Csummary\u003E\n\u002B        /// The log file will never roll; no time period information will be appended to the log file name.\n\u002B        /// \u003C/summary\u003E\n\u002B        Infinite,\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Roll every year. Filenames will have a four-digit year appended in the pattern \u003Ccode\u003Eyyyy\u003C/code\u003E.\n\u002B        /// \u003C/summary\u003E\n\u002B        Year,\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Roll every calendar month. Filenames will have \u003Ccode\u003EyyyyMM\u003C/code\u003E appended.\n\u002B        /// \u003C/summary\u003E\n\u002B        Month,\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Roll every day. Filenames will have \u003Ccode\u003EyyyyMMdd\u003C/code\u003E appended.\n\u002B        /// \u003C/summary\u003E\n\u002B        Day,\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Roll every hour. Filenames will have \u003Ccode\u003EyyyyMMddHH\u003C/code\u003E appended.\n\u002B        /// \u003C/summary\u003E\n\u002B        Hour,\n\u002B\n\u002B        /// \u003Csummary\u003E\n\u002B        /// Roll every minute. Filenames will have \u003Ccode\u003EyyyyMMddHHmm\u003C/code\u003E appended.\n\u002B        /// \u003C/summary\u003E\n\u002B        Minute\n\u002B    }\n\u002B}"
    },
    {
      "sha": "569e5b0b687285bbf36dcd9ad208e36ba2a12c49",
      "filename": "src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,54 @@\n\u002B\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\u002B\n\u002B  \u003CPropertyGroup\u003E\n\u002B    \u003CDescription\u003EWrite Serilog events to text files in plain or JSON format.\u003C/Description\u003E\n\u002B    \u003CVersionPrefix\u003E4.0.0\u003C/VersionPrefix\u003E\n\u002B    \u003CAuthors\u003ESerilog Contributors\u003C/Authors\u003E\n\u002B    \u003CTargetFrameworks\u003Enet45;netstandard1.3\u003C/TargetFrameworks\u003E\n\u002B    \u003CGenerateDocumentationFile\u003Etrue\u003C/GenerateDocumentationFile\u003E\n\u002B    \u003CAssemblyName\u003ESerilog.Sinks.File\u003C/AssemblyName\u003E\n\u002B    \u003CAssemblyOriginatorKeyFile\u003E../../assets/Serilog.snk\u003C/AssemblyOriginatorKeyFile\u003E\n\u002B    \u003CSignAssembly\u003Etrue\u003C/SignAssembly\u003E\n\u002B    \u003CPublicSign Condition=\u0022 \u0027$(OS)\u0027 != \u0027Windows_NT\u0027 \u0022\u003Etrue\u003C/PublicSign\u003E\n\u002B    \u003CPackageId\u003ESerilog.Sinks.File\u003C/PackageId\u003E\n\u002B    \u003CPackageTags\u003Eserilog;file\u003C/PackageTags\u003E\n\u002B    \u003CPackageIconUrl\u003Ehttp://serilog.net/images/serilog-sink-nuget.png\u003C/PackageIconUrl\u003E\n\u002B    \u003CPackageProjectUrl\u003Ehttp://serilog.net\u003C/PackageProjectUrl\u003E\n\u002B    \u003CPackageLicenseUrl\u003Ehttp://www.apache.org/licenses/LICENSE-2.0\u003C/PackageLicenseUrl\u003E\n\u002B    \u003CGenerateAssemblyVersionAttribute\u003Efalse\u003C/GenerateAssemblyVersionAttribute\u003E\n\u002B    \u003CRootNamespace\u003ESerilog\u003C/RootNamespace\u003E\n\u002B    \u003CTreatWarningsAsErrors\u003Etrue\u003C/TreatWarningsAsErrors\u003E\n\u002B    \u003CAssemblyName\u003ESerilog.Sinks.File\u003C/AssemblyName\u003E\n\u002B    \u003C!-- Don\u0027t reference the full NETStandard.Library --\u003E\n\u002B    \u003CDisableImplicitFrameworkReferences\u003Etrue\u003C/DisableImplicitFrameworkReferences\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n\u002B  \u003CItemGroup\u003E\n\u002B    \u003CPackageReference Include=\u0022Serilog\u0022 Version=\u00222.5.0\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027net45\u0027 \u0022\u003E\n\u002B    \u003CReference Include=\u0022System\u0022 /\u003E\n\u002B    \u003CReference Include=\u0022System.Core\u0022 /\u003E\n\u002B    \u003CReference Include=\u0022Microsoft.CSharp\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CPropertyGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027net45\u0027 \u0022\u003E\n\u002B    \u003CDefineConstants\u003E$(DefineConstants);ATOMIC_APPEND;HRESULTS\u003C/DefineConstants\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n\u002B  \u003CPropertyGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netstandard1.3\u0027 \u0022\u003E\n\u002B    \u003CDefineConstants\u003E$(DefineConstants);OS_MUTEX\u003C/DefineConstants\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netstandard1.3\u0027 \u0022\u003E\n\u002B    \u003CPackageReference Include=\u0022System.IO\u0022 Version=\u00224.1.0\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.IO.FileSystem\u0022 Version=\u00224.0.1\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.IO.FileSystem.Primitives\u0022 Version=\u00224.0.1\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.Text.Encoding.Extensions\u0022 Version=\u00224.0.11\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.Threading.Timer\u0022 Version=\u00224.0.1\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.Threading\u0022 Version=\u00224.0.11\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022System.Runtime.InteropServices\u0022 Version=\u00224.1.0\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B\u003C/Project\u003E"
    },
    {
      "sha": "c8d4c28c794d1b97e0841f961f765b0de389f551",
      "filename": "src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 18,
      "changes": 18,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,18 \u002B0,0 @@\n-\uFEFF\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u003E\n-\u003CProject ToolsVersion=\u002214.0\u0022 DefaultTargets=\u0022Build\u0022 xmlns=\u0022http://schemas.microsoft.com/developer/msbuild/2003\u0022\u003E\n-  \u003CPropertyGroup\u003E\n-    \u003CVisualStudioVersion Condition=\u0022\u0027$(VisualStudioVersion)\u0027 == \u0027\u0027\u0022\u003E14.0\u003C/VisualStudioVersion\u003E\n-    \u003CVSToolsPath Condition=\u0022\u0027$(VSToolsPath)\u0027 == \u0027\u0027\u0022\u003E$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\u003C/VSToolsPath\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DNX\\Microsoft.DNX.Props\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-  \u003CPropertyGroup Label=\u0022Globals\u0022\u003E\n-    \u003CProjectGuid\u003E57e0ed0e-0f45-48ab-a73d-6a92b7c32095\u003C/ProjectGuid\u003E\n-    \u003CRootNamespace\u003ESerilog\u003C/RootNamespace\u003E\n-    \u003CBaseIntermediateOutputPath Condition=\u0022\u0027$(BaseIntermediateOutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\obj\u003C/BaseIntermediateOutputPath\u003E\n-    \u003COutputPath Condition=\u0022\u0027$(OutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\bin\\\u003C/OutputPath\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CPropertyGroup\u003E\n-    \u003CSchemaVersion\u003E2.0\u003C/SchemaVersion\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-\u003C/Project\u003E\n\\ No newline at end of file"
    },
    {
      "sha": "b7cf3cc3cd2bf232f361ca1975bef54eb39bcf05",
      "filename": "src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/Clock.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,38 @@\n\u002B\uFEFF// Copyright 2013-2016 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing System;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    static class Clock\n\u002B    {\n\u002B        static Func\u003CDateTime\u003E _dateTimeNow = () =\u003E DateTime.Now;\n\u002B\n\u002B        [ThreadStatic]\n\u002B        static DateTime _testDateTimeNow;\n\u002B\n\u002B        public static DateTime DateTimeNow =\u003E _dateTimeNow();\n\u002B\n\u002B        // Time is set per thread to support parallel\n\u002B        // If any thread uses the clock in test mode, all threads\n\u002B        // must use it in test mode; once set to test mode only\n\u002B        // terminating the application returns it to normal use.\n\u002B        public static void SetTestDateTimeNow(DateTime now)\n\u002B        {\n\u002B            _testDateTimeNow = now;\n\u002B            _dateTimeNow = () =\u003E _testDateTimeNow;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "bfd288fc59157f8c08e4f2844d029dd3b9a7ef9b",
      "filename": "src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/FileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -15,7 \u002B15,6 @@\n using System;\n using System.IO;\n using System.Text;\n-using Serilog.Core;\n using Serilog.Events;\n using Serilog.Formatting;\n \n@@ -24,7 \u002B23,8 @@ namespace Serilog.Sinks.File\n     /// \u003Csummary\u003E\n     /// Write log events to a disk file.\n     /// \u003C/summary\u003E\n-    public sealed class FileSink : ILogEventSink, IFlushableFileSink, IDisposable\n\u002B    [Obsolete(\u0022This type will be removed from the public API in a future version; use \u0060WriteTo.File()\u0060 instead.\u0022)]\n\u002B    public sealed class FileSink : IFileSink, IDisposable\n     {\n         readonly TextWriter _output;\n         readonly FileStream _underlyingStream;\n@@ -50,7 \u002B50,7 @@ public FileSink(string path, ITextFormatter textFormatter, long? fileSizeLimitBy\n         {\n             if (path == null) throw new ArgumentNullException(nameof(path));\n             if (textFormatter == null) throw new ArgumentNullException(nameof(textFormatter));\n-            if (fileSizeLimitBytes.HasValue \u0026\u0026 fileSizeLimitBytes \u003C 0) throw new ArgumentException(\u0022Negative value provided; file size limit must be non-negative\u0022);\n\u002B            if (fileSizeLimitBytes.HasValue \u0026\u0026 fileSizeLimitBytes \u003C 0) throw new ArgumentException(\u0022Negative value provided; file size limit must be non-negative.\u0022);\n \n             _textFormatter = textFormatter;\n             _fileSizeLimitBytes = fileSizeLimitBytes;\n@@ -71,27 \u002B71,34 @@ public FileSink(string path, ITextFormatter textFormatter, long? fileSizeLimitBy\n             _output = new StreamWriter(outputStream, encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// \u003Csummary\u003E\n-        /// Emit the provided log event to the sink.\n-        /// \u003C/summary\u003E\n-        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n-        public void Emit(LogEvent logEvent)\n\u002B        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n             lock (_syncRoot)\n             {\n                 if (_fileSizeLimitBytes != null)\n                 {\n                     if (_countingStreamWrapper.CountedLength \u003E= _fileSizeLimitBytes.Value)\n-                        return;\n\u002B                        return false;\n                 }\n \n                 _textFormatter.Format(logEvent, _output);\n                 if (!_buffered)\n                     _output.Flush();\n\u002B\n\u002B                return true;\n             }\n         }\n \n\u002B        /// \u003Csummary\u003E\n\u002B        /// Emit the provided log event to the sink.\n\u002B        /// \u003C/summary\u003E\n\u002B        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            ((IFileSink) this).EmitOrOverflow(logEvent);\n\u002B        }\n\u002B\n         /// \u003Cinheritdoc /\u003E\n         public void Dispose()\n         {"
    },
    {
      "sha": "89268ab61ac15cd87870db6958f5307d4e589143",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,29 @@\n\u002B\uFEFF// Copyright 2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    /// \u003Csummary\u003E\n\u002B    /// Exists only for the convenience of \u003Csee cref=\u0022RollingFileSink\u0022/\u003E, which\n\u002B    /// switches implementations based on sharing. Would refactor, but preserving\n\u002B    /// backwards compatibility.\n\u002B    /// \u003C/summary\u003E\n\u002B    interface IFileSink : ILogEventSink, IFlushableFileSink\n\u002B    {\n\u002B        bool EmitOrOverflow(LogEvent logEvent);\n\u002B    }\n\u002B}"
    },
    {
      "sha": "75d6e526bb5b3c43354a6fec2b08a0f364d20b0d",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,4 \u002B1,18 @@\n-\uFEFFnamespace Serilog.Sinks.File\n\u002B\uFEFF// Copyright 2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n {\n     /// \u003Csummary\u003E\n     /// Supported by (file-based) sinks that can be explicitly flushed."
    },
    {
      "sha": "36fe8bcbcafd4976260d185803203b0b92a80319",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,31 @@\n\u002B\uFEFF// Copyright 2013-2016 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing System.IO;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    static class IOErrors\n\u002B    {\n\u002B        public static bool IsLockedFile(IOException ex)\n\u002B        {\n\u002B#if HRESULTS\n\u002B            var errorCode = System.Runtime.InteropServices.Marshal.GetHRForException(ex) \u0026 ((1 \u003C\u003C 16) - 1);\n\u002B            return errorCode == 32 || errorCode == 33;\n\u002B#else\n\u002B            return true;\n\u002B#endif\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "17c496bec39ebe44c0efe2125cfdd08cd12a5447",
      "filename": "src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "status": "added",
      "additions": 116,
      "deletions": 0,
      "changes": 116,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,116 @@\n\u002B\uFEFF// Copyright 2013-2016 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing System;\n\u002Busing System.Collections.Generic;\n\u002Busing System.Globalization;\n\u002Busing System.IO;\n\u002Busing System.Text.RegularExpressions;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    class PathRoller\n\u002B    {\n\u002B        const string PeriodMatchGroup = \u0022period\u0022;\n\u002B        const string SequenceNumberMatchGroup = \u0022sequence\u0022;\n\u002B\n\u002B        readonly string _directory;\n\u002B        readonly string _filenamePrefix;\n\u002B        readonly string _filenameSuffix;\n\u002B        readonly Regex _filenameMatcher;\n\u002B\n\u002B        readonly RollingInterval _interval;\n\u002B        readonly string _periodFormat;\n\u002B\n\u002B        public PathRoller(string path, RollingInterval interval)\n\u002B        {\n\u002B            if (path == null) throw new ArgumentNullException(nameof(path));\n\u002B            _interval = interval;\n\u002B            _periodFormat = interval.GetFormat();\n\u002B\n\u002B            var pathDirectory = Path.GetDirectoryName(path);\n\u002B            if (string.IsNullOrEmpty(pathDirectory))\n\u002B                pathDirectory = Directory.GetCurrentDirectory();\n\u002B\n\u002B            _directory = Path.GetFullPath(pathDirectory);\n\u002B            _filenamePrefix = Path.GetFileNameWithoutExtension(path);\n\u002B            _filenameSuffix = Path.GetExtension(path);\n\u002B            _filenameMatcher = new Regex(\n\u002B                \u0022^\u0022 \u002B\n\u002B                Regex.Escape(_filenamePrefix) \u002B\n\u002B                \u0022(?\u003C\u0022 \u002B PeriodMatchGroup \u002B \u0022\u003E\\\\d{\u0022 \u002B _periodFormat.Length \u002B \u0022})\u0022 \u002B\n\u002B                \u0022(?\u003C\u0022 \u002B SequenceNumberMatchGroup \u002B \u0022\u003E_[0-9]{3,}){0,1}\u0022 \u002B\n\u002B                Regex.Escape(_filenameSuffix) \u002B\n\u002B                \u0022$\u0022);\n\u002B\n\u002B            DirectorySearchPattern = $\u0022{_filenamePrefix}*{_filenameSuffix}\u0022;\n\u002B        }\n\u002B\n\u002B        public string LogFileDirectory =\u003E _directory;\n\u002B\n\u002B        public string DirectorySearchPattern { get; }\n\u002B\n\u002B        public void GetLogFilePath(DateTime date, int? sequenceNumber, out string path)\n\u002B        {\n\u002B            var currentCheckpoint = GetCurrentCheckpoint(date);\n\u002B\n\u002B            var tok = currentCheckpoint?.ToString(_periodFormat, CultureInfo.InvariantCulture) ?? \u0022\u0022;\n\u002B\n\u002B            if (sequenceNumber != null)\n\u002B                tok \u002B= \u0022_\u0022 \u002B sequenceNumber.Value.ToString(\u0022000\u0022, CultureInfo.InvariantCulture);\n\u002B\n\u002B            path = Path.Combine(_directory, _filenamePrefix \u002B tok \u002B _filenameSuffix);\n\u002B        }\n\u002B\n\u002B        public IEnumerable\u003CRollingLogFile\u003E SelectMatches(IEnumerable\u003Cstring\u003E filenames)\n\u002B        {\n\u002B            foreach (var filename in filenames)\n\u002B            {\n\u002B                var match = _filenameMatcher.Match(filename);\n\u002B                if (!match.Success)\n\u002B                    continue;\n\u002B\n\u002B                int? inc = null;\n\u002B                var incGroup = match.Groups[SequenceNumberMatchGroup];\n\u002B                if (incGroup.Captures.Count != 0)\n\u002B                {\n\u002B                    var incPart = incGroup.Captures[0].Value.Substring(1);\n\u002B                    inc = int.Parse(incPart, CultureInfo.InvariantCulture);\n\u002B                }\n\u002B\n\u002B                DateTime? period = null;\n\u002B                var periodGroup = match.Groups[PeriodMatchGroup];\n\u002B                if (periodGroup.Captures.Count != 0)\n\u002B                {\n\u002B                    var dateTimePart = periodGroup.Captures[0].Value;\n\u002B                    if (DateTime.TryParseExact(\n\u002B                        dateTimePart,\n\u002B                        _periodFormat,\n\u002B                        CultureInfo.InvariantCulture,\n\u002B                        DateTimeStyles.None,\n\u002B                        out var dateTime))\n\u002B                    {\n\u002B                        period = dateTime;\n\u002B                    }\n\u002B                }\n\u002B\n\u002B                yield return new RollingLogFile(filename, period, inc);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        public DateTime? GetCurrentCheckpoint(DateTime instant) =\u003E _interval.GetCurrentCheckpoint(instant);\n\u002B\n\u002B        public DateTime? GetNextCheckpoint(DateTime instant) =\u003E _interval.GetNextCheckpoint(instant);\n\u002B    }\n\u002B}"
    },
    {
      "sha": "644176f1e15c99877be1752b0562a1f706799013",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "status": "added",
      "additions": 233,
      "deletions": 0,
      "changes": 233,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,233 @@\n\u002B\uFEFF// Copyright 2013-2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002B#pragma warning disable 618\n\u002B\n\u002Busing System;\n\u002Busing System.IO;\n\u002Busing System.Linq;\n\u002Busing System.Text;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Debugging;\n\u002Busing Serilog.Events;\n\u002Busing Serilog.Formatting;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    sealed class RollingFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n\u002B    {\n\u002B        readonly PathRoller _roller;\n\u002B        readonly ITextFormatter _textFormatter;\n\u002B        readonly long? _fileSizeLimitBytes;\n\u002B        readonly int? _retainedFileCountLimit;\n\u002B        readonly Encoding _encoding;\n\u002B        readonly bool _buffered;\n\u002B        readonly bool _shared;\n\u002B        readonly bool _rollOnFileSizeLimit;\n\u002B\n\u002B        readonly object _syncRoot = new object();\n\u002B        bool _isDisposed;\n\u002B        DateTime? _nextCheckpoint;\n\u002B        IFileSink _currentFile;\n\u002B        int? _currentFileSequence;\n\u002B\n\u002B        public RollingFileSink(string path,\n\u002B                              ITextFormatter textFormatter,\n\u002B                              long? fileSizeLimitBytes,\n\u002B                              int? retainedFileCountLimit,\n\u002B                              Encoding encoding,\n\u002B                              bool buffered,\n\u002B                              bool shared,\n\u002B                              RollingInterval rollingInterval,\n\u002B                              bool rollOnFileSizeLimit)\n\u002B        {\n\u002B            if (path == null) throw new ArgumentNullException(nameof(path));\n\u002B            if (fileSizeLimitBytes.HasValue \u0026\u0026 fileSizeLimitBytes \u003C 0) throw new ArgumentException(\u0022Negative value provided; file size limit must be non-negative\u0022);\n\u002B            if (retainedFileCountLimit.HasValue \u0026\u0026 retainedFileCountLimit \u003C 1) throw new ArgumentException(\u0022Zero or negative value provided; retained file count limit must be at least 1\u0022);\n\u002B\n\u002B            _roller = new PathRoller(path, rollingInterval);\n\u002B            _textFormatter = textFormatter;\n\u002B            _fileSizeLimitBytes = fileSizeLimitBytes;\n\u002B            _retainedFileCountLimit = retainedFileCountLimit;\n\u002B            _encoding = encoding;\n\u002B            _buffered = buffered;\n\u002B            _shared = shared;\n\u002B            _rollOnFileSizeLimit = rollOnFileSizeLimit;\n\u002B        }\n\u002B\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n\u002B\n\u002B            lock (_syncRoot)\n\u002B            {\n\u002B                if (_isDisposed) throw new ObjectDisposedException(\u0022The log file has been disposed.\u0022);\n\u002B\n\u002B                var now = Clock.DateTimeNow;\n\u002B                AlignCurrentFileTo(now);\n\u002B\n\u002B                while (_currentFile?.EmitOrOverflow(logEvent) == false \u0026\u0026 _rollOnFileSizeLimit)\n\u002B                {\n\u002B                    AlignCurrentFileTo(now, nextSequence: true);\n\u002B                }\n\u002B            }\n\u002B        }\n\u002B\n\u002B        void AlignCurrentFileTo(DateTime now, bool nextSequence = false)\n\u002B        {\n\u002B            if (!_nextCheckpoint.HasValue)\n\u002B            {\n\u002B                OpenFile(now);\n\u002B            }\n\u002B            else if (nextSequence || now \u003E= _nextCheckpoint.Value)\n\u002B            {\n\u002B                int? minSequence = null;\n\u002B                if (nextSequence)\n\u002B                {\n\u002B                    if (_currentFileSequence == null)\n\u002B                        minSequence = 1;\n\u002B                    else\n\u002B                        minSequence = _currentFileSequence.Value \u002B 1;\n\u002B                }\n\u002B\n\u002B                CloseFile();\n\u002B                OpenFile(now, minSequence);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        void OpenFile(DateTime now, int? minSequence = null)\n\u002B        {\n\u002B            var currentCheckpoint = _roller.GetCurrentCheckpoint(now);\n\u002B\n\u002B            // We only try periodically because repeated failures\n\u002B            // to open log files REALLY slow an app down.\n\u002B            _nextCheckpoint = _roller.GetNextCheckpoint(now) ?? now.AddMinutes(30);\n\u002B\n\u002B            var existingFiles = Enumerable.Empty\u003Cstring\u003E();\n\u002B            try\n\u002B            {\n\u002B                existingFiles = Directory.GetFiles(_roller.LogFileDirectory, _roller.DirectorySearchPattern)\n\u002B                                         .Select(Path.GetFileName);\n\u002B            }\n\u002B            catch (DirectoryNotFoundException) { }\n\u002B\n\u002B            var latestForThisCheckpoint = _roller\n\u002B                .SelectMatches(existingFiles)\n\u002B                .Where(m =\u003E m.DateTime == currentCheckpoint)\n\u002B                .OrderByDescending(m =\u003E m.SequenceNumber)\n\u002B                .FirstOrDefault();\n\u002B\n\u002B            var sequence = latestForThisCheckpoint?.SequenceNumber;\n\u002B            if (minSequence != null)\n\u002B            {\n\u002B                if (sequence == null || sequence.Value \u003C minSequence.Value)\n\u002B                    sequence = minSequence;\n\u002B            }\n\u002B\n\u002B            const int maxAttempts = 3;\n\u002B            for (var attempt = 0; attempt \u003C maxAttempts; attempt\u002B\u002B)\n\u002B            {\n\u002B                _roller.GetLogFilePath(now, sequence, out var path);\n\u002B\n\u002B                try\n\u002B                {\n\u002B                    _currentFile = _shared ?\n\u002B                        (IFileSink)new SharedFileSink(path, _textFormatter, _fileSizeLimitBytes, _encoding) :\n\u002B                        new FileSink(path, _textFormatter, _fileSizeLimitBytes, _encoding, _buffered);\n\u002B                    _currentFileSequence = sequence;\n\u002B                }\n\u002B                catch (IOException ex)\n\u002B                {\n\u002B                    if (IOErrors.IsLockedFile(ex))\n\u002B                    {\n\u002B                        SelfLog.WriteLine(\u0022File target {0} was locked, attempting to open next in sequence (attempt {1})\u0022, path, attempt \u002B 1);\n\u002B                        sequence = (sequence ?? 0) \u002B 1;\n\u002B                        continue;\n\u002B                    }\n\u002B\n\u002B                    throw;\n\u002B                }\n\u002B\n\u002B                ApplyRetentionPolicy(path);\n\u002B                return;\n\u002B            }\n\u002B        }\n\u002B\n\u002B        void ApplyRetentionPolicy(string currentFilePath)\n\u002B        {\n\u002B            if (_retainedFileCountLimit == null) return;\n\u002B\n\u002B            var currentFileName = Path.GetFileName(currentFilePath);\n\u002B\n\u002B            // We consider the current file to exist, even if nothing\u0027s been written yet,\n\u002B            // because files are only opened on response to an event being processed.\n\u002B            var potentialMatches = Directory.GetFiles(_roller.LogFileDirectory, _roller.DirectorySearchPattern)\n\u002B                .Select(Path.GetFileName)\n\u002B                .Union(new [] { currentFileName });\n\u002B\n\u002B            var newestFirst = _roller\n\u002B                .SelectMatches(potentialMatches)\n\u002B                .OrderByDescending(m =\u003E m.DateTime)\n\u002B                .ThenByDescending(m =\u003E m.SequenceNumber)\n\u002B                .Select(m =\u003E m.Filename);\n\u002B\n\u002B            var toRemove = newestFirst\n\u002B                .Where(n =\u003E StringComparer.OrdinalIgnoreCase.Compare(currentFileName, n) != 0)\n\u002B                .Skip(_retainedFileCountLimit.Value - 1)\n\u002B                .ToList();\n\u002B\n\u002B            foreach (var obsolete in toRemove)\n\u002B            {\n\u002B                var fullPath = Path.Combine(_roller.LogFileDirectory, obsolete);\n\u002B                try\n\u002B                {\n\u002B                    System.IO.File.Delete(fullPath);\n\u002B                }\n\u002B                catch (Exception ex)\n\u002B                {\n\u002B                    SelfLog.WriteLine(\u0022Error {0} while removing obsolete log file {1}\u0022, ex, fullPath);\n\u002B                }\n\u002B            }\n\u002B        }\n\u002B\n\u002B        public void Dispose()\n\u002B        {\n\u002B            lock (_syncRoot)\n\u002B            {\n\u002B                if (_currentFile == null) return;\n\u002B                CloseFile();\n\u002B                _isDisposed = true;\n\u002B            }\n\u002B        }\n\u002B\n\u002B        void CloseFile()\n\u002B        {\n\u002B            if (_currentFile != null)\n\u002B            {\n\u002B                (_currentFile as IDisposable)?.Dispose();\n\u002B                _currentFile = null;\n\u002B            }\n\u002B\n\u002B            _nextCheckpoint = null;\n\u002B        }\n\u002B\n\u002B        public void FlushToDisk()\n\u002B        {\n\u002B            lock (_syncRoot)\n\u002B            {\n\u002B                _currentFile?.FlushToDisk();\n\u002B            }\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "2c9e2fdb1220f29a8a2a1a8f702f859984b2fdde",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,86 @@\n\u002B\uFEFF// Copyright 2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B\n\u002Busing System;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    static class RollingIntervalExtensions\n\u002B    {\n\u002B        public static string GetFormat(this RollingInterval interval)\n\u002B        {\n\u002B            switch (interval)\n\u002B            {\n\u002B                case RollingInterval.Infinite:\n\u002B                    return \u0022\u0022;\n\u002B                case RollingInterval.Year:\n\u002B                    return \u0022yyyy\u0022;\n\u002B                case RollingInterval.Month:\n\u002B                    return \u0022yyyyMM\u0022;\n\u002B                case RollingInterval.Day:\n\u002B                    return \u0022yyyyMMdd\u0022;\n\u002B                case RollingInterval.Hour:\n\u002B                    return \u0022yyyyMMddHH\u0022;\n\u002B                case RollingInterval.Minute:\n\u002B                    return \u0022yyyyMMddHHmm\u0022;\n\u002B                default:\n\u002B                    throw new ArgumentException(\u0022Invalid rolling interval\u0022);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        public static DateTime? GetCurrentCheckpoint(this RollingInterval interval, DateTime instant)\n\u002B        {\n\u002B            switch (interval)\n\u002B            {\n\u002B                case RollingInterval.Infinite:\n\u002B                    return null;\n\u002B                case RollingInterval.Year:\n\u002B                    return new DateTime(instant.Year, 1, 1, 0, 0, 0, instant.Kind);\n\u002B                case RollingInterval.Month:\n\u002B                    return new DateTime(instant.Year, instant.Month, 1, 0, 0, 0, instant.Kind);\n\u002B                case RollingInterval.Day:\n\u002B                    return new DateTime(instant.Year, instant.Month, instant.Day, 0, 0, 0, instant.Kind);\n\u002B                case RollingInterval.Hour:\n\u002B                    return new DateTime(instant.Year, instant.Month, instant.Day, instant.Hour, 0, 0, instant.Kind);\n\u002B                case RollingInterval.Minute:\n\u002B                    return new DateTime(instant.Year, instant.Month, instant.Day, instant.Hour, instant.Minute, 0, instant.Kind);\n\u002B                default:\n\u002B                    throw new ArgumentException(\u0022Invalid rolling interval\u0022);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        public static DateTime? GetNextCheckpoint(this RollingInterval interval, DateTime instant)\n\u002B        {\n\u002B            var current = GetCurrentCheckpoint(interval, instant);\n\u002B            if (current == null)\n\u002B                return null;\n\u002B\n\u002B            switch (interval)\n\u002B            {\n\u002B                case RollingInterval.Year:\n\u002B                    return current.Value.AddYears(1);\n\u002B                case RollingInterval.Month:\n\u002B                    return current.Value.AddMonths(1);\n\u002B                case RollingInterval.Day:\n\u002B                    return current.Value.AddDays(1);\n\u002B                case RollingInterval.Hour:\n\u002B                    return current.Value.AddHours(1);\n\u002B                case RollingInterval.Minute:\n\u002B                    return current.Value.AddMinutes(1);\n\u002B                default:\n\u002B                    throw new ArgumentException(\u0022Invalid rolling interval\u0022);\n\u002B            }\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "be64c4e9537b383fec8596e26413b5045a656268",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,34 @@\n\u002B// Copyright 2013-2017 Serilog Contributors\n\u002B//\n\u002B// Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\n\u002B// you may not use this file except in compliance with the License.\n\u002B// You may obtain a copy of the License at\n\u002B//\n\u002B//     http://www.apache.org/licenses/LICENSE-2.0\n\u002B//\n\u002B// Unless required by applicable law or agreed to in writing, software\n\u002B// distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n\u002B// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u002B// See the License for the specific language governing permissions and\n\u002B// limitations under the License.\n\u002B \n\u002Busing System;\n\u002B\n\u002Bnamespace Serilog.Sinks.File\n\u002B{\n\u002B    class RollingLogFile\n\u002B    {\n\u002B        public RollingLogFile(string filename, DateTime? dateTime, int? sequenceNumber)\n\u002B        {\n\u002B            Filename = filename;\n\u002B            DateTime = dateTime;\n\u002B            SequenceNumber = sequenceNumber;\n\u002B        }\n\u002B\n\u002B        public string Filename { get; }\n\u002B\n\u002B        public DateTime? DateTime { get; }\n\u002B\n\u002B        public int? SequenceNumber { get; }\n\u002B    }\n\u002B} "
    },
    {
      "sha": "805e786b1992675b0459f18596d6d4dd00f9acae",
      "filename": "src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -27,7 \u002B27,8 @@ namespace Serilog.Sinks.File\n     /// \u003Csummary\u003E\n     /// Write log events to a disk file.\n     /// \u003C/summary\u003E\n-    public sealed class SharedFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n\u002B    [Obsolete(\u0022This type will be removed from the public API in a future version; use \u0060WriteTo.File(shared: true)\u0060 instead.\u0022)]\n\u002B    public sealed class SharedFileSink : IFileSink, IDisposable\n     {\n         readonly MemoryStream _writeBuffer;\n         readonly string _path;\n@@ -84,11 \u002B85,7 @@ public SharedFileSink(string path, ITextFormatter textFormatter, long? fileSizeL\n                 encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// \u003Csummary\u003E\n-        /// Emit the provided log event to the sink.\n-        /// \u003C/summary\u003E\n-        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n-        public void Emit(LogEvent logEvent)\n\u002B        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n \n@@ -121,13 \u002B118,14 @@ public void Emit(LogEvent logEvent)\n                         try\n                         {\n                             if (_fileOutput.Length \u003E= _fileSizeLimitBytes.Value)\n-                                return;\n\u002B                                return false;\n                         }\n                         catch (FileNotFoundException) { } // Cheaper and more reliable than checking existence\n                     }\n \n                     _fileOutput.Write(bytes, 0, length);\n                     _fileOutput.Flush();\n\u002B                    return true;\n                 }\n                 catch\n                 {\n@@ -143,6 \u002B141,14 @@ public void Emit(LogEvent logEvent)\n             }\n         }\n \n\u002B        /// \u003Csummary\u003E\n\u002B        /// Emit the provided log event to the sink.\n\u002B        /// \u003C/summary\u003E\n\u002B        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            ((IFileSink)this).EmitOrOverflow(logEvent);\n\u002B        }\n \n         /// \u003Cinheritdoc /\u003E\n         public void Dispose()"
    },
    {
      "sha": "a779bdab9320f82acc3900803f4294d97c195cc5",
      "filename": "src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -28,7 \u002B28,7 @@ namespace Serilog.Sinks.File\n     /// \u003Csummary\u003E\n     /// Write log events to a disk file.\n     /// \u003C/summary\u003E\n-    public sealed class SharedFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n\u002B    public sealed class SharedFileSink : IFileSink, IDisposable\n     {\n         readonly TextWriter _output;\n         readonly FileStream _underlyingStream;\n@@ -72,31 \u002B72,28 @@ public SharedFileSink(string path, ITextFormatter textFormatter, long? fileSizeL\n             _output = new StreamWriter(_underlyingStream, encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// \u003Csummary\u003E\n-        /// Emit the provided log event to the sink.\n-        /// \u003C/summary\u003E\n-        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n-        public void Emit(LogEvent logEvent)\n\u002B        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n \n             lock (_syncRoot)\n             {\n                 if (!TryAcquireMutex())\n-                    return;\n\u002B                    return true; // We didn\u0027t overflow, but, roll-on-size should not be attempted\n \n                 try\n                 {\n                     _underlyingStream.Seek(0, SeekOrigin.End);\n                     if (_fileSizeLimitBytes != null)\n                     {\n                         if (_underlyingStream.Length \u003E= _fileSizeLimitBytes.Value)\n-                            return;\n\u002B                            return false;\n                     }\n \n                     _textFormatter.Format(logEvent, _output);\n                     _output.Flush();\n                     _underlyingStream.Flush();\n\u002B                    return true;\n                 }\n                 finally\n                 {\n@@ -105,6 \u002B102,15 @@ public void Emit(LogEvent logEvent)\n             }\n         }\n \n\u002B        /// \u003Csummary\u003E\n\u002B        /// Emit the provided log event to the sink.\n\u002B        /// \u003C/summary\u003E\n\u002B        /// \u003Cparam name=\u0022logEvent\u0022\u003EThe log event to write.\u003C/param\u003E\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            ((IFileSink)this).EmitOrOverflow(logEvent);\n\u002B        }\n\u002B\n         /// \u003Cinheritdoc /\u003E\n         public void Dispose()\n         {"
    },
    {
      "sha": "24b75300668ec2745f181a3a9e0553bf46a7aeb4",
      "filename": "src/Serilog.Sinks.File/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 34,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,34 \u002B0,0 @@\n-{\n-  \u0022version\u0022: \u00223.2.0-*\u0022,\n-  \u0022description\u0022: \u0022Write Serilog events to a text file in plain or JSON format.\u0022,\n-  \u0022authors\u0022: [ \u0022Serilog Contributors\u0022 ],\n-  \u0022packOptions\u0022: {\n-    \u0022tags\u0022: [ \u0022serilog\u0022, \u0022file\u0022, \u0022io\u0022 ],\n-    \u0022projectUrl\u0022: \u0022http://serilog.net\u0022,\n-    \u0022licenseUrl\u0022: \u0022http://www.apache.org/licenses/LICENSE-2.0\u0022,\n-    \u0022iconUrl\u0022: \u0022http://serilog.net/images/serilog-sink-nuget.png\u0022\n-  },\n-  \u0022dependencies\u0022: {\n-    \u0022Serilog\u0022: \u00222.3.0\u0022\n-  },\n-  \u0022buildOptions\u0022: {\n-    \u0022keyFile\u0022: \u0022../../assets/Serilog.snk\u0022,\n-    \u0022xmlDoc\u0022: true\n-  },\n-  \u0022frameworks\u0022: {\n-    \u0022net4.5\u0022: {\n-      \u0022buildOptions\u0022: { \u0022define\u0022: [ \u0022ATOMIC_APPEND\u0022 ] }\n-    },\n-    \u0022netstandard1.3\u0022: {\n-      \u0022buildOptions\u0022: { \u0022define\u0022: [ \u0022OS_MUTEX\u0022 ] },\n-      \u0022dependencies\u0022: {\n-        \u0022System.IO\u0022: \u00224.1.0\u0022,\n-        \u0022System.IO.FileSystem\u0022: \u00224.0.1\u0022,\n-        \u0022System.IO.FileSystem.Primitives\u0022: \u00224.0.1\u0022,\n-        \u0022System.Text.Encoding.Extensions\u0022: \u00224.0.11\u0022,\n-        \u0022System.Threading.Timer\u0022: \u00224.0.1\u0022,\n-        \u0022System.Threading\u0022: \u00224.0.11\u0022\n-      }\n-    }\n-  }\n-}"
    },
    {
      "sha": "051565550a943f7409a4c093f227c77ce54d5f89",
      "filename": "test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -5,7 \u002B5,7 @@\n using Xunit;\n using System.IO;\n \n-namespace Serilog.Tests\n\u002Bnamespace Serilog.Sinks.File.Tests\n {\n     public class FileLoggerConfigurationExtensionsTests\n     {\n@@ -78,5 \u002B78,13 @@ public void WhenFlushingToDiskReportedSharedFileSinkCanBeCreatedAndDisposed()\n                 Thread.Sleep(TimeSpan.FromSeconds(1));\n             }\n         }\n\u002B\n\u002B        [Fact]\n\u002B        public void BufferingIsNotAvailableWhenSharingEnabled()\n\u002B        {\n\u002B            Assert.Throws\u003CArgumentException\u003E(() =\u003E\n\u002B                new LoggerConfiguration()\n\u002B                    .WriteTo.File(\u0022logs\u0022, buffered: true, shared: true));\n\u002B        }\n     }\n }"
    },
    {
      "sha": "ea9a5d48c505e1d9c0a179af22bed8a3157b7b7f",
      "filename": "test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/FileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,11 \u002B1,11 @@\n-\uFEFFusing System;\n-using System.IO;\n\u002B\uFEFFusing System.IO;\n using Xunit;\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File.Tests.Support;\n using Serilog.Tests.Support;\n using System.Text;\n-using Serilog.Tests;\n\u002B\n\u002B#pragma warning disable 618\n \n namespace Serilog.Sinks.File.Tests\n {\n@@ -116,11 \u002B116,10 @@ public void WhenLimitIsSpecifiedAndEncodingHasPreambleDataIsCorrectlyAppendedToF\n         [Fact]\n         public void WhenLimitIsNotSpecifiedAndEncodingHasPreambleDataIsCorrectlyAppendedToFileSink()\n         {\n-            long? maxBytes = null;\n             var encoding = Encoding.UTF8;\n \n             Assert.True(encoding.GetPreamble().Length \u003E 0);\n-            WriteTwoEventsAndCheckOutputFileLength(maxBytes, encoding);\n\u002B            WriteTwoEventsAndCheckOutputFileLength(null, encoding);\n         }\n \n         [Fact]\n@@ -136,11 \u002B135,10 @@ public void WhenLimitIsSpecifiedAndEncodingHasNoPreambleDataIsCorrectlyAppendedT\n         [Fact]\n         public void WhenLimitIsNotSpecifiedAndEncodingHasNoPreambleDataIsCorrectlyAppendedToFileSink()\n         {\n-            long? maxBytes = null;\n             var encoding = new UTF8Encoding(false);\n \n             Assert.Equal(0, encoding.GetPreamble().Length);\n-            WriteTwoEventsAndCheckOutputFileLength(maxBytes, encoding);\n\u002B            WriteTwoEventsAndCheckOutputFileLength(null, encoding);\n         }\n \n         static void WriteTwoEventsAndCheckOutputFileLength(long? maxBytes, Encoding encoding)"
    },
    {
      "sha": "3efe3f94e18b657170430b8058fe1cba287ab57c",
      "filename": "test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "status": "added",
      "additions": 177,
      "deletions": 0,
      "changes": 177,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,177 @@\n\u002B\uFEFFusing System;\n\u002Busing System.Collections.Generic;\n\u002Busing System.IO;\n\u002Busing System.Linq;\n\u002Busing System.Reflection;\n\u002Busing Xunit;\n\u002Busing Serilog.Events;\n\u002Busing Serilog.Sinks.File.Tests.Support;\n\u002Busing Serilog.Configuration;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests\n\u002B{\n\u002B    public class RollingFileSinkTests\n\u002B    {\n\u002B        [Fact]\n\u002B        public void LogEventsAreEmittedToTheFileNamedAccordingToTheEventTimestamp()\n\u002B        {\n\u002B            TestRollingEventSequence(Some.InformationEvent());\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void EventsAreWrittenWhenSharingIsEnabled()\n\u002B        {\n\u002B            TestRollingEventSequence(\n\u002B                (pf, wt) =\u003E wt.File(pf, shared: true, rollingInterval: RollingInterval.Day),\n\u002B                new[] { Some.InformationEvent() });\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void EventsAreWrittenWhenBufferingIsEnabled()\n\u002B        {\n\u002B            TestRollingEventSequence(\n\u002B                (pf, wt) =\u003E wt.File(pf, buffered: true, rollingInterval: RollingInterval.Day),\n\u002B                new[] { Some.InformationEvent() });\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void EventsAreWrittenWhenDiskFlushingIsEnabled()\n\u002B        {\n\u002B            // Doesn\u0027t test flushing, but ensures we haven\u0027t broken basic logging\n\u002B            TestRollingEventSequence(\n\u002B                (pf, wt) =\u003E wt.File(pf, flushToDiskInterval: TimeSpan.FromMilliseconds(50), rollingInterval: RollingInterval.Day),\n\u002B                new[] { Some.InformationEvent() });\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WhenTheDateChangesTheCorrectFileIsWritten()\n\u002B        {\n\u002B            var e1 = Some.InformationEvent();\n\u002B            var e2 = Some.InformationEvent(e1.Timestamp.AddDays(1));\n\u002B            TestRollingEventSequence(e1, e2);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WhenRetentionCountIsSetOldFilesAreDeleted()\n\u002B        {\n\u002B            LogEvent e1 = Some.InformationEvent(),\n\u002B                e2 = Some.InformationEvent(e1.Timestamp.AddDays(1)),\n\u002B                e3 = Some.InformationEvent(e2.Timestamp.AddDays(5));\n\u002B\n\u002B            TestRollingEventSequence(\n\u002B                (pf, wt) =\u003E wt.File(pf, retainedFileCountLimit: 2, rollingInterval: RollingInterval.Day),\n\u002B                new[] {e1, e2, e3},\n\u002B                files =\u003E\n\u002B                {\n\u002B                    Assert.Equal(3, files.Count);\n\u002B                    Assert.True(!System.IO.File.Exists(files[0]));\n\u002B                    Assert.True(System.IO.File.Exists(files[1]));\n\u002B                    Assert.True(System.IO.File.Exists(files[2]));\n\u002B                });\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void WhenSizeLimitIsBreachedNewFilesCreated()\n\u002B        {\n\u002B            var fileName = Some.String() \u002B \u0022.txt\u0022;\n\u002B            using (var temp = new TempFolder())\n\u002B            using (var log = new LoggerConfiguration()\n\u002B                .WriteTo.File(Path.Combine(temp.Path, fileName), rollOnFileSizeLimit: true, fileSizeLimitBytes: 1)\n\u002B                .CreateLogger())\n\u002B            {\n\u002B                LogEvent e1 = Some.InformationEvent(),\n\u002B                    e2 = Some.InformationEvent(e1.Timestamp),\n\u002B                    e3 = Some.InformationEvent(e1.Timestamp);\n\u002B\n\u002B                log.Write(e1); log.Write(e2); log.Write(e3);\n\u002B\n\u002B                var files = Directory.GetFiles(temp.Path)\n\u002B                    .OrderBy(p =\u003E p, StringComparer.OrdinalIgnoreCase)\n\u002B                    .ToArray();\n\u002B\n\u002B                Assert.Equal(3, files.Length);\n\u002B                Assert.True(files[0].EndsWith(fileName), files[0]);\n\u002B                Assert.True(files[1].EndsWith(\u0022_001.txt\u0022), files[1]);\n\u002B                Assert.True(files[2].EndsWith(\u0022_002.txt\u0022), files[2]);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void IfTheLogFolderDoesNotExistItWillBeCreated()\n\u002B        {\n\u002B            var fileName = Some.String() \u002B \u0022-{Date}.txt\u0022;\n\u002B            var temp = Some.TempFolderPath();\n\u002B            var folder = Path.Combine(temp, Guid.NewGuid().ToString());\n\u002B            var pathFormat = Path.Combine(folder, fileName);\n\u002B\n\u002B            ILogger log = null;\n\u002B\n\u002B            try\n\u002B            {\n\u002B                log = new LoggerConfiguration()\n\u002B                    .WriteTo.File(pathFormat, retainedFileCountLimit: 3, rollingInterval: RollingInterval.Day)\n\u002B                    .CreateLogger();\n\u002B\n\u002B                log.Write(Some.InformationEvent());\n\u002B\n\u002B                Assert.True(Directory.Exists(folder));\n\u002B            }\n\u002B            finally\n\u002B            {\n\u002B                var disposable = (IDisposable)log;\n\u002B                if (disposable != null) disposable.Dispose();\n\u002B                Directory.Delete(temp, true);\n\u002B            }\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void AssemblyVersionIsFixedAt200()\n\u002B        {\n\u002B            var assembly = typeof(FileLoggerConfigurationExtensions).GetTypeInfo().Assembly;\n\u002B            Assert.Equal(\u00222.0.0.0\u0022, assembly.GetName().Version.ToString(4));\n\u002B        }\n\u002B\n\u002B        static void TestRollingEventSequence(params LogEvent[] events)\n\u002B        {\n\u002B            TestRollingEventSequence(\n\u002B                (pf, wt) =\u003E wt.File(pf, retainedFileCountLimit: null, rollingInterval: RollingInterval.Day),\n\u002B                events);\n\u002B        }\n\u002B\n\u002B        static void TestRollingEventSequence(\n\u002B            Action\u003Cstring, LoggerSinkConfiguration\u003E configureFile,\n\u002B            IEnumerable\u003CLogEvent\u003E events,\n\u002B            Action\u003CIList\u003Cstring\u003E\u003E verifyWritten = null)\n\u002B        {\n\u002B            var fileName = Some.String() \u002B \u0022-.txt\u0022;\n\u002B            var folder = Some.TempFolderPath();\n\u002B            var pathFormat = Path.Combine(folder, fileName);\n\u002B\n\u002B            var config = new LoggerConfiguration();\n\u002B            configureFile(pathFormat, config.WriteTo);\n\u002B            var log = config.CreateLogger();\n\u002B\n\u002B            var verified = new List\u003Cstring\u003E();\n\u002B\n\u002B            try\n\u002B            {\n\u002B                foreach (var @event in events)\n\u002B                {\n\u002B                    Clock.SetTestDateTimeNow(@event.Timestamp.DateTime);\n\u002B                    log.Write(@event);\n\u002B\n\u002B                    var expected = pathFormat.Replace(\u0022.txt\u0022, @event.Timestamp.ToString(\u0022yyyyMMdd\u0022) \u002B \u0022.txt\u0022);\n\u002B                    Assert.True(System.IO.File.Exists(expected));\n\u002B\n\u002B                    verified.Add(expected);\n\u002B                }\n\u002B            }\n\u002B            finally\n\u002B            {\n\u002B                log.Dispose();\n\u002B                verifyWritten?.Invoke(verified);\n\u002B                Directory.Delete(folder, true);\n\u002B            }\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "2d97d1bbc8f8ad905bbc879f756c6979add4de56",
      "filename": "test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,34 @@\n\u002B\uFEFFusing System;\n\u002Busing Xunit;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests\n\u002B{\n\u002B    public class RollingIntervalExtensionsTests\n\u002B    {\n\u002B        public static object[][] IntervalInstantCurrentNextCheckpoint =\u003E new[]\n\u002B        {\n\u002B            new object[]{ RollingInterval.Infinite, new DateTime(2018, 01, 01),           null, null },\n\u002B            new object[]{ RollingInterval.Year,     new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2019, 01, 01) },\n\u002B            new object[]{ RollingInterval.Year,     new DateTime(2018, 06, 01),           new DateTime(2018, 01, 01), new DateTime(2019, 01, 01) },\n\u002B            new object[]{ RollingInterval.Month,    new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2018, 02, 01) },\n\u002B            new object[]{ RollingInterval.Month,    new DateTime(2018, 01, 14),           new DateTime(2018, 01, 01), new DateTime(2018, 02, 01) },\n\u002B            new object[]{ RollingInterval.Day,      new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2018, 01, 02) },\n\u002B            new object[]{ RollingInterval.Day,      new DateTime(2018, 01, 01, 12, 0, 0), new DateTime(2018, 01, 01), new DateTime(2018, 01, 02) },\n\u002B            new object[]{ RollingInterval.Hour,     new DateTime(2018, 01, 01, 0, 0, 0),  new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 1, 0, 0) },\n\u002B            new object[]{ RollingInterval.Hour,     new DateTime(2018, 01, 01, 0, 30, 0), new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 1, 0, 0) },\n\u002B            new object[]{ RollingInterval.Minute,   new DateTime(2018, 01, 01, 0, 0, 0),  new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 0, 1, 0) },\n\u002B            new object[]{ RollingInterval.Minute,   new DateTime(2018, 01, 01, 0, 0, 30), new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 0, 1, 0) }\n\u002B        };\n\u002B\n\u002B        [Theory]\n\u002B        [MemberData(nameof(IntervalInstantCurrentNextCheckpoint))]\n\u002B        public void NextIntervalTests(RollingInterval interval, DateTime instant, DateTime? currentCheckpoint, DateTime? nextCheckpoint)\n\u002B        {\n\u002B            var current = interval.GetCurrentCheckpoint(instant);\n\u002B            Assert.Equal(currentCheckpoint, current);\n\u002B\n\u002B            var next = interval.GetNextCheckpoint(instant);\n\u002B            Assert.Equal(nextCheckpoint, next);\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "3491e32d731e7267e488215061a55791d99c004b",
      "filename": "test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,36 @@\n\u002B\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\u002B\n\u002B  \u003CPropertyGroup\u003E\n\u002B    \u003CTargetFrameworks\u003Enet452;netcoreapp1.0;netcoreapp2.0\u003C/TargetFrameworks\u003E\n\u002B    \u003CTreatWarningsAsErrors\u003Etrue\u003C/TreatWarningsAsErrors\u003E\n\u002B    \u003CAssemblyName\u003ESerilog.Sinks.File.Tests\u003C/AssemblyName\u003E\n\u002B    \u003CAssemblyOriginatorKeyFile\u003E../../assets/Serilog.snk\u003C/AssemblyOriginatorKeyFile\u003E\n\u002B    \u003CSignAssembly\u003Etrue\u003C/SignAssembly\u003E\n\u002B    \u003CPublicSign Condition=\u0022 \u0027$(OS)\u0027 != \u0027Windows_NT\u0027 \u0022\u003Etrue\u003C/PublicSign\u003E\n\u002B    \u003CPackageId\u003ESerilog.Sinks.RollingFile.Tests\u003C/PackageId\u003E\n\u002B    \u003CGenerateRuntimeConfigurationFiles\u003Etrue\u003C/GenerateRuntimeConfigurationFiles\u003E\n\u002B    \u003CPackageTargetFallback Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netcoreapp1.0\u0027 \u0022\u003E$(PackageTargetFallback);dnxcore50;portable-net45\u002Bwin8\u003C/PackageTargetFallback\u003E\n\u002B    \u003CRuntimeFrameworkVersion Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027netcoreapp1.0\u0027 \u0022\u003E1.0.4\u003C/RuntimeFrameworkVersion\u003E\n\u002B  \u003C/PropertyGroup\u003E\n\u002B\n\u002B  \u003CItemGroup\u003E\n\u002B    \u003CProjectReference Include=\u0022..\\..\\src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup\u003E\n\u002B    \u003CPackageReference Include=\u0022Microsoft.NET.Test.Sdk\u0022 Version=\u002215.0.0\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022xunit.runner.visualstudio\u0022 Version=\u00222.2.0\u0022 /\u003E\n\u002B    \u003CPackageReference Include=\u0022xunit\u0022 Version=\u00222.2.0\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup Condition=\u0022 \u0027$(TargetFramework)\u0027 == \u0027net452\u0027 \u0022\u003E\n\u002B    \u003CReference Include=\u0022System\u0022 /\u003E\n\u002B    \u003CReference Include=\u0022Microsoft.CSharp\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B  \u003CItemGroup\u003E\n\u002B    \u003CService Include=\u0022{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\u0022 /\u003E\n\u002B  \u003C/ItemGroup\u003E\n\u002B\n\u002B\n\u002B\u003C/Project\u003E"
    },
    {
      "sha": "3234f8a6db99c845968fa18ea9c358f8fac03232",
      "filename": "test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,21 \u002B0,0 @@\n-\uFEFF\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u003E\n-\u003CProject ToolsVersion=\u002214.0\u0022 DefaultTargets=\u0022Build\u0022 xmlns=\u0022http://schemas.microsoft.com/developer/msbuild/2003\u0022\u003E\n-  \u003CPropertyGroup\u003E\n-    \u003CVisualStudioVersion Condition=\u0022\u0027$(VisualStudioVersion)\u0027 == \u0027\u0027\u0022\u003E14.0\u003C/VisualStudioVersion\u003E\n-    \u003CVSToolsPath Condition=\u0022\u0027$(VSToolsPath)\u0027 == \u0027\u0027\u0022\u003E$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\u003C/VSToolsPath\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DNX\\Microsoft.DNX.Props\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-  \u003CPropertyGroup Label=\u0022Globals\u0022\u003E\n-    \u003CProjectGuid\u003E3c2d8e01-5580-426a-bdd9-ec59cd98e618\u003C/ProjectGuid\u003E\n-    \u003CRootNamespace\u003ESerilog.Tests\u003C/RootNamespace\u003E\n-    \u003CBaseIntermediateOutputPath Condition=\u0022\u0027$(BaseIntermediateOutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\obj\u003C/BaseIntermediateOutputPath\u003E\n-    \u003COutputPath Condition=\u0022\u0027$(OutputPath)\u0027==\u0027\u0027 \u0022\u003E.\\bin\\\u003C/OutputPath\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CPropertyGroup\u003E\n-    \u003CSchemaVersion\u003E2.0\u003C/SchemaVersion\u003E\n-  \u003C/PropertyGroup\u003E\n-  \u003CItemGroup\u003E\n-    \u003CService Include=\u0022{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\u0022 /\u003E\n-  \u003C/ItemGroup\u003E\n-  \u003CImport Project=\u0022$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\u0022 Condition=\u0022\u0027$(VSToolsPath)\u0027 != \u0027\u0027\u0022 /\u003E\n-\u003C/Project\u003E\n\\ No newline at end of file"
    },
    {
      "sha": "565be9bf4329a1db4d4677ea83cb166f2598a8e5",
      "filename": "test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -2,7 \u002B2,8 @@\n using Xunit;\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File.Tests.Support;\n-using Serilog.Tests.Support;\n\u002B\n\u002B#pragma warning disable 618\n \n namespace Serilog.Sinks.File.Tests\n {"
    },
    {
      "sha": "244ae5cad83a68cbf863fba666bea2879eae4809",
      "filename": "test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,21 @@\n\u002B\uFEFFusing System.Collections.Generic;\n\u002Busing System.Linq;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    class CollectingSink : ILogEventSink\n\u002B    {\n\u002B        readonly List\u003CLogEvent\u003E _events = new List\u003CLogEvent\u003E();\n\u002B\n\u002B        public List\u003CLogEvent\u003E Events { get { return _events; } }\n\u002B\n\u002B        public LogEvent SingleEvent { get { return _events.Single(); } }\n\u002B \n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            _events.Add(logEvent);\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "3ac997449f0698aca8719dab75ebd523e5cc8c89",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,24 @@\n\u002Busing System;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    public class DelegateDisposable : IDisposable\n\u002B    {\n\u002B        private readonly Action _disposeAction;\n\u002B        private bool _disposed;\n\u002B\n\u002B        public DelegateDisposable(Action disposeAction)\n\u002B        {\n\u002B            _disposeAction = disposeAction;\n\u002B        }\n\u002B\n\u002B        public void Dispose()\n\u002B        {\n\u002B            if (_disposed)\n\u002B                return;\n\u002B\n\u002B            _disposeAction();\n\u002B            _disposed = true;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "0a480fb770801108661f407bf332e94fa02ecbe6",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,22 @@\n\u002B\uFEFFusing System;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    class DelegatingEnricher : ILogEventEnricher\n\u002B    {\n\u002B        readonly Action\u003CLogEvent, ILogEventPropertyFactory\u003E _enrich;\n\u002B\n\u002B        public DelegatingEnricher(Action\u003CLogEvent, ILogEventPropertyFactory\u003E enrich)\n\u002B        {\n\u002B            if (enrich == null) throw new ArgumentNullException(nameof(enrich));\n\u002B            _enrich = enrich;\n\u002B        }\n\u002B\n\u002B        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n\u002B        {\n\u002B            _enrich(logEvent, propertyFactory);\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "9d81cc21f9956c5bec67f38c2089ad9a7622bc22",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,33 @@\n\u002B\uFEFFusing System;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    public class DelegatingSink : ILogEventSink\n\u002B    {\n\u002B        readonly Action\u003CLogEvent\u003E _write;\n\u002B\n\u002B        public DelegatingSink(Action\u003CLogEvent\u003E write)\n\u002B        {\n\u002B            if (write == null) throw new ArgumentNullException(nameof(write));\n\u002B            _write = write;\n\u002B        }\n\u002B\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {\n\u002B            _write(logEvent);\n\u002B        }\n\u002B\n\u002B        public static LogEvent GetLogEvent(Action\u003CILogger\u003E writeAction)\n\u002B        {\n\u002B            LogEvent result = null;\n\u002B            var l = new LoggerConfiguration()\n\u002B                .WriteTo.Sink(new DelegatingSink(le =\u003E result = le))\n\u002B                .CreateLogger();\n\u002B\n\u002B            writeAction(l);\n\u002B            return result;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "befcbd489c4ceee07617cce2dbd6d1d4df29974d",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "status": "added",
      "additions": 422,
      "deletions": 0,
      "changes": 422,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,422 @@\n\u002B\uFEFFusing System;\n\u002Busing System.Collections.Generic;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    public class DisposableLogger : ILogger, IDisposable\n\u002B    {\n\u002B        public bool Disposed { get; set; }\n\u002B\n\u002B        public void Dispose()\n\u002B        {\n\u002B            Disposed = true;\n\u002B        }\n\u002B\n\u002B        public ILogger ForContext(ILogEventEnricher enricher)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public ILogger ForContext(IEnumerable\u003CILogEventEnricher\u003E enrichers)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public ILogger ForContext(string propertyName, object value, bool destructureObjects = false)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public ILogger ForContext\u003CTSource\u003E()\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public ILogger ForContext(Type source)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write(LogEvent logEvent)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write(LogEventLevel level, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT\u003E(LogEventLevel level, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT0, T1\u003E(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT0, T1, T2\u003E(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write(LogEventLevel level, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write(LogEventLevel level, Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT\u003E(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT0, T1\u003E(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0,\n\u002B            T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write\u003CT0, T1, T2\u003E(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0,\n\u002B            T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Write(LogEventLevel level, Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public bool IsEnabled(LogEventLevel level)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Verbose(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Debug(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Information(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Warning(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Error(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal(string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT\u003E(string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT0, T1\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT0, T1, T2\u003E(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal(string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal(Exception exception, string messageTemplate)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT\u003E(Exception exception, string messageTemplate, T propertyValue)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT0, T1\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal\u003CT0, T1, T2\u003E(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n\u002B            T2 propertyValue2)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public void Fatal(Exception exception, string messageTemplate, params object[] propertyValues)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public bool BindMessageTemplate(string messageTemplate, object[] propertyValues, out MessageTemplate parsedTemplate,\n\u002B            out IEnumerable\u003CLogEventProperty\u003E boundProperties)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B\n\u002B        public bool BindProperty(string propertyName, object value, bool destructureObjects, out LogEventProperty property)\n\u002B        {\n\u002B            throw new NotImplementedException();\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "29cac56b6f1b361ccd36d2b96301636daa99f4ab",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,20 @@\n\u002B\uFEFFusing System;\n\u002Busing Serilog.Core;\n\u002Busing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    class DisposeTrackingSink : ILogEventSink, IDisposable\n\u002B    {\n\u002B        public bool IsDisposed { get; set; }\n\u002B\n\u002B        public void Emit(LogEvent logEvent)\n\u002B        {            \n\u002B        }\n\u002B\n\u002B        public void Dispose()\n\u002B        {\n\u002B            IsDisposed = true;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "a31122d5f5525f401a57d866b6290b7f5f6f47f0",
      "filename": "test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/Extensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,12 @@\n\u002B\uFEFFusing Serilog.Events;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n\u002B{\n\u002B    public static class Extensions\n\u002B    {\n\u002B        public static object LiteralValue(this LogEventPropertyValue @this)\n\u002B        {\n\u002B            return ((ScalarValue)@this).Value;\n\u002B        }\n\u002B    }\n\u002B}"
    },
    {
      "sha": "2d29d4d513c0d72f213153365c1d9b09ab1909f0",
      "filename": "test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "status": "modified",
      "additions": 80,
      "deletions": 1,
      "changes": 81,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/Some.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,12 \u002B1,48 @@\n \uFEFFusing System;\n using System.Collections.Generic;\n\u002Busing System.IO;\n\u002Busing System.Linq;\n\u002Busing System.Threading;\n using Serilog.Events;\n\u002Busing Serilog.Parsing;\n using Xunit.Sdk;\n \n-namespace Serilog.Tests.Support\n\u002Bnamespace Serilog.Sinks.File.Tests.Support\n {\n     static class Some\n     {\n\u002B        static int _counter;\n\u002B\n\u002B        public static int Int()\n\u002B        {\n\u002B            return Interlocked.Increment(ref _counter);\n\u002B        }\n\u002B\n\u002B        public static decimal Decimal()\n\u002B        {\n\u002B            return Int() \u002B 0.123m;\n\u002B        }\n\u002B\n\u002B        public static string String(string tag = null)\n\u002B        {\n\u002B            return (tag ?? \u0022\u0022) \u002B \u0022__\u0022 \u002B Int();\n\u002B        }\n\u002B\n\u002B        public static TimeSpan TimeSpan()\n\u002B        {\n\u002B            return System.TimeSpan.FromMinutes(Int());\n\u002B        }\n\u002B\n\u002B        public static DateTime Instant()\n\u002B        {\n\u002B            return new DateTime(2012, 10, 28) \u002B TimeSpan();\n\u002B        }\n\u002B\n\u002B        public static DateTimeOffset OffsetInstant()\n\u002B        {\n\u002B            return new DateTimeOffset(Instant());\n\u002B        }\n\u002B\n         public static LogEvent LogEvent(string messageTemplate, params object[] propertyValues)\n         {\n             var log = new LoggerConfiguration().CreateLogger();\n@@ -20,5 \u002B56,48 @@ public static LogEvent LogEvent(string messageTemplate, params object[] property\n             }\n             return new LogEvent(DateTimeOffset.Now, LogEventLevel.Information, null, template, properties);\n         }\n\u002B\n\u002B        public static LogEvent LogEvent(DateTimeOffset? timestamp = null, LogEventLevel level = LogEventLevel.Information)\n\u002B        {\n\u002B            return new LogEvent(timestamp ?? OffsetInstant(), level,\n\u002B                null, MessageTemplate(), Enumerable.Empty\u003CLogEventProperty\u003E());\n\u002B        }\n\u002B\n\u002B        public static LogEvent InformationEvent(DateTimeOffset? timestamp = null)\n\u002B        {\n\u002B            return LogEvent(timestamp, LogEventLevel.Information);\n\u002B        }\n\u002B\n\u002B        public static LogEvent DebugEvent(DateTimeOffset? timestamp = null)\n\u002B        {\n\u002B            return LogEvent(timestamp, LogEventLevel.Debug);\n\u002B        }\n\u002B\n\u002B        public static LogEventProperty LogEventProperty()\n\u002B        {\n\u002B            return new LogEventProperty(String(), new ScalarValue(Int()));\n\u002B        }\n\u002B\n\u002B        public static string NonexistentTempFilePath()\n\u002B        {\n\u002B            return Path.Combine(Path.GetTempPath(), Guid.NewGuid() \u002B \u0022.txt\u0022);\n\u002B        }\n\u002B\n\u002B        public static string TempFilePath()\n\u002B        {\n\u002B            return Path.GetTempFileName();\n\u002B        }\n\u002B\n\u002B        public static string TempFolderPath()\n\u002B        {\n\u002B            var dir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());\n\u002B            Directory.CreateDirectory(dir);\n\u002B            return dir;\n\u002B        }\n\u002B\n\u002B        public static MessageTemplate MessageTemplate()\n\u002B        {\n\u002B            return new MessageTemplateParser().Parse(String());\n\u002B        }\n     }\n }"
    },
    {
      "sha": "7ff90f85cdecb3bc7a20b227526c56e1f952bd0c",
      "filename": "test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -11,13 \u002B11,13 @@ class TempFolder : IDisposable\n \n         readonly string _tempFolder;\n \n-        public TempFolder(string name)\n\u002B        public TempFolder(string name = null)\n         {\n             _tempFolder = System.IO.Path.Combine(\n-                Environment.GetEnvironmentVariable(\u0022TMP\u0022),\n\u002B                Environment.GetEnvironmentVariable(\u0022TMP\u0022) ?? Environment.GetEnvironmentVariable(\u0022TMPDIR\u0022) ?? \u0022/tmp\u0022,\n                 \u0022Serilog.Sinks.File.Tests\u0022,\n                 Session.ToString(\u0022n\u0022),\n-                name);\n\u002B                name ?? Guid.NewGuid().ToString(\u0022n\u0022));\n \n             Directory.CreateDirectory(_tempFolder);\n         }"
    },
    {
      "sha": "5e1b015d6e694d8c66db88df3b4dc444d92f17e3",
      "filename": "test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "status": "added",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 \u002B1,104 @@\n\u002B\uFEFFusing System;\n\u002Busing System.IO;\n\u002Busing System.Linq;\n\u002Busing Xunit;\n\u002B\n\u002Bnamespace Serilog.Sinks.File.Tests\n\u002B{\n\u002B    public class PathRollerTests\n\u002B    {\n\u002B        [Fact]\n\u002B        public void TheLogFileIncludesDateToken()\n\u002B        {\n\u002B            var roller = new PathRoller(Path.Combine(\u0022Logs\u0022, \u0022log-.txt\u0022), RollingInterval.Day);\n\u002B            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n\u002B            string path;\n\u002B            roller.GetLogFilePath(now, null, out path);\n\u002B            AssertEqualAbsolute(Path.Combine(\u0022Logs\u0022, \u0022log-20130714.txt\u0022), path);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void ANonZeroIncrementIsIncludedAndPadded()\n\u002B        {\n\u002B            var roller = new PathRoller(Path.Combine(\u0022Logs\u0022, \u0022log-.txt\u0022), RollingInterval.Day);\n\u002B            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n\u002B            string path;\n\u002B            roller.GetLogFilePath(now, 12, out path);\n\u002B            AssertEqualAbsolute(Path.Combine(\u0022Logs\u0022, \u0022log-20130714_012.txt\u0022), path);\n\u002B        }\n\u002B\n\u002B        static void AssertEqualAbsolute(string path1, string path2)\n\u002B        {\n\u002B            var abs1 = Path.GetFullPath(path1);\n\u002B            var abs2 = Path.GetFullPath(path2);\n\u002B            Assert.Equal(abs1, abs2);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void TheRollerReturnsTheLogFileDirectory()\n\u002B        {\n\u002B            var roller = new PathRoller(Path.Combine(\u0022Logs\u0022, \u0022log-.txt\u0022), RollingInterval.Day);\n\u002B            AssertEqualAbsolute(\u0022Logs\u0022, roller.LogFileDirectory);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void TheLogFileIsNotRequiredToIncludeAnExtension()\n\u002B        {\n\u002B            var roller = new PathRoller(Path.Combine(\u0022Logs\u0022, \u0022log-\u0022), RollingInterval.Day);\n\u002B            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n\u002B            string path;\n\u002B            roller.GetLogFilePath(now, null, out path);\n\u002B            AssertEqualAbsolute(Path.Combine(\u0022Logs\u0022, \u0022log-20130714\u0022), path);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void TheLogFileIsNotRequiredToIncludeADirectory()\n\u002B        {\n\u002B            var roller = new PathRoller(\u0022log-\u0022, RollingInterval.Day);\n\u002B            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n\u002B            string path;\n\u002B            roller.GetLogFilePath(now, null, out path);\n\u002B            AssertEqualAbsolute(\u0022log-20130714\u0022, path);\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void MatchingExcludesSimilarButNonmatchingFiles()\n\u002B        {\n\u002B            var roller = new PathRoller(\u0022log-.txt\u0022, RollingInterval.Day);\n\u002B            const string similar1 = \u0022log-0.txt\u0022;\n\u002B            const string similar2 = \u0022log-helloyou.txt\u0022;\n\u002B            var matched = roller.SelectMatches(new[] { similar1, similar2 });\n\u002B            Assert.Equal(0, matched.Count());\n\u002B        }\n\u002B\n\u002B        [Fact]\n\u002B        public void TheDirectorSearchPatternUsesWildcardInPlaceOfDate()\n\u002B        {\n\u002B            var roller = new PathRoller(Path.Combine(\u0022Logs\u0022, \u0022log-.txt\u0022), RollingInterval.Day);\n\u002B            Assert.Equal(\u0022log-*.txt\u0022, roller.DirectorySearchPattern);\n\u002B        }\n\u002B\n\u002B        [Theory]\n\u002B        [InlineData(\u0022log-.txt\u0022, \u0022log-20131210.txt\u0022, \u0022log-20131210_031.txt\u0022, RollingInterval.Day)]\n\u002B        [InlineData(\u0022log-.txt\u0022, \u0022log-2013121013.txt\u0022, \u0022log-2013121013_031.txt\u0022, RollingInterval.Hour)]\n\u002B        public void MatchingSelectsFiles(string template, string zeroth, string thirtyFirst, RollingInterval interval)\n\u002B        {\n\u002B            var roller = new PathRoller(template, interval);\n\u002B            var matched = roller.SelectMatches(new[] { zeroth, thirtyFirst }).ToArray();\n\u002B            Assert.Equal(2, matched.Length);\n\u002B            Assert.Equal(null, matched[0].SequenceNumber);\n\u002B            Assert.Equal(31, matched[1].SequenceNumber);\n\u002B        }\n\u002B\n\u002B        [Theory]\n\u002B        [InlineData(\u0022log-.txt\u0022, \u0022log-20150101.txt\u0022, \u0022log-20141231.txt\u0022, RollingInterval.Day)]\n\u002B        [InlineData(\u0022log-.txt\u0022, \u0022log-2015010110.txt\u0022, \u0022log-2015010109.txt\u0022, RollingInterval.Hour)]\n\u002B        public void MatchingParsesSubstitutions(string template, string newer, string older, RollingInterval interval)\n\u002B        {\n\u002B            var roller = new PathRoller(template, interval);\n\u002B            var matched = roller.SelectMatches(new[] { older, newer }).OrderByDescending(m =\u003E m.DateTime).Select(m =\u003E m.Filename).ToArray();\n\u002B            Assert.Equal(new[] { newer, older }, matched);\n\u002B        }\n\u002B    }\n\u002B}\n\u002B"
    },
    {
      "sha": "3f14b0e649f30810f330fc591210ee616eb9669c",
      "filename": "test/Serilog.Sinks.File.Tests/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 24,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,24 \u002B0,0 @@\n-{\n-  \u0022testRunner\u0022: \u0022xunit\u0022,\n-  \u0022dependencies\u0022: {\n-    \u0022Serilog.Sinks.File\u0022: { \u0022target\u0022: \u0022project\u0022 },\n-    \u0022xunit\u0022: \u00222.1.0\u0022,\n-    \u0022dotnet-test-xunit\u0022: \u00221.0.0-rc2-build10025\u0022\n-  },\n-  \u0022frameworks\u0022: {\n-    \u0022netcoreapp1.0\u0022: {\n-      \u0022dependencies\u0022: {\n-        \u0022Microsoft.NETCore.App\u0022: {\n-          \u0022type\u0022: \u0022platform\u0022,\n-          \u0022version\u0022: \u00221.0.0\u0022\n-        }\n-      },\n-      \u0022imports\u0022: [\n-        \u0022dnxcore50\u0022,\n-        \u0022portable-net45\u002Bwin8\u0022\n-      ]\n-    },\n-    \u0022net4.5.2\u0022: {\n-    }\n-  }\n-}"
    }
  ]
}