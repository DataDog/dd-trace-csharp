{
  "sha": "6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "node_id": "MDY6Q29tbWl0NTM0NzIxMzE6NmQ0NjNjMDUwYjI2ZWEwNTJjODJhZjlkN2ZhZmEwYzZlNGI3ZTUwZA==",
  "commit": {
    "author": {
      "name": "Nicholas Blumhardt",
      "email": "nblumhardt@nblumhardt.com",
      "date": "2017-10-30T01:29:33Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2017-10-30T01:29:33Z"
    },
    "message": "Merge pull request #37 from serilog/dev\n\n4.0.0 Release",
    "tree": {
      "sha": "8b7100bbfb41fc47363ba1f458baa52984334ed3",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/git/trees/8b7100bbfb41fc47363ba1f458baa52984334ed3"
    },
    "url": "https://api.github.com/repos/serilog/serilog-sinks-file/git/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ9oB9CRBK7hj4Ov3rIwAAdHIIAAvhaShpq9uaShpS/zWZiKyG\n2Awd2mayevjMXUep06V1acHEd8CrvNBha8q/m/KGCI3sX3NjLFZs1WNV8skuClf9\nGE1+VhSwYeTbkuht77TNgHEw0i57KCAr7XbSU+aCLoqxIeTL9Bm7xYFX6YJ9/+8q\nP/OkxKTuosqFCcqf7Qyrl4uF58raCS0JxrirQkr0hIeAPji4YlaoQ3YmcbP0Fv/m\nXXPONVvqO9A3s2VaN59qxq4cOgnu01U5lIRSkminRcZTvW79AbxhqwMyeTtRh2cH\n7HnYFJy0PIDm2nzADGKcj2PAflDBCiLkp5ovGDlj5u9vyoEyPTvrZIBzxv76kz0=\n=v7NH\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 8b7100bbfb41fc47363ba1f458baa52984334ed3\nparent c8418ed96ad8c02fa4b472b03459153175adb4d6\nparent 3e0510ccd57777f8641267fed7b17040d6ed2f2c\nauthor Nicholas Blumhardt <nblumhardt@nblumhardt.com> 1509326973 +1000\ncommitter GitHub <noreply@github.com> 1509326973 +1000\n\nMerge pull request #37 from serilog/dev\n\n4.0.0 Release"
    }
  },
  "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "html_url": "https://github.com/serilog/serilog-sinks-file/commit/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
  "comments_url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/comments",
  "author": {
    "login": "nblumhardt",
    "id": 342712,
    "node_id": "MDQ6VXNlcjM0MjcxMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/342712?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nblumhardt",
    "html_url": "https://github.com/nblumhardt",
    "followers_url": "https://api.github.com/users/nblumhardt/followers",
    "following_url": "https://api.github.com/users/nblumhardt/following{/other_user}",
    "gists_url": "https://api.github.com/users/nblumhardt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nblumhardt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nblumhardt/subscriptions",
    "organizations_url": "https://api.github.com/users/nblumhardt/orgs",
    "repos_url": "https://api.github.com/users/nblumhardt/repos",
    "events_url": "https://api.github.com/users/nblumhardt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nblumhardt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "html_url": "https://github.com/serilog/serilog-sinks-file/commit/c8418ed96ad8c02fa4b472b03459153175adb4d6"
    },
    {
      "sha": "3e0510ccd57777f8641267fed7b17040d6ed2f2c",
      "url": "https://api.github.com/repos/serilog/serilog-sinks-file/commits/3e0510ccd57777f8641267fed7b17040d6ed2f2c",
      "html_url": "https://github.com/serilog/serilog-sinks-file/commit/3e0510ccd57777f8641267fed7b17040d6ed2f2c"
    }
  ],
  "stats": {
    "total": 2426,
    "additions": 2121,
    "deletions": 305
  },
  "files": [
    {
      "sha": "6a880da5aee9524ab8caa0f4d626aa9ae9d43016",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 7,
      "deletions": 45,
      "changes": 52,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/.travis.yml",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/.travis.yml",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/.travis.yml?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,49 +1,11 @@\n language: csharp\n \n-#dotnet cli require Ubuntu 14.04\n-sudo: required\n-dist: trusty\n-\n-#dotnet cli require OSX 10.10\n-osx_image: xcode7.1\n-\n-addons:\n-  apt:\n-    packages:\n-    - gettext\n-    - libcurl4-openssl-dev\n-    - libicu-dev\n-    - libssl-dev\n-    - libunwind8\n-    - zlib1g\n-\n-os:\n-  - linux\n-\n-env:\n-  global:\n-    - DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\n-    - TMP: /tmp\n-\n-  matrix: \n-    - CLI_VERSION=1.0.0-preview2-003121\n-    - CLI_VERSION=Latest\n-\n matrix:\n-  allow_failures:\n-    - env: CLI_VERSION=Latest\n-\n-before_install:\n-  - if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; brew link --force openssl; fi\n-  # Download script to install dotnet cli\n-  - if test \"$CLI_OBTAIN_URL\" == \"\"; then export CLI_OBTAIN_URL=\"https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.sh\"; fi\n-  - curl -L --create-dirs $CLI_OBTAIN_URL -o ./scripts/obtain/install.sh\n-  - find ./scripts -name \"*.sh\" -exec chmod +x {} \\;\n-  - export DOTNET_INSTALL_DIR=\"$PWD/.dotnetcli\"\n-  # use bash to workaround bug https://github.com/dotnet/cli/issues/1725\n-  - sudo bash ./scripts/obtain/install.sh --channel \"preview\" --version \"$CLI_VERSION\" --install-dir \"$DOTNET_INSTALL_DIR\" --no-path\n-  # add dotnet to PATH\n-  - export PATH=\"$DOTNET_INSTALL_DIR:$PATH\"\n-\n+  include:\n+    - os: linux\n+      dist: trusty\n+      sudo: required\n+      dotnet: 2.0.0\n+      group: edge\n script:\n-  - ./build.sh\n\\ No newline at end of file\n+  - ./build.sh"
    },
    {
      "sha": "ee4117d648f6e200fd9de2dee1040dac8cf4217e",
      "filename": "Build.ps1",
      "status": "modified",
      "additions": 25,
      "deletions": 6,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/Build.ps1",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/Build.ps1",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/Build.ps1?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,27 +1,46 @@\n+echo \"build: Build started\"\n+\n Push-Location $PSScriptRoot\n \n-if(Test-Path .\\artifacts) { Remove-Item .\\artifacts -Force -Recurse }\n+if(Test-Path .\\artifacts) {\n+\techo \"build: Cleaning .\\artifacts\"\n+\tRemove-Item .\\artifacts -Force -Recurse\n+}\n \n & dotnet restore --no-cache\n \n $branch = @{ $true = $env:APPVEYOR_REPO_BRANCH; $false = $(git symbolic-ref --short -q HEAD) }[$env:APPVEYOR_REPO_BRANCH -ne $NULL];\n $revision = @{ $true = \"{0:00000}\" -f [convert]::ToInt32(\"0\" + $env:APPVEYOR_BUILD_NUMBER, 10); $false = \"local\" }[$env:APPVEYOR_BUILD_NUMBER -ne $NULL];\n-$suffix = @{ $true = \"\"; $false = \"$branch-$revision\"}[$branch -eq \"master\" -and $revision -ne \"local\"]\n+$suffix = @{ $true = \"\"; $false = \"$($branch.Substring(0, [math]::Min(10,$branch.Length)))-$revision\"}[$branch -eq \"master\" -and $revision -ne \"local\"]\n+$commitHash = $(git rev-parse --short HEAD)\n+$buildSuffix = @{ $true = \"$($suffix)-$($commitHash)\"; $false = \"$($branch)-$($commitHash)\" }[$suffix -ne \"\"]\n+\n+echo \"build: Package version suffix is $suffix\"\n+echo \"build: Build version suffix is $buildSuffix\" \n \n-foreach ($src in ls src/Serilog.*) {\n+foreach ($src in ls src/*) {\n     Push-Location $src\n \n-    & dotnet pack -c Release -o ..\\..\\.\\artifacts --version-suffix=$suffix\n+\techo \"build: Packaging project in $src\"\n+\n+    & dotnet build -c Release --version-suffix=$buildSuffix\n+    if ($suffix) {\n+        & dotnet pack -c Release --include-source -o ..\\..\\artifacts --version-suffix=$suffix --no-build\n+    } else {\n+        & dotnet pack -c Release --include-source -o ..\\..\\artifacts --no-build\n+    }\n     if($LASTEXITCODE -ne 0) { exit 1 }    \n \n     Pop-Location\n }\n \n-foreach ($test in ls test/Serilog.*.Tests) {\n+foreach ($test in ls test/*.Tests) {\n     Push-Location $test\n \n+\techo \"build: Testing project in $test\"\n+\n     & dotnet test -c Release\n-    if($LASTEXITCODE -ne 0) { exit 2 }\n+    if($LASTEXITCODE -ne 0) { exit 3 }\n \n     Pop-Location\n }"
    },
    {
      "sha": "87596a7f1e210f3266de8916306fd3781de7d389",
      "filename": "README.md",
      "status": "modified",
      "additions": 155,
      "deletions": 14,
      "changes": 169,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/README.md",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/README.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/README.md?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,53 +1,194 @@\n # Serilog.Sinks.File [![Build status](https://ci.appveyor.com/api/projects/status/hh9gymy0n6tne46j?svg=true)](https://ci.appveyor.com/project/serilog/serilog-sinks-file) [![Travis build](https://travis-ci.org/serilog/serilog-sinks-file.svg)](https://travis-ci.org/serilog/serilog-sinks-file) [![NuGet Version](http://img.shields.io/nuget/v/Serilog.Sinks.File.svg?style=flat)](https://www.nuget.org/packages/Serilog.Sinks.File/) [![Documentation](https://img.shields.io/badge/docs-wiki-yellow.svg)](https://github.com/serilog/serilog/wiki) [![Join the chat at https://gitter.im/serilog/serilog](https://img.shields.io/gitter/room/serilog/serilog.svg)](https://gitter.im/serilog/serilog)\n \n-Writes [Serilog](https://serilog.net) events to a text file.\n+Writes [Serilog](https://serilog.net) events to one or more text files.\n+\n+### Getting started\n+\n+Install the [Serilog.Sinks.File](https://nuget.org/serilog/serilog-sinks-file) package from NuGet:\n+\n+```powershell\n+Install-Package Serilog.Sinks.File\n+```\n+\n+To configure the sink in C# code, call `WriteTo.File()` during logger configuration:\n \n ```csharp\n var log = new LoggerConfiguration()\n-    .WriteTo.File(\"log.txt\")\n+    .WriteTo.File(\"log.txt\", rollingInterval: RollingInterval.Day)\n     .CreateLogger();\n ```\n \n+This will append the time period to the filename, creating a file set like:\n+\n+```\n+log20180631.txt\n+log20180701.txt\n+log20180702.txt\n+```\n+\n+> **Important**: By default, only one process may write to a log file at a given time. See _Shared log files_ below for information on multi-process sharing.\n+\n+### Limits\n+\n To avoid bringing down apps with runaway disk usage the file sink **limits file size to 1GB by default**. The limit can be increased or removed using the `fileSizeLimitBytes` parameter.\n \n ```csharp\n     .WriteTo.File(\"log.txt\", fileSizeLimitBytes: null)\n ```\n \n-> **Important:** By default only one process may use a log file at a given time. See _Shared log files_ below if multi-process logging is required. \n+For the same reason, only **the most recent 31 files** are retained by default (i.e. one long month). To change or remove this limit, pass the `retainedFileCountLimit` parameter.\n+\n+```csharp\n+    .WriteTo.RollingFile(\"log.txt\", rollingInterval: RollingInterval.Day, retainedFileCountLimit: null)\n+```\n+\n+### Rolling policies\n+\n+To create a log file per day or other time period, specify a `rollingInterval` as shown in the examples above.\n+\n+To roll when the file reaches `fileSizeLimitBytes`, specify `rollOnFileSizeLimit`:\n+\n+```csharp\n+    .WriteTo.File(\"log.txt\", rollOnFileSizeLimit: true)\n+```\n+\n+This will create a file set like:\n+\n+```\n+log.txt\n+log_001.txt\n+log_002.txt\n+```\n+\n+Specifying both `rollingInterval` and `rollOnFileSizeLimit` will cause both policies to be applied, while specifying neither will result in all events being written to a single file.\n+\n+Old files will be cleaned up as per `retainedFileCountLimit` - the default is 31.\n+\n+### XML `<appSettings>` configuration\n+\n+To use the file sink with the [Serilog.Settings.AppSettings](https://github.com/serilog/serilog-settings-appsettings) package, first install that package if you haven't already done so:\n+\n+```powershell\n+Install-Package Serilog.Settings.AppSettings\n+```\n+\n+Instead of configuring the logger in code, call `ReadFrom.AppSettings()`:\n+\n+```csharp\n+var log = new LoggerConfiguration()\n+    .ReadFrom.AppSettings()\n+    .CreateLogger();\n+```\n+\n+In your application's `App.config` or `Web.config` file, specify the file sink assembly and required path format under the `<appSettings>` node:\n+\n+```xml\n+<configuration>\n+  <appSettings>\n+    <add key=\"serilog:using:File\" value=\"Serilog.Sinks.File\" />\n+    <add key=\"serilog:write-to:File.pathFormat\" value=\"log.txt\" />\n+```\n+\n+The parameters that can be set through the `serilog:write-to:File` keys are the method parameters accepted by the `WriteTo.File()` configuration method. This means, for example, that the `fileSizeLimitBytes` parameter can be set with:\n+\n+```xml\n+    <add key=\"serilog:write-to:File.fileSizeLimitBytes\" value=\"1234567\" />\n+```\n+\n+Omitting the `value` will set the parameter to `null`:\n \n-### `<appSettings>` configuration\n+```xml\n+    <add key=\"serilog:write-to:File.fileSizeLimitBytes\" />\n+```\n \n-The sink can be configured in XML [app-settings format](https://github.com/serilog/serilog/wiki/AppSettings) if the _Serilog.Settings.AppSettings_ package is in use:\n+In XML and JSON configuration formats, environment variables can be used in setting values. This means, for instance, that the log file path can be based on `TMP` or `APPDATA`:\n \n ```xml\n-<add key=\"serilog:using:File\" value=\"Serilog.Sinks.File\" />\n-<add key=\"serilog:write-to:File.path\" value=\"log.txt\" />\n-<add key=\"serilog:write-to:File.fileSizeLimitBytes\" value=\"\" />\n+    <add key=\"serilog:write-to:File.path\" value=\"%APPDATA%\\MyApp\\log.txt\" />\n+```\n+\n+### JSON `appsettings.json` configuration\n+\n+To use the file sink with _Microsoft.Extensions.Configuration_, for example with ASP.NET Core or .NET Core, use the [Serilog.Settings.Configuration](https://github.com/serilog/serilog-settings-configuration) package. First install that package if you have not already done so:\n+\n+```powershell\n+Install-Package Serilog.Settings.Configuration\n+```\n+\n+Instead of configuring the file directly in code, call `ReadFrom.Configuration()`:\n+\n+```csharp\n+var configuration = new ConfigurationBuilder()\n+    .AddJsonFile(\"appsettings.json\")\n+    .Build();\n+\n+var logger = new LoggerConfiguration()\n+    .ReadFrom.Configuration(configuration)\n+    .CreateLogger();\n ```\n \n-### JSON formatting\n+In your `appsettings.json` file, under the `Serilog` node, :\n \n-To emit JSON, rather than plain text, a formatter can be specified:\n+```json\n+{\n+  \"Serilog\": {\n+    \"WriteTo\": [\n+      { \"Name\": \"File\", \"Args\": { \"path\": \"log.txt\", \"rollingInterval\": \"Day\" } }\n+    ]\n+  }\n+}\n+```\n+\n+See the XML `<appSettings>` example above for a discussion of available `Args` options.\n+\n+### Controlling event formatting\n+\n+The file sink creates events in a fixed text format by default:\n+\n+```\n+2018-07-06 09:02:17.148 +10:00 [INF] HTTP GET / responded 200 in 1994 ms\n+```\n+\n+The format is controlled using an _output template_, which the file configuration method accepts as an `outputTemplate` parameter.\n+\n+The default format above corresponds to an output template like:\n \n ```csharp\n-    .WriteTo.File(new JsonFormatter(), \"log.txt\")\n+    .WriteTo.File(\"log.txt\",\n+        outputTemplate: \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{u3}] {Message:lj}{NewLine}{Exception}\")\n ```\n \n-To configure an alternative formatter in XML `<appSettings>`, specify the formatter's assembly-qualified type name as the setting `value`.\n+##### JSON event formatting\n+\n+To write events to the file in an alternative format such as [JSON](https://github.com/serilog/serilog-formatting-compact), pass an `ITextFormatter` as the first argument:\n+\n+```csharp\n+    // Install-Package Serilog.Formatting.Compact\n+    .WriteTo.File(new CompactJsonFormatter(), \"log.txt\")\n+```\n \n ### Shared log files\n \n-Multiple processes can concurrently write to the same log file if the `shared` parameter is set to `true`:\n+To enable multi-process shared log files, set `shared` to `true`:\n \n ```csharp\n     .WriteTo.File(\"log.txt\", shared: true)\n ```\n \n+### Auditing\n+\n+The file sink can operate as an audit file through `AuditTo`:\n+\n+```csharp\n+    .AuditTo.File(\"audit.txt\")\n+```\n+\n+Only a limited subset of configuration options are currently available in this mode.\n+\n ### Performance\n \n By default, the file sink will flush each event written through it to disk. To improve write performance, specifying `buffered: true` will permit the underlying stream to buffer writes.\n \n-The [Serilog.Sinks.Async](https://github.com/serilog/serilog-sinks-async) package can be used to wrap the file sink and perform all disk accss on a background worker thread.\n+The [Serilog.Sinks.Async](https://github.com/serilog/serilog-sinks-async) package can be used to wrap the file sink and perform all disk access on a background worker thread.\n \n _Copyright &copy; 2016 Serilog Contributors - Provided under the [Apache License, Version 2.0](http://apache.org/licenses/LICENSE-2.0.html)._"
    },
    {
      "sha": "7e5f9b5ee0b8bbce73a62bc3a954c3b17973459f",
      "filename": "appveyor.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/appveyor.yml",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/appveyor.yml",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/appveyor.yml?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,13 +1,9 @@\n version: '{build}'\n skip_tags: true\n-image: Visual Studio 2015\n+image: Visual Studio 2017\n configuration: Release\n install:\n   - ps: mkdir -Force \".\\build\\\" | Out-Null\n-  - ps: Invoke-WebRequest \"https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.ps1\" -OutFile \".\\build\\installcli.ps1\"\n-  - ps: $env:DOTNET_INSTALL_DIR = \"$pwd\\.dotnetcli\"\n-  - ps: '& .\\build\\installcli.ps1 -InstallDir \"$env:DOTNET_INSTALL_DIR\" -NoPath -Version 1.0.0-preview2-003121'\n-  - ps: $env:Path = \"$env:DOTNET_INSTALL_DIR;$env:Path\"\n build_script:\n - ps: ./Build.ps1\n test: off"
    },
    {
      "sha": "4e46f40c7061d287f8edd130c7352719dd5088e3",
      "filename": "build.sh",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/build.sh",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/build.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/build.sh?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,12 +1,11 @@\n #!/bin/bash\n-dotnet restore --no-cache\n-for path in src/*/project.json; do\n-    dirname=\"$(dirname \"${path}\")\"\n-    dotnet build ${dirname} -f netstandard1.3 -c Release\n+dotnet --info\n+dotnet restore\n+\n+for path in src/**/*.csproj; do\n+    dotnet build -f netstandard1.3 -c Release ${path}\n done\n \n-for path in test/*.Tests/project.json; do\n-    dirname=\"$(dirname \"${path}\")\"\n-    dotnet build ${dirname} -f netcoreapp1.0 -c Release\n-    dotnet test ${dirname} -f netcoreapp1.0  -c Release\n+for path in test/*.Tests/*.csproj; do\n+    dotnet test -f netcoreapp2.0  -c Release ${path}\n done"
    },
    {
      "sha": "ec04f9572090e31bbbb01065f005e970b354dc50",
      "filename": "example/Sample/Sample.csproj",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/example/Sample/Sample.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/example/Sample/Sample.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/Sample.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,24 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFrameworks>netcoreapp2.0;net47</TargetFrameworks>\n+    <AssemblyName>Sample</AssemblyName>\n+    <OutputType>Exe</OutputType>\n+    <PackageId>Sample</PackageId>\n+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\..\\src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\" />\n+  </ItemGroup>\n+\n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'net47' \">\n+    <Reference Include=\"System\" />\n+    <Reference Include=\"Microsoft.CSharp\" />\n+  </ItemGroup>\n+\n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.0' \">\n+  </ItemGroup>\n+\n+</Project>\n+"
    },
    {
      "sha": "000aa0632773351fc6ddcdefbb4b9e9258f9820b",
      "filename": "example/Sample/Sample.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/Sample.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/Sample.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/Sample.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,21 +0,0 @@\n-﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <PropertyGroup>\n-    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">14.0</VisualStudioVersion>\n-    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\n-  </PropertyGroup>\n-\n-  <Import Project=\"$(VSToolsPath)\\DotNet\\Microsoft.DotNet.Props\" Condition=\"'$(VSToolsPath)' != ''\" />\n-  <PropertyGroup Label=\"Globals\">\n-    <ProjectGuid>a34235a2-a717-4a1c-bf5c-f4a9e06e1260</ProjectGuid>\n-    <RootNamespace>Sample</RootNamespace>\n-    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)'=='' \">.\\obj</BaseIntermediateOutputPath>\n-    <OutputPath Condition=\"'$(OutputPath)'=='' \">.\\bin\\</OutputPath>\n-    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>\n-  </PropertyGroup>\n-\n-  <PropertyGroup>\n-    <SchemaVersion>2.0</SchemaVersion>\n-  </PropertyGroup>\n-  <Import Project=\"$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\n-</Project>"
    },
    {
      "sha": "525d510d13c74dc1c03ecc155a16f5bde5253883",
      "filename": "example/Sample/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/example/Sample/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/example/Sample/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,23 +0,0 @@\n-﻿{\n-  \"buildOptions\": {\n-    \"emitEntryPoint\": true\n-  },\n-\n-  \"dependencies\": {\n-    \"Serilog.Sinks.File\": { \"target\": \"project\" }\n-  },\n-\n-  \"frameworks\": {\n-    \"netcoreapp1.0\": {\n-      \"imports\": \"dnxcore50\",\n-      \"dependencies\": {\n-        \"Microsoft.NETCore.App\": {\n-          \"type\": \"platform\",\n-          \"version\": \"1.0.0\"\n-        }\n-      }\n-    },\n-    \"net4.5\": {}\n-  },\n-  \"runtimes\": { \"win10-x64\": {} }\n-}"
    },
    {
      "sha": "a2b2a41526b183bb30e38b64c6ea9705c542bde8",
      "filename": "global.json",
      "status": "removed",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/global.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/global.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/global.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,6 +0,0 @@\n-{\n-  \"projects\": [ \"src\", \"test\" ],\n-  \"sdk\": {\n-    \"version\": \"1.0.0-preview2-003121\"\n-  }\n-}"
    },
    {
      "sha": "71527e43e99c16562f18e747c883bb2c562dcf78",
      "filename": "serilog-sinks-file.sln",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/serilog-sinks-file.sln",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/serilog-sinks-file.sln",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/serilog-sinks-file.sln?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,7 +1,7 @@\n ﻿\n Microsoft Visual Studio Solution File, Format Version 12.00\n-# Visual Studio 14\n-VisualStudioVersion = 14.0.25420.1\n+# Visual Studio 15\n+VisualStudioVersion = 15.0.26730.15\n MinimumVisualStudioVersion = 10.0.40219.1\n Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{037440DE-440B-4129-9F7A-09B42D00397E}\"\n EndProject\n@@ -12,21 +12,20 @@ Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"assets\", \"assets\", \"{E9D1B5\n \t\tappveyor.yml = appveyor.yml\n \t\tBuild.ps1 = Build.ps1\n \t\tbuild.sh = build.sh\n-\t\tglobal.json = global.json\n \t\tNuGet.Config = NuGet.Config\n \t\tREADME.md = README.md\n \t\tassets\\Serilog.snk = assets\\Serilog.snk\n \tEndProjectSection\n EndProject\n-Project(\"{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\") = \"Serilog.Sinks.File\", \"src\\Serilog.Sinks.File\\Serilog.Sinks.File.xproj\", \"{57E0ED0E-0F45-48AB-A73D-6A92B7C32095}\"\n-EndProject\n Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{7B927378-9F16-4F6F-B3F6-156395136646}\"\n EndProject\n-Project(\"{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\") = \"Serilog.Sinks.File.Tests\", \"test\\Serilog.Sinks.File.Tests\\Serilog.Sinks.File.Tests.xproj\", \"{3C2D8E01-5580-426A-BDD9-EC59CD98E618}\"\n-EndProject\n Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"example\", \"example\", \"{196B1544-C617-4D7C-96D1-628713BDD52A}\"\n EndProject\n-Project(\"{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}\") = \"Sample\", \"example\\Sample\\Sample.xproj\", \"{A34235A2-A717-4A1C-BF5C-F4A9E06E1260}\"\n+Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Serilog.Sinks.File\", \"src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\", \"{57E0ED0E-0F45-48AB-A73D-6A92B7C32095}\"\n+EndProject\n+Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Serilog.Sinks.File.Tests\", \"test\\Serilog.Sinks.File.Tests\\Serilog.Sinks.File.Tests.csproj\", \"{3C2D8E01-5580-426A-BDD9-EC59CD98E618}\"\n+EndProject\n+Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Sample\", \"example\\Sample\\Sample.csproj\", \"{A34235A2-A717-4A1C-BF5C-F4A9E06E1260}\"\n EndProject\n Global\n \tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n@@ -55,4 +54,7 @@ Global\n \t\t{3C2D8E01-5580-426A-BDD9-EC59CD98E618} = {7B927378-9F16-4F6F-B3F6-156395136646}\n \t\t{A34235A2-A717-4A1C-BF5C-F4A9E06E1260} = {196B1544-C617-4D7C-96D1-628713BDD52A}\n \tEndGlobalSection\n+\tGlobalSection(ExtensibilityGlobals) = postSolution\n+\t\tSolutionGuid = {EA0197B4-FCA8-4DF2-BF34-274FA41333D1}\n+\tEndGlobalSection\n EndGlobal"
    },
    {
      "sha": "5cb19e924cf3a0594ec95425f838befd79674c7f",
      "filename": "src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "status": "modified",
      "additions": 157,
      "deletions": 34,
      "changes": 191,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/FileLoggerConfigurationExtensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,4 +1,4 @@\n-﻿// Copyright 2013-2016 Serilog Contributors\n+﻿// Copyright 2013-2017 Serilog Contributors\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -13,6 +13,8 @@\n // limitations under the License.\n \n using System;\n+using System.ComponentModel;\n+using System.Text;\n using Serilog.Configuration;\n using Serilog.Core;\n using Serilog.Debugging;\n@@ -22,13 +24,96 @@\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File;\n \n+// ReSharper disable MethodOverloadWithOptionalParameter\n+\n namespace Serilog\n {\n     /// <summary>Extends <see cref=\"LoggerConfiguration\"/> with methods to add file sinks.</summary>\n     public static class FileLoggerConfigurationExtensions\n     {\n+        const int DefaultRetainedFileCountLimit = 31; // A long month of logs\n         const long DefaultFileSizeLimitBytes = 1L * 1024 * 1024 * 1024;\n-        const string DefaultOutputTemplate = \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}\";\n+        const string DefaultOutputTemplate = \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\";\n+\n+        /// <summary>\n+        /// Write log events to the specified file.\n+        /// </summary>\n+        /// <param name=\"sinkConfiguration\">Logger sink configuration.</param>\n+        /// <param name=\"path\">Path to the file.</param>\n+        /// <param name=\"restrictedToMinimumLevel\">The minimum level for\n+        /// events passed through the sink. Ignored when <paramref name=\"levelSwitch\"/> is specified.</param>\n+        /// <param name=\"levelSwitch\">A switch allowing the pass-through minimum level\n+        /// to be changed at runtime.</param>\n+        /// <param name=\"formatProvider\">Supplies culture-specific formatting information, or null.</param>\n+        /// <param name=\"outputTemplate\">A message template describing the format used to write to the sink.\n+        /// the default is \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\".</param>\n+        /// <param name=\"fileSizeLimitBytes\">The approximate maximum size, in bytes, to which a log file will be allowed to grow.\n+        /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n+        /// will be written in full even if it exceeds the limit.</param>\n+        /// <param name=\"buffered\">Indicates if flushing to the output file can be buffered or not. The default\n+        /// is false.</param>\n+        /// <param name=\"shared\">Allow the log file to be shared by multiple processes. The default is false.</param>\n+        /// <param name=\"flushToDiskInterval\">If provided, a full disk flush will be performed periodically at the specified interval.</param>\n+        /// <returns>Configuration object allowing method chaining.</returns>\n+        /// <remarks>The file will be written using the UTF-8 character set.</remarks>\n+        [Obsolete(\"New code should not be compiled against this obsolete overload\"), EditorBrowsable(EditorBrowsableState.Never)]\n+        public static LoggerConfiguration File(\n+            this LoggerSinkConfiguration sinkConfiguration,\n+            string path,\n+            LogEventLevel restrictedToMinimumLevel,\n+            string outputTemplate,\n+            IFormatProvider formatProvider,\n+            long? fileSizeLimitBytes,\n+            LoggingLevelSwitch levelSwitch,\n+            bool buffered,\n+            bool shared,\n+            TimeSpan? flushToDiskInterval)\n+        {\n+            // ReSharper disable once RedundantArgumentDefaultValue\n+            return File(sinkConfiguration, path, restrictedToMinimumLevel, outputTemplate, formatProvider, fileSizeLimitBytes,\n+                levelSwitch, buffered, shared, flushToDiskInterval, RollingInterval.Infinite, false,\n+                null, null);\n+        }\n+\n+        /// <summary>\n+        /// Write log events to the specified file.\n+        /// </summary>\n+        /// <param name=\"sinkConfiguration\">Logger sink configuration.</param>\n+        /// <param name=\"formatter\">A formatter, such as <see cref=\"JsonFormatter\"/>, to convert the log events into\n+        /// text for the file. If control of regular text formatting is required, use the other\n+        /// overload of <see cref=\"File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?)\"/>\n+        /// and specify the outputTemplate parameter instead.\n+        /// </param>\n+        /// <param name=\"path\">Path to the file.</param>\n+        /// <param name=\"restrictedToMinimumLevel\">The minimum level for\n+        /// events passed through the sink. Ignored when <paramref name=\"levelSwitch\"/> is specified.</param>\n+        /// <param name=\"levelSwitch\">A switch allowing the pass-through minimum level\n+        /// to be changed at runtime.</param>\n+        /// <param name=\"fileSizeLimitBytes\">The approximate maximum size, in bytes, to which a log file will be allowed to grow.\n+        /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n+        /// will be written in full even if it exceeds the limit.</param>\n+        /// <param name=\"buffered\">Indicates if flushing to the output file can be buffered or not. The default\n+        /// is false.</param>\n+        /// <param name=\"shared\">Allow the log file to be shared by multiple processes. The default is false.</param>\n+        /// <param name=\"flushToDiskInterval\">If provided, a full disk flush will be performed periodically at the specified interval.</param>\n+        /// <returns>Configuration object allowing method chaining.</returns>\n+        /// <remarks>The file will be written using the UTF-8 character set.</remarks>\n+        [Obsolete(\"New code should not be compiled against this obsolete overload\"), EditorBrowsable(EditorBrowsableState.Never)]\n+        public static LoggerConfiguration File(\n+            this LoggerSinkConfiguration sinkConfiguration,\n+            ITextFormatter formatter,\n+            string path,\n+            LogEventLevel restrictedToMinimumLevel,\n+            long? fileSizeLimitBytes,\n+            LoggingLevelSwitch levelSwitch,\n+            bool buffered,\n+            bool shared,\n+            TimeSpan? flushToDiskInterval)\n+        {\n+            // ReSharper disable once RedundantArgumentDefaultValue\n+            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch,\n+                buffered, shared, flushToDiskInterval, RollingInterval.Infinite, false, null, null);\n+        }\n \n         /// <summary>\n         /// Write log events to the specified file.\n@@ -41,14 +126,20 @@ public static class FileLoggerConfigurationExtensions\n         /// to be changed at runtime.</param>\n         /// <param name=\"formatProvider\">Supplies culture-specific formatting information, or null.</param>\n         /// <param name=\"outputTemplate\">A message template describing the format used to write to the sink.\n-        /// the default is \"{Timestamp} [{Level}] {Message}{NewLine}{Exception}\".</param>\n+        /// the default is \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\".</param>\n         /// <param name=\"fileSizeLimitBytes\">The approximate maximum size, in bytes, to which a log file will be allowed to grow.\n         /// For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit\n         /// will be written in full even if it exceeds the limit.</param>\n         /// <param name=\"buffered\">Indicates if flushing to the output file can be buffered or not. The default\n         /// is false.</param>\n         /// <param name=\"shared\">Allow the log file to be shared by multiple processes. The default is false.</param>\n         /// <param name=\"flushToDiskInterval\">If provided, a full disk flush will be performed periodically at the specified interval.</param>\n+        /// <param name=\"rollingInterval\">The interval at which logging will roll over to a new file.</param>\n+        /// <param name=\"rollOnFileSizeLimit\">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames \n+        /// will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>\n+        /// <param name=\"retainedFileCountLimit\">The maximum number of log files that will be retained,\n+        /// including the current log file. For unlimited retention, pass null. The default is 31.</param>\n+        /// <param name=\"encoding\">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>\n         /// <returns>Configuration object allowing method chaining.</returns>\n         /// <remarks>The file will be written using the UTF-8 character set.</remarks>\n         public static LoggerConfiguration File(\n@@ -61,14 +152,20 @@ public static class FileLoggerConfigurationExtensions\n             LoggingLevelSwitch levelSwitch = null,\n             bool buffered = false,\n             bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n+            TimeSpan? flushToDiskInterval = null,\n+            RollingInterval rollingInterval = RollingInterval.Infinite,\n+            bool rollOnFileSizeLimit = false,\n+            int? retainedFileCountLimit = DefaultRetainedFileCountLimit,\n+            Encoding encoding = null)\n         {\n             if (sinkConfiguration == null) throw new ArgumentNullException(nameof(sinkConfiguration));\n             if (path == null) throw new ArgumentNullException(nameof(path));\n             if (outputTemplate == null) throw new ArgumentNullException(nameof(outputTemplate));\n \n             var formatter = new MessageTemplateTextFormatter(outputTemplate, formatProvider);\n-            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch, buffered: buffered, shared: shared, flushToDiskInterval: flushToDiskInterval);\n+            return File(sinkConfiguration, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes,\n+                levelSwitch, buffered, shared, flushToDiskInterval,\n+                rollingInterval, rollOnFileSizeLimit, retainedFileCountLimit, encoding);\n         }\n \n         /// <summary>\n@@ -77,7 +174,7 @@ public static class FileLoggerConfigurationExtensions\n         /// <param name=\"sinkConfiguration\">Logger sink configuration.</param>\n         /// <param name=\"formatter\">A formatter, such as <see cref=\"JsonFormatter\"/>, to convert the log events into\n         /// text for the file. If control of regular text formatting is required, use the other\n-        /// overload of <see cref=\"File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?)\"/>\n+        /// overload of <see cref=\"File(LoggerSinkConfiguration, string, LogEventLevel, string, IFormatProvider, long?, LoggingLevelSwitch, bool, bool, TimeSpan?, RollingInterval, bool, int?, Encoding)\"/>\n         /// and specify the outputTemplate parameter instead.\n         /// </param>\n         /// <param name=\"path\">Path to the file.</param>\n@@ -92,6 +189,12 @@ public static class FileLoggerConfigurationExtensions\n         /// is false.</param>\n         /// <param name=\"shared\">Allow the log file to be shared by multiple processes. The default is false.</param>\n         /// <param name=\"flushToDiskInterval\">If provided, a full disk flush will be performed periodically at the specified interval.</param>\n+        /// <param name=\"rollingInterval\">The interval at which logging will roll over to a new file.</param>\n+        /// <param name=\"rollOnFileSizeLimit\">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames \n+        /// will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>\n+        /// <param name=\"retainedFileCountLimit\">The maximum number of log files that will be retained,\n+        /// including the current log file. For unlimited retention, pass null. The default is 31.</param>\n+        /// <param name=\"encoding\">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>\n         /// <returns>Configuration object allowing method chaining.</returns>\n         /// <remarks>The file will be written using the UTF-8 character set.</remarks>\n         public static LoggerConfiguration File(\n@@ -103,9 +206,14 @@ public static class FileLoggerConfigurationExtensions\n             LoggingLevelSwitch levelSwitch = null,\n             bool buffered = false,\n             bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n+            TimeSpan? flushToDiskInterval = null,\n+            RollingInterval rollingInterval = RollingInterval.Infinite,\n+            bool rollOnFileSizeLimit = false,\n+            int? retainedFileCountLimit = DefaultRetainedFileCountLimit,\n+            Encoding encoding = null)\n         {\n-            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch, buffered: buffered, shared: shared, flushToDiskInterval: flushToDiskInterval);\n+            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, fileSizeLimitBytes, levelSwitch,\n+                buffered, false, shared, flushToDiskInterval, encoding, rollingInterval, rollOnFileSizeLimit, retainedFileCountLimit);\n         }\n \n         /// <summary>\n@@ -119,7 +227,7 @@ public static class FileLoggerConfigurationExtensions\n         /// to be changed at runtime.</param>\n         /// <param name=\"formatProvider\">Supplies culture-specific formatting information, or null.</param>\n         /// <param name=\"outputTemplate\">A message template describing the format used to write to the sink.\n-        /// the default is \"{Timestamp} [{Level}] {Message}{NewLine}{Exception}\".</param>\n+        /// the default is \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}\".</param>\n         /// <returns>Configuration object allowing method chaining.</returns>\n         /// <remarks>The file will be written using the UTF-8 character set.</remarks>\n         public static LoggerConfiguration File(\n@@ -161,48 +269,63 @@ public static class FileLoggerConfigurationExtensions\n             LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n             LoggingLevelSwitch levelSwitch = null)\n         {\n-            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, null, levelSwitch, false, true);\n+            return ConfigureFile(sinkConfiguration.Sink, formatter, path, restrictedToMinimumLevel, null, levelSwitch, false, true,\n+                false, null, null, RollingInterval.Infinite, false, null);\n         }\n \n         static LoggerConfiguration ConfigureFile(\n             this Func<ILogEventSink, LogEventLevel, LoggingLevelSwitch, LoggerConfiguration> addSink,\n             ITextFormatter formatter,\n             string path,\n-            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n-            long? fileSizeLimitBytes = DefaultFileSizeLimitBytes,\n-            LoggingLevelSwitch levelSwitch = null,\n-            bool buffered = false,\n-            bool propagateExceptions = false,\n-            bool shared = false,\n-            TimeSpan? flushToDiskInterval = null)\n+            LogEventLevel restrictedToMinimumLevel,\n+            long? fileSizeLimitBytes,\n+            LoggingLevelSwitch levelSwitch,\n+            bool buffered,\n+            bool propagateExceptions,\n+            bool shared,\n+            TimeSpan? flushToDiskInterval,\n+            Encoding encoding,\n+            RollingInterval rollingInterval,\n+            bool rollOnFileSizeLimit,\n+            int? retainedFileCountLimit)\n         {\n             if (addSink == null) throw new ArgumentNullException(nameof(addSink));\n             if (formatter == null) throw new ArgumentNullException(nameof(formatter));\n             if (path == null) throw new ArgumentNullException(nameof(path));\n-            if (fileSizeLimitBytes.HasValue && fileSizeLimitBytes < 0) throw new ArgumentException(\"Negative value provided; file size limit must be non-negative\");\n-            if (shared && buffered)\n-                throw new ArgumentException(\"Buffered writes are not available when file sharing is enabled.\", nameof(buffered));\n+            if (fileSizeLimitBytes.HasValue && fileSizeLimitBytes < 0) throw new ArgumentException(\"Negative value provided; file size limit must be non-negative.\", nameof(fileSizeLimitBytes));\n+            if (retainedFileCountLimit.HasValue && retainedFileCountLimit < 1) throw new ArgumentException(\"At least one file must be retained.\", nameof(retainedFileCountLimit));\n+            if (shared && buffered) throw new ArgumentException(\"Buffered writes are not available when file sharing is enabled.\", nameof(buffered));\n \n             ILogEventSink sink;\n-            try\n+\n+            if (rollOnFileSizeLimit || rollingInterval != RollingInterval.Infinite)\n+            {\n+                sink = new RollingFileSink(path, formatter, fileSizeLimitBytes, retainedFileCountLimit, encoding, buffered, shared, rollingInterval, rollOnFileSizeLimit);\n+            }\n+            else\n             {\n-                if (shared)\n+                try\n                 {\n-                    sink = new SharedFileSink(path, formatter, fileSizeLimitBytes);\n+#pragma warning disable 618\n+                    if (shared)\n+                    {\n+                        sink = new SharedFileSink(path, formatter, fileSizeLimitBytes);\n+                    }\n+                    else\n+                    {\n+                        sink = new FileSink(path, formatter, fileSizeLimitBytes, buffered: buffered);\n+                    }\n+#pragma warning restore 618\n                 }\n-                else\n+                catch (Exception ex)\n                 {\n-                    sink = new FileSink(path, formatter, fileSizeLimitBytes, buffered: buffered);\n-                }\n-            }\n-            catch (Exception ex)\n-            {\n-                SelfLog.WriteLine(\"Unable to open file sink for {0}: {1}\", path, ex);\n+                    SelfLog.WriteLine(\"Unable to open file sink for {0}: {1}\", path, ex);\n \n-                if (propagateExceptions)\n-                    throw;\n+                    if (propagateExceptions)\n+                        throw;\n \n-                return addSink(new NullSink(), LevelAlias.Maximum, null);\n+                    return addSink(new NullSink(), LevelAlias.Maximum, null);\n+                }\n             }\n \n             if (flushToDiskInterval.HasValue)\n@@ -212,5 +335,5 @@ public static class FileLoggerConfigurationExtensions\n \n             return addSink(sink, restrictedToMinimumLevel, levelSwitch);\n         }\n-    }  \n+    }\n }"
    },
    {
      "sha": "9fac848ebd091f0908a4d1acff0bf0b1ebcc1d6b",
      "filename": "src/Serilog.Sinks.File/RollingInterval.cs",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/RollingInterval.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/RollingInterval.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/RollingInterval.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,52 @@\n+﻿// Copyright 2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Serilog\n+{\n+    /// <summary>\n+    /// Specifies the frequency at which the log file should roll.\n+    /// </summary>\n+    public enum RollingInterval\n+    {\n+        /// <summary>\n+        /// The log file will never roll; no time period information will be appended to the log file name.\n+        /// </summary>\n+        Infinite,\n+\n+        /// <summary>\n+        /// Roll every year. Filenames will have a four-digit year appended in the pattern <code>yyyy</code>.\n+        /// </summary>\n+        Year,\n+\n+        /// <summary>\n+        /// Roll every calendar month. Filenames will have <code>yyyyMM</code> appended.\n+        /// </summary>\n+        Month,\n+\n+        /// <summary>\n+        /// Roll every day. Filenames will have <code>yyyyMMdd</code> appended.\n+        /// </summary>\n+        Day,\n+\n+        /// <summary>\n+        /// Roll every hour. Filenames will have <code>yyyyMMddHH</code> appended.\n+        /// </summary>\n+        Hour,\n+\n+        /// <summary>\n+        /// Roll every minute. Filenames will have <code>yyyyMMddHHmm</code> appended.\n+        /// </summary>\n+        Minute\n+    }\n+}"
    },
    {
      "sha": "569e5b0b687285bbf36dcd9ad208e36ba2a12c49",
      "filename": "src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Serilog.Sinks.File.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,54 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <Description>Write Serilog events to text files in plain or JSON format.</Description>\n+    <VersionPrefix>4.0.0</VersionPrefix>\n+    <Authors>Serilog Contributors</Authors>\n+    <TargetFrameworks>net45;netstandard1.3</TargetFrameworks>\n+    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n+    <AssemblyName>Serilog.Sinks.File</AssemblyName>\n+    <AssemblyOriginatorKeyFile>../../assets/Serilog.snk</AssemblyOriginatorKeyFile>\n+    <SignAssembly>true</SignAssembly>\n+    <PublicSign Condition=\" '$(OS)' != 'Windows_NT' \">true</PublicSign>\n+    <PackageId>Serilog.Sinks.File</PackageId>\n+    <PackageTags>serilog;file</PackageTags>\n+    <PackageIconUrl>http://serilog.net/images/serilog-sink-nuget.png</PackageIconUrl>\n+    <PackageProjectUrl>http://serilog.net</PackageProjectUrl>\n+    <PackageLicenseUrl>http://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>\n+    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>\n+    <RootNamespace>Serilog</RootNamespace>\n+    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n+    <AssemblyName>Serilog.Sinks.File</AssemblyName>\n+    <!-- Don't reference the full NETStandard.Library -->\n+    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Serilog\" Version=\"2.5.0\" />\n+  </ItemGroup>\n+\n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'net45' \">\n+    <Reference Include=\"System\" />\n+    <Reference Include=\"System.Core\" />\n+    <Reference Include=\"Microsoft.CSharp\" />\n+  </ItemGroup>\n+\n+  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net45' \">\n+    <DefineConstants>$(DefineConstants);ATOMIC_APPEND;HRESULTS</DefineConstants>\n+  </PropertyGroup>\n+\n+  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netstandard1.3' \">\n+    <DefineConstants>$(DefineConstants);OS_MUTEX</DefineConstants>\n+  </PropertyGroup>\n+\n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.3' \">\n+    <PackageReference Include=\"System.IO\" Version=\"4.1.0\" />\n+    <PackageReference Include=\"System.IO.FileSystem\" Version=\"4.0.1\" />\n+    <PackageReference Include=\"System.IO.FileSystem.Primitives\" Version=\"4.0.1\" />\n+    <PackageReference Include=\"System.Text.Encoding.Extensions\" Version=\"4.0.11\" />\n+    <PackageReference Include=\"System.Threading.Timer\" Version=\"4.0.1\" />\n+    <PackageReference Include=\"System.Threading\" Version=\"4.0.11\" />\n+    <PackageReference Include=\"System.Runtime.InteropServices\" Version=\"4.1.0\" />\n+  </ItemGroup>\n+\n+</Project>"
    },
    {
      "sha": "c8d4c28c794d1b97e0841f961f765b0de389f551",
      "filename": "src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 18,
      "changes": 18,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Serilog.Sinks.File.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,18 +0,0 @@\n-﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <PropertyGroup>\n-    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">14.0</VisualStudioVersion>\n-    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\n-  </PropertyGroup>\n-  <Import Project=\"$(VSToolsPath)\\DNX\\Microsoft.DNX.Props\" Condition=\"'$(VSToolsPath)' != ''\" />\n-  <PropertyGroup Label=\"Globals\">\n-    <ProjectGuid>57e0ed0e-0f45-48ab-a73d-6a92b7c32095</ProjectGuid>\n-    <RootNamespace>Serilog</RootNamespace>\n-    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)'=='' \">.\\obj</BaseIntermediateOutputPath>\n-    <OutputPath Condition=\"'$(OutputPath)'=='' \">.\\bin\\</OutputPath>\n-  </PropertyGroup>\n-  <PropertyGroup>\n-    <SchemaVersion>2.0</SchemaVersion>\n-  </PropertyGroup>\n-  <Import Project=\"$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\n-</Project>\n\\ No newline at end of file"
    },
    {
      "sha": "b7cf3cc3cd2bf232f361ca1975bef54eb39bcf05",
      "filename": "src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/Clock.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/Clock.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,38 @@\n+﻿// Copyright 2013-2016 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+\n+namespace Serilog.Sinks.File\n+{\n+    static class Clock\n+    {\n+        static Func<DateTime> _dateTimeNow = () => DateTime.Now;\n+\n+        [ThreadStatic]\n+        static DateTime _testDateTimeNow;\n+\n+        public static DateTime DateTimeNow => _dateTimeNow();\n+\n+        // Time is set per thread to support parallel\n+        // If any thread uses the clock in test mode, all threads\n+        // must use it in test mode; once set to test mode only\n+        // terminating the application returns it to normal use.\n+        public static void SetTestDateTimeNow(DateTime now)\n+        {\n+            _testDateTimeNow = now;\n+            _dateTimeNow = () => _testDateTimeNow;\n+        }\n+    }\n+}"
    },
    {
      "sha": "bfd288fc59157f8c08e4f2844d029dd3b9a7ef9b",
      "filename": "src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/FileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/FileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -15,7 +15,6 @@\n using System;\n using System.IO;\n using System.Text;\n-using Serilog.Core;\n using Serilog.Events;\n using Serilog.Formatting;\n \n@@ -24,7 +23,8 @@ namespace Serilog.Sinks.File\n     /// <summary>\n     /// Write log events to a disk file.\n     /// </summary>\n-    public sealed class FileSink : ILogEventSink, IFlushableFileSink, IDisposable\n+    [Obsolete(\"This type will be removed from the public API in a future version; use `WriteTo.File()` instead.\")]\n+    public sealed class FileSink : IFileSink, IDisposable\n     {\n         readonly TextWriter _output;\n         readonly FileStream _underlyingStream;\n@@ -50,7 +50,7 @@ public FileSink(string path, ITextFormatter textFormatter, long? fileSizeLimitBy\n         {\n             if (path == null) throw new ArgumentNullException(nameof(path));\n             if (textFormatter == null) throw new ArgumentNullException(nameof(textFormatter));\n-            if (fileSizeLimitBytes.HasValue && fileSizeLimitBytes < 0) throw new ArgumentException(\"Negative value provided; file size limit must be non-negative\");\n+            if (fileSizeLimitBytes.HasValue && fileSizeLimitBytes < 0) throw new ArgumentException(\"Negative value provided; file size limit must be non-negative.\");\n \n             _textFormatter = textFormatter;\n             _fileSizeLimitBytes = fileSizeLimitBytes;\n@@ -71,27 +71,34 @@ public FileSink(string path, ITextFormatter textFormatter, long? fileSizeLimitBy\n             _output = new StreamWriter(outputStream, encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// <summary>\n-        /// Emit the provided log event to the sink.\n-        /// </summary>\n-        /// <param name=\"logEvent\">The log event to write.</param>\n-        public void Emit(LogEvent logEvent)\n+        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n             lock (_syncRoot)\n             {\n                 if (_fileSizeLimitBytes != null)\n                 {\n                     if (_countingStreamWrapper.CountedLength >= _fileSizeLimitBytes.Value)\n-                        return;\n+                        return false;\n                 }\n \n                 _textFormatter.Format(logEvent, _output);\n                 if (!_buffered)\n                     _output.Flush();\n+\n+                return true;\n             }\n         }\n \n+        /// <summary>\n+        /// Emit the provided log event to the sink.\n+        /// </summary>\n+        /// <param name=\"logEvent\">The log event to write.</param>\n+        public void Emit(LogEvent logEvent)\n+        {\n+            ((IFileSink) this).EmitOrOverflow(logEvent);\n+        }\n+\n         /// <inheritdoc />\n         public void Dispose()\n         {"
    },
    {
      "sha": "89268ab61ac15cd87870db6958f5307d4e589143",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,29 @@\n+﻿// Copyright 2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File\n+{\n+    /// <summary>\n+    /// Exists only for the convenience of <see cref=\"RollingFileSink\"/>, which\n+    /// switches implementations based on sharing. Would refactor, but preserving\n+    /// backwards compatibility.\n+    /// </summary>\n+    interface IFileSink : ILogEventSink, IFlushableFileSink\n+    {\n+        bool EmitOrOverflow(LogEvent logEvent);\n+    }\n+}"
    },
    {
      "sha": "75d6e526bb5b3c43354a6fec2b08a0f364d20b0d",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IFlushableFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,4 +1,18 @@\n-﻿namespace Serilog.Sinks.File\n+﻿// Copyright 2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Serilog.Sinks.File\n {\n     /// <summary>\n     /// Supported by (file-based) sinks that can be explicitly flushed."
    },
    {
      "sha": "36fe8bcbcafd4976260d185803203b0b92a80319",
      "filename": "src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/IOErrors.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,31 @@\n+﻿// Copyright 2013-2016 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System.IO;\n+\n+namespace Serilog.Sinks.File\n+{\n+    static class IOErrors\n+    {\n+        public static bool IsLockedFile(IOException ex)\n+        {\n+#if HRESULTS\n+            var errorCode = System.Runtime.InteropServices.Marshal.GetHRForException(ex) & ((1 << 16) - 1);\n+            return errorCode == 32 || errorCode == 33;\n+#else\n+            return true;\n+#endif\n+        }\n+    }\n+}"
    },
    {
      "sha": "17c496bec39ebe44c0efe2125cfdd08cd12a5447",
      "filename": "src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "status": "added",
      "additions": 116,
      "deletions": 0,
      "changes": 116,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/PathRoller.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,116 @@\n+﻿// Copyright 2013-2016 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Serilog.Sinks.File\n+{\n+    class PathRoller\n+    {\n+        const string PeriodMatchGroup = \"period\";\n+        const string SequenceNumberMatchGroup = \"sequence\";\n+\n+        readonly string _directory;\n+        readonly string _filenamePrefix;\n+        readonly string _filenameSuffix;\n+        readonly Regex _filenameMatcher;\n+\n+        readonly RollingInterval _interval;\n+        readonly string _periodFormat;\n+\n+        public PathRoller(string path, RollingInterval interval)\n+        {\n+            if (path == null) throw new ArgumentNullException(nameof(path));\n+            _interval = interval;\n+            _periodFormat = interval.GetFormat();\n+\n+            var pathDirectory = Path.GetDirectoryName(path);\n+            if (string.IsNullOrEmpty(pathDirectory))\n+                pathDirectory = Directory.GetCurrentDirectory();\n+\n+            _directory = Path.GetFullPath(pathDirectory);\n+            _filenamePrefix = Path.GetFileNameWithoutExtension(path);\n+            _filenameSuffix = Path.GetExtension(path);\n+            _filenameMatcher = new Regex(\n+                \"^\" +\n+                Regex.Escape(_filenamePrefix) +\n+                \"(?<\" + PeriodMatchGroup + \">\\\\d{\" + _periodFormat.Length + \"})\" +\n+                \"(?<\" + SequenceNumberMatchGroup + \">_[0-9]{3,}){0,1}\" +\n+                Regex.Escape(_filenameSuffix) +\n+                \"$\");\n+\n+            DirectorySearchPattern = $\"{_filenamePrefix}*{_filenameSuffix}\";\n+        }\n+\n+        public string LogFileDirectory => _directory;\n+\n+        public string DirectorySearchPattern { get; }\n+\n+        public void GetLogFilePath(DateTime date, int? sequenceNumber, out string path)\n+        {\n+            var currentCheckpoint = GetCurrentCheckpoint(date);\n+\n+            var tok = currentCheckpoint?.ToString(_periodFormat, CultureInfo.InvariantCulture) ?? \"\";\n+\n+            if (sequenceNumber != null)\n+                tok += \"_\" + sequenceNumber.Value.ToString(\"000\", CultureInfo.InvariantCulture);\n+\n+            path = Path.Combine(_directory, _filenamePrefix + tok + _filenameSuffix);\n+        }\n+\n+        public IEnumerable<RollingLogFile> SelectMatches(IEnumerable<string> filenames)\n+        {\n+            foreach (var filename in filenames)\n+            {\n+                var match = _filenameMatcher.Match(filename);\n+                if (!match.Success)\n+                    continue;\n+\n+                int? inc = null;\n+                var incGroup = match.Groups[SequenceNumberMatchGroup];\n+                if (incGroup.Captures.Count != 0)\n+                {\n+                    var incPart = incGroup.Captures[0].Value.Substring(1);\n+                    inc = int.Parse(incPart, CultureInfo.InvariantCulture);\n+                }\n+\n+                DateTime? period = null;\n+                var periodGroup = match.Groups[PeriodMatchGroup];\n+                if (periodGroup.Captures.Count != 0)\n+                {\n+                    var dateTimePart = periodGroup.Captures[0].Value;\n+                    if (DateTime.TryParseExact(\n+                        dateTimePart,\n+                        _periodFormat,\n+                        CultureInfo.InvariantCulture,\n+                        DateTimeStyles.None,\n+                        out var dateTime))\n+                    {\n+                        period = dateTime;\n+                    }\n+                }\n+\n+                yield return new RollingLogFile(filename, period, inc);\n+            }\n+        }\n+\n+        public DateTime? GetCurrentCheckpoint(DateTime instant) => _interval.GetCurrentCheckpoint(instant);\n+\n+        public DateTime? GetNextCheckpoint(DateTime instant) => _interval.GetNextCheckpoint(instant);\n+    }\n+}"
    },
    {
      "sha": "644176f1e15c99877be1752b0562a1f706799013",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "status": "added",
      "additions": 233,
      "deletions": 0,
      "changes": 233,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingFileSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,233 @@\n+﻿// Copyright 2013-2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+#pragma warning disable 618\n+\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using Serilog.Core;\n+using Serilog.Debugging;\n+using Serilog.Events;\n+using Serilog.Formatting;\n+\n+namespace Serilog.Sinks.File\n+{\n+    sealed class RollingFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n+    {\n+        readonly PathRoller _roller;\n+        readonly ITextFormatter _textFormatter;\n+        readonly long? _fileSizeLimitBytes;\n+        readonly int? _retainedFileCountLimit;\n+        readonly Encoding _encoding;\n+        readonly bool _buffered;\n+        readonly bool _shared;\n+        readonly bool _rollOnFileSizeLimit;\n+\n+        readonly object _syncRoot = new object();\n+        bool _isDisposed;\n+        DateTime? _nextCheckpoint;\n+        IFileSink _currentFile;\n+        int? _currentFileSequence;\n+\n+        public RollingFileSink(string path,\n+                              ITextFormatter textFormatter,\n+                              long? fileSizeLimitBytes,\n+                              int? retainedFileCountLimit,\n+                              Encoding encoding,\n+                              bool buffered,\n+                              bool shared,\n+                              RollingInterval rollingInterval,\n+                              bool rollOnFileSizeLimit)\n+        {\n+            if (path == null) throw new ArgumentNullException(nameof(path));\n+            if (fileSizeLimitBytes.HasValue && fileSizeLimitBytes < 0) throw new ArgumentException(\"Negative value provided; file size limit must be non-negative\");\n+            if (retainedFileCountLimit.HasValue && retainedFileCountLimit < 1) throw new ArgumentException(\"Zero or negative value provided; retained file count limit must be at least 1\");\n+\n+            _roller = new PathRoller(path, rollingInterval);\n+            _textFormatter = textFormatter;\n+            _fileSizeLimitBytes = fileSizeLimitBytes;\n+            _retainedFileCountLimit = retainedFileCountLimit;\n+            _encoding = encoding;\n+            _buffered = buffered;\n+            _shared = shared;\n+            _rollOnFileSizeLimit = rollOnFileSizeLimit;\n+        }\n+\n+        public void Emit(LogEvent logEvent)\n+        {\n+            if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n+\n+            lock (_syncRoot)\n+            {\n+                if (_isDisposed) throw new ObjectDisposedException(\"The log file has been disposed.\");\n+\n+                var now = Clock.DateTimeNow;\n+                AlignCurrentFileTo(now);\n+\n+                while (_currentFile?.EmitOrOverflow(logEvent) == false && _rollOnFileSizeLimit)\n+                {\n+                    AlignCurrentFileTo(now, nextSequence: true);\n+                }\n+            }\n+        }\n+\n+        void AlignCurrentFileTo(DateTime now, bool nextSequence = false)\n+        {\n+            if (!_nextCheckpoint.HasValue)\n+            {\n+                OpenFile(now);\n+            }\n+            else if (nextSequence || now >= _nextCheckpoint.Value)\n+            {\n+                int? minSequence = null;\n+                if (nextSequence)\n+                {\n+                    if (_currentFileSequence == null)\n+                        minSequence = 1;\n+                    else\n+                        minSequence = _currentFileSequence.Value + 1;\n+                }\n+\n+                CloseFile();\n+                OpenFile(now, minSequence);\n+            }\n+        }\n+\n+        void OpenFile(DateTime now, int? minSequence = null)\n+        {\n+            var currentCheckpoint = _roller.GetCurrentCheckpoint(now);\n+\n+            // We only try periodically because repeated failures\n+            // to open log files REALLY slow an app down.\n+            _nextCheckpoint = _roller.GetNextCheckpoint(now) ?? now.AddMinutes(30);\n+\n+            var existingFiles = Enumerable.Empty<string>();\n+            try\n+            {\n+                existingFiles = Directory.GetFiles(_roller.LogFileDirectory, _roller.DirectorySearchPattern)\n+                                         .Select(Path.GetFileName);\n+            }\n+            catch (DirectoryNotFoundException) { }\n+\n+            var latestForThisCheckpoint = _roller\n+                .SelectMatches(existingFiles)\n+                .Where(m => m.DateTime == currentCheckpoint)\n+                .OrderByDescending(m => m.SequenceNumber)\n+                .FirstOrDefault();\n+\n+            var sequence = latestForThisCheckpoint?.SequenceNumber;\n+            if (minSequence != null)\n+            {\n+                if (sequence == null || sequence.Value < minSequence.Value)\n+                    sequence = minSequence;\n+            }\n+\n+            const int maxAttempts = 3;\n+            for (var attempt = 0; attempt < maxAttempts; attempt++)\n+            {\n+                _roller.GetLogFilePath(now, sequence, out var path);\n+\n+                try\n+                {\n+                    _currentFile = _shared ?\n+                        (IFileSink)new SharedFileSink(path, _textFormatter, _fileSizeLimitBytes, _encoding) :\n+                        new FileSink(path, _textFormatter, _fileSizeLimitBytes, _encoding, _buffered);\n+                    _currentFileSequence = sequence;\n+                }\n+                catch (IOException ex)\n+                {\n+                    if (IOErrors.IsLockedFile(ex))\n+                    {\n+                        SelfLog.WriteLine(\"File target {0} was locked, attempting to open next in sequence (attempt {1})\", path, attempt + 1);\n+                        sequence = (sequence ?? 0) + 1;\n+                        continue;\n+                    }\n+\n+                    throw;\n+                }\n+\n+                ApplyRetentionPolicy(path);\n+                return;\n+            }\n+        }\n+\n+        void ApplyRetentionPolicy(string currentFilePath)\n+        {\n+            if (_retainedFileCountLimit == null) return;\n+\n+            var currentFileName = Path.GetFileName(currentFilePath);\n+\n+            // We consider the current file to exist, even if nothing's been written yet,\n+            // because files are only opened on response to an event being processed.\n+            var potentialMatches = Directory.GetFiles(_roller.LogFileDirectory, _roller.DirectorySearchPattern)\n+                .Select(Path.GetFileName)\n+                .Union(new [] { currentFileName });\n+\n+            var newestFirst = _roller\n+                .SelectMatches(potentialMatches)\n+                .OrderByDescending(m => m.DateTime)\n+                .ThenByDescending(m => m.SequenceNumber)\n+                .Select(m => m.Filename);\n+\n+            var toRemove = newestFirst\n+                .Where(n => StringComparer.OrdinalIgnoreCase.Compare(currentFileName, n) != 0)\n+                .Skip(_retainedFileCountLimit.Value - 1)\n+                .ToList();\n+\n+            foreach (var obsolete in toRemove)\n+            {\n+                var fullPath = Path.Combine(_roller.LogFileDirectory, obsolete);\n+                try\n+                {\n+                    System.IO.File.Delete(fullPath);\n+                }\n+                catch (Exception ex)\n+                {\n+                    SelfLog.WriteLine(\"Error {0} while removing obsolete log file {1}\", ex, fullPath);\n+                }\n+            }\n+        }\n+\n+        public void Dispose()\n+        {\n+            lock (_syncRoot)\n+            {\n+                if (_currentFile == null) return;\n+                CloseFile();\n+                _isDisposed = true;\n+            }\n+        }\n+\n+        void CloseFile()\n+        {\n+            if (_currentFile != null)\n+            {\n+                (_currentFile as IDisposable)?.Dispose();\n+                _currentFile = null;\n+            }\n+\n+            _nextCheckpoint = null;\n+        }\n+\n+        public void FlushToDisk()\n+        {\n+            lock (_syncRoot)\n+            {\n+                _currentFile?.FlushToDisk();\n+            }\n+        }\n+    }\n+}"
    },
    {
      "sha": "2c9e2fdb1220f29a8a2a1a8f702f859984b2fdde",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingIntervalExtensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,86 @@\n+﻿// Copyright 2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+\n+namespace Serilog.Sinks.File\n+{\n+    static class RollingIntervalExtensions\n+    {\n+        public static string GetFormat(this RollingInterval interval)\n+        {\n+            switch (interval)\n+            {\n+                case RollingInterval.Infinite:\n+                    return \"\";\n+                case RollingInterval.Year:\n+                    return \"yyyy\";\n+                case RollingInterval.Month:\n+                    return \"yyyyMM\";\n+                case RollingInterval.Day:\n+                    return \"yyyyMMdd\";\n+                case RollingInterval.Hour:\n+                    return \"yyyyMMddHH\";\n+                case RollingInterval.Minute:\n+                    return \"yyyyMMddHHmm\";\n+                default:\n+                    throw new ArgumentException(\"Invalid rolling interval\");\n+            }\n+        }\n+\n+        public static DateTime? GetCurrentCheckpoint(this RollingInterval interval, DateTime instant)\n+        {\n+            switch (interval)\n+            {\n+                case RollingInterval.Infinite:\n+                    return null;\n+                case RollingInterval.Year:\n+                    return new DateTime(instant.Year, 1, 1, 0, 0, 0, instant.Kind);\n+                case RollingInterval.Month:\n+                    return new DateTime(instant.Year, instant.Month, 1, 0, 0, 0, instant.Kind);\n+                case RollingInterval.Day:\n+                    return new DateTime(instant.Year, instant.Month, instant.Day, 0, 0, 0, instant.Kind);\n+                case RollingInterval.Hour:\n+                    return new DateTime(instant.Year, instant.Month, instant.Day, instant.Hour, 0, 0, instant.Kind);\n+                case RollingInterval.Minute:\n+                    return new DateTime(instant.Year, instant.Month, instant.Day, instant.Hour, instant.Minute, 0, instant.Kind);\n+                default:\n+                    throw new ArgumentException(\"Invalid rolling interval\");\n+            }\n+        }\n+\n+        public static DateTime? GetNextCheckpoint(this RollingInterval interval, DateTime instant)\n+        {\n+            var current = GetCurrentCheckpoint(interval, instant);\n+            if (current == null)\n+                return null;\n+\n+            switch (interval)\n+            {\n+                case RollingInterval.Year:\n+                    return current.Value.AddYears(1);\n+                case RollingInterval.Month:\n+                    return current.Value.AddMonths(1);\n+                case RollingInterval.Day:\n+                    return current.Value.AddDays(1);\n+                case RollingInterval.Hour:\n+                    return current.Value.AddHours(1);\n+                case RollingInterval.Minute:\n+                    return current.Value.AddMinutes(1);\n+                default:\n+                    throw new ArgumentException(\"Invalid rolling interval\");\n+            }\n+        }\n+    }\n+}"
    },
    {
      "sha": "be64c4e9537b383fec8596e26413b5045a656268",
      "filename": "src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/RollingLogFile.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013-2017 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+ \n+using System;\n+\n+namespace Serilog.Sinks.File\n+{\n+    class RollingLogFile\n+    {\n+        public RollingLogFile(string filename, DateTime? dateTime, int? sequenceNumber)\n+        {\n+            Filename = filename;\n+            DateTime = dateTime;\n+            SequenceNumber = sequenceNumber;\n+        }\n+\n+        public string Filename { get; }\n+\n+        public DateTime? DateTime { get; }\n+\n+        public int? SequenceNumber { get; }\n+    }\n+} "
    },
    {
      "sha": "805e786b1992675b0459f18596d6d4dd00f9acae",
      "filename": "src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.AtomicAppend.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -27,7 +27,8 @@ namespace Serilog.Sinks.File\n     /// <summary>\n     /// Write log events to a disk file.\n     /// </summary>\n-    public sealed class SharedFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n+    [Obsolete(\"This type will be removed from the public API in a future version; use `WriteTo.File(shared: true)` instead.\")]\n+    public sealed class SharedFileSink : IFileSink, IDisposable\n     {\n         readonly MemoryStream _writeBuffer;\n         readonly string _path;\n@@ -84,11 +85,7 @@ public SharedFileSink(string path, ITextFormatter textFormatter, long? fileSizeL\n                 encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// <summary>\n-        /// Emit the provided log event to the sink.\n-        /// </summary>\n-        /// <param name=\"logEvent\">The log event to write.</param>\n-        public void Emit(LogEvent logEvent)\n+        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n \n@@ -121,13 +118,14 @@ public void Emit(LogEvent logEvent)\n                         try\n                         {\n                             if (_fileOutput.Length >= _fileSizeLimitBytes.Value)\n-                                return;\n+                                return false;\n                         }\n                         catch (FileNotFoundException) { } // Cheaper and more reliable than checking existence\n                     }\n \n                     _fileOutput.Write(bytes, 0, length);\n                     _fileOutput.Flush();\n+                    return true;\n                 }\n                 catch\n                 {\n@@ -143,6 +141,14 @@ public void Emit(LogEvent logEvent)\n             }\n         }\n \n+        /// <summary>\n+        /// Emit the provided log event to the sink.\n+        /// </summary>\n+        /// <param name=\"logEvent\">The log event to write.</param>\n+        public void Emit(LogEvent logEvent)\n+        {\n+            ((IFileSink)this).EmitOrOverflow(logEvent);\n+        }\n \n         /// <inheritdoc />\n         public void Dispose()"
    },
    {
      "sha": "a779bdab9320f82acc3900803f4294d97c195cc5",
      "filename": "src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/Sinks/File/SharedFileSink.OSMutex.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -28,7 +28,7 @@ namespace Serilog.Sinks.File\n     /// <summary>\n     /// Write log events to a disk file.\n     /// </summary>\n-    public sealed class SharedFileSink : ILogEventSink, IFlushableFileSink, IDisposable\n+    public sealed class SharedFileSink : IFileSink, IDisposable\n     {\n         readonly TextWriter _output;\n         readonly FileStream _underlyingStream;\n@@ -72,31 +72,28 @@ public SharedFileSink(string path, ITextFormatter textFormatter, long? fileSizeL\n             _output = new StreamWriter(_underlyingStream, encoding ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));\n         }\n \n-        /// <summary>\n-        /// Emit the provided log event to the sink.\n-        /// </summary>\n-        /// <param name=\"logEvent\">The log event to write.</param>\n-        public void Emit(LogEvent logEvent)\n+        bool IFileSink.EmitOrOverflow(LogEvent logEvent)\n         {\n             if (logEvent == null) throw new ArgumentNullException(nameof(logEvent));\n \n             lock (_syncRoot)\n             {\n                 if (!TryAcquireMutex())\n-                    return;\n+                    return true; // We didn't overflow, but, roll-on-size should not be attempted\n \n                 try\n                 {\n                     _underlyingStream.Seek(0, SeekOrigin.End);\n                     if (_fileSizeLimitBytes != null)\n                     {\n                         if (_underlyingStream.Length >= _fileSizeLimitBytes.Value)\n-                            return;\n+                            return false;\n                     }\n \n                     _textFormatter.Format(logEvent, _output);\n                     _output.Flush();\n                     _underlyingStream.Flush();\n+                    return true;\n                 }\n                 finally\n                 {\n@@ -105,6 +102,15 @@ public void Emit(LogEvent logEvent)\n             }\n         }\n \n+        /// <summary>\n+        /// Emit the provided log event to the sink.\n+        /// </summary>\n+        /// <param name=\"logEvent\">The log event to write.</param>\n+        public void Emit(LogEvent logEvent)\n+        {\n+            ((IFileSink)this).EmitOrOverflow(logEvent);\n+        }\n+\n         /// <inheritdoc />\n         public void Dispose()\n         {"
    },
    {
      "sha": "24b75300668ec2745f181a3a9e0553bf46a7aeb4",
      "filename": "src/Serilog.Sinks.File/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 34,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/src/Serilog.Sinks.File/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/src/Serilog.Sinks.File/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,34 +0,0 @@\n-{\n-  \"version\": \"3.2.0-*\",\n-  \"description\": \"Write Serilog events to a text file in plain or JSON format.\",\n-  \"authors\": [ \"Serilog Contributors\" ],\n-  \"packOptions\": {\n-    \"tags\": [ \"serilog\", \"file\", \"io\" ],\n-    \"projectUrl\": \"http://serilog.net\",\n-    \"licenseUrl\": \"http://www.apache.org/licenses/LICENSE-2.0\",\n-    \"iconUrl\": \"http://serilog.net/images/serilog-sink-nuget.png\"\n-  },\n-  \"dependencies\": {\n-    \"Serilog\": \"2.3.0\"\n-  },\n-  \"buildOptions\": {\n-    \"keyFile\": \"../../assets/Serilog.snk\",\n-    \"xmlDoc\": true\n-  },\n-  \"frameworks\": {\n-    \"net4.5\": {\n-      \"buildOptions\": { \"define\": [ \"ATOMIC_APPEND\" ] }\n-    },\n-    \"netstandard1.3\": {\n-      \"buildOptions\": { \"define\": [ \"OS_MUTEX\" ] },\n-      \"dependencies\": {\n-        \"System.IO\": \"4.1.0\",\n-        \"System.IO.FileSystem\": \"4.0.1\",\n-        \"System.IO.FileSystem.Primitives\": \"4.0.1\",\n-        \"System.Text.Encoding.Extensions\": \"4.0.11\",\n-        \"System.Threading.Timer\": \"4.0.1\",\n-        \"System.Threading\": \"4.0.11\"\n-      }\n-    }\n-  }\n-}"
    },
    {
      "sha": "051565550a943f7409a4c093f227c77ce54d5f89",
      "filename": "test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/FileLoggerConfigurationExtensionsTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -5,7 +5,7 @@\n using Xunit;\n using System.IO;\n \n-namespace Serilog.Tests\n+namespace Serilog.Sinks.File.Tests\n {\n     public class FileLoggerConfigurationExtensionsTests\n     {\n@@ -78,5 +78,13 @@ public void WhenFlushingToDiskReportedSharedFileSinkCanBeCreatedAndDisposed()\n                 Thread.Sleep(TimeSpan.FromSeconds(1));\n             }\n         }\n+\n+        [Fact]\n+        public void BufferingIsNotAvailableWhenSharingEnabled()\n+        {\n+            Assert.Throws<ArgumentException>(() =>\n+                new LoggerConfiguration()\n+                    .WriteTo.File(\"logs\", buffered: true, shared: true));\n+        }\n     }\n }"
    },
    {
      "sha": "ea9a5d48c505e1d9c0a179af22bed8a3157b7b7f",
      "filename": "test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/FileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/FileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,11 +1,11 @@\n-﻿using System;\n-using System.IO;\n+﻿using System.IO;\n using Xunit;\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File.Tests.Support;\n using Serilog.Tests.Support;\n using System.Text;\n-using Serilog.Tests;\n+\n+#pragma warning disable 618\n \n namespace Serilog.Sinks.File.Tests\n {\n@@ -116,11 +116,10 @@ public void WhenLimitIsSpecifiedAndEncodingHasPreambleDataIsCorrectlyAppendedToF\n         [Fact]\n         public void WhenLimitIsNotSpecifiedAndEncodingHasPreambleDataIsCorrectlyAppendedToFileSink()\n         {\n-            long? maxBytes = null;\n             var encoding = Encoding.UTF8;\n \n             Assert.True(encoding.GetPreamble().Length > 0);\n-            WriteTwoEventsAndCheckOutputFileLength(maxBytes, encoding);\n+            WriteTwoEventsAndCheckOutputFileLength(null, encoding);\n         }\n \n         [Fact]\n@@ -136,11 +135,10 @@ public void WhenLimitIsSpecifiedAndEncodingHasNoPreambleDataIsCorrectlyAppendedT\n         [Fact]\n         public void WhenLimitIsNotSpecifiedAndEncodingHasNoPreambleDataIsCorrectlyAppendedToFileSink()\n         {\n-            long? maxBytes = null;\n             var encoding = new UTF8Encoding(false);\n \n             Assert.Equal(0, encoding.GetPreamble().Length);\n-            WriteTwoEventsAndCheckOutputFileLength(maxBytes, encoding);\n+            WriteTwoEventsAndCheckOutputFileLength(null, encoding);\n         }\n \n         static void WriteTwoEventsAndCheckOutputFileLength(long? maxBytes, Encoding encoding)"
    },
    {
      "sha": "3efe3f94e18b657170430b8058fe1cba287ab57c",
      "filename": "test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "status": "added",
      "additions": 177,
      "deletions": 0,
      "changes": 177,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/RollingFileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,177 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using Xunit;\n+using Serilog.Events;\n+using Serilog.Sinks.File.Tests.Support;\n+using Serilog.Configuration;\n+\n+namespace Serilog.Sinks.File.Tests\n+{\n+    public class RollingFileSinkTests\n+    {\n+        [Fact]\n+        public void LogEventsAreEmittedToTheFileNamedAccordingToTheEventTimestamp()\n+        {\n+            TestRollingEventSequence(Some.InformationEvent());\n+        }\n+\n+        [Fact]\n+        public void EventsAreWrittenWhenSharingIsEnabled()\n+        {\n+            TestRollingEventSequence(\n+                (pf, wt) => wt.File(pf, shared: true, rollingInterval: RollingInterval.Day),\n+                new[] { Some.InformationEvent() });\n+        }\n+\n+        [Fact]\n+        public void EventsAreWrittenWhenBufferingIsEnabled()\n+        {\n+            TestRollingEventSequence(\n+                (pf, wt) => wt.File(pf, buffered: true, rollingInterval: RollingInterval.Day),\n+                new[] { Some.InformationEvent() });\n+        }\n+\n+        [Fact]\n+        public void EventsAreWrittenWhenDiskFlushingIsEnabled()\n+        {\n+            // Doesn't test flushing, but ensures we haven't broken basic logging\n+            TestRollingEventSequence(\n+                (pf, wt) => wt.File(pf, flushToDiskInterval: TimeSpan.FromMilliseconds(50), rollingInterval: RollingInterval.Day),\n+                new[] { Some.InformationEvent() });\n+        }\n+\n+        [Fact]\n+        public void WhenTheDateChangesTheCorrectFileIsWritten()\n+        {\n+            var e1 = Some.InformationEvent();\n+            var e2 = Some.InformationEvent(e1.Timestamp.AddDays(1));\n+            TestRollingEventSequence(e1, e2);\n+        }\n+\n+        [Fact]\n+        public void WhenRetentionCountIsSetOldFilesAreDeleted()\n+        {\n+            LogEvent e1 = Some.InformationEvent(),\n+                e2 = Some.InformationEvent(e1.Timestamp.AddDays(1)),\n+                e3 = Some.InformationEvent(e2.Timestamp.AddDays(5));\n+\n+            TestRollingEventSequence(\n+                (pf, wt) => wt.File(pf, retainedFileCountLimit: 2, rollingInterval: RollingInterval.Day),\n+                new[] {e1, e2, e3},\n+                files =>\n+                {\n+                    Assert.Equal(3, files.Count);\n+                    Assert.True(!System.IO.File.Exists(files[0]));\n+                    Assert.True(System.IO.File.Exists(files[1]));\n+                    Assert.True(System.IO.File.Exists(files[2]));\n+                });\n+        }\n+\n+        [Fact]\n+        public void WhenSizeLimitIsBreachedNewFilesCreated()\n+        {\n+            var fileName = Some.String() + \".txt\";\n+            using (var temp = new TempFolder())\n+            using (var log = new LoggerConfiguration()\n+                .WriteTo.File(Path.Combine(temp.Path, fileName), rollOnFileSizeLimit: true, fileSizeLimitBytes: 1)\n+                .CreateLogger())\n+            {\n+                LogEvent e1 = Some.InformationEvent(),\n+                    e2 = Some.InformationEvent(e1.Timestamp),\n+                    e3 = Some.InformationEvent(e1.Timestamp);\n+\n+                log.Write(e1); log.Write(e2); log.Write(e3);\n+\n+                var files = Directory.GetFiles(temp.Path)\n+                    .OrderBy(p => p, StringComparer.OrdinalIgnoreCase)\n+                    .ToArray();\n+\n+                Assert.Equal(3, files.Length);\n+                Assert.True(files[0].EndsWith(fileName), files[0]);\n+                Assert.True(files[1].EndsWith(\"_001.txt\"), files[1]);\n+                Assert.True(files[2].EndsWith(\"_002.txt\"), files[2]);\n+            }\n+        }\n+\n+        [Fact]\n+        public void IfTheLogFolderDoesNotExistItWillBeCreated()\n+        {\n+            var fileName = Some.String() + \"-{Date}.txt\";\n+            var temp = Some.TempFolderPath();\n+            var folder = Path.Combine(temp, Guid.NewGuid().ToString());\n+            var pathFormat = Path.Combine(folder, fileName);\n+\n+            ILogger log = null;\n+\n+            try\n+            {\n+                log = new LoggerConfiguration()\n+                    .WriteTo.File(pathFormat, retainedFileCountLimit: 3, rollingInterval: RollingInterval.Day)\n+                    .CreateLogger();\n+\n+                log.Write(Some.InformationEvent());\n+\n+                Assert.True(Directory.Exists(folder));\n+            }\n+            finally\n+            {\n+                var disposable = (IDisposable)log;\n+                if (disposable != null) disposable.Dispose();\n+                Directory.Delete(temp, true);\n+            }\n+        }\n+\n+        [Fact]\n+        public void AssemblyVersionIsFixedAt200()\n+        {\n+            var assembly = typeof(FileLoggerConfigurationExtensions).GetTypeInfo().Assembly;\n+            Assert.Equal(\"2.0.0.0\", assembly.GetName().Version.ToString(4));\n+        }\n+\n+        static void TestRollingEventSequence(params LogEvent[] events)\n+        {\n+            TestRollingEventSequence(\n+                (pf, wt) => wt.File(pf, retainedFileCountLimit: null, rollingInterval: RollingInterval.Day),\n+                events);\n+        }\n+\n+        static void TestRollingEventSequence(\n+            Action<string, LoggerSinkConfiguration> configureFile,\n+            IEnumerable<LogEvent> events,\n+            Action<IList<string>> verifyWritten = null)\n+        {\n+            var fileName = Some.String() + \"-.txt\";\n+            var folder = Some.TempFolderPath();\n+            var pathFormat = Path.Combine(folder, fileName);\n+\n+            var config = new LoggerConfiguration();\n+            configureFile(pathFormat, config.WriteTo);\n+            var log = config.CreateLogger();\n+\n+            var verified = new List<string>();\n+\n+            try\n+            {\n+                foreach (var @event in events)\n+                {\n+                    Clock.SetTestDateTimeNow(@event.Timestamp.DateTime);\n+                    log.Write(@event);\n+\n+                    var expected = pathFormat.Replace(\".txt\", @event.Timestamp.ToString(\"yyyyMMdd\") + \".txt\");\n+                    Assert.True(System.IO.File.Exists(expected));\n+\n+                    verified.Add(expected);\n+                }\n+            }\n+            finally\n+            {\n+                log.Dispose();\n+                verifyWritten?.Invoke(verified);\n+                Directory.Delete(folder, true);\n+            }\n+        }\n+    }\n+}"
    },
    {
      "sha": "2d97d1bbc8f8ad905bbc879f756c6979add4de56",
      "filename": "test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/RollingIntervalExtensionsTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,34 @@\n+﻿using System;\n+using Xunit;\n+\n+namespace Serilog.Sinks.File.Tests\n+{\n+    public class RollingIntervalExtensionsTests\n+    {\n+        public static object[][] IntervalInstantCurrentNextCheckpoint => new[]\n+        {\n+            new object[]{ RollingInterval.Infinite, new DateTime(2018, 01, 01),           null, null },\n+            new object[]{ RollingInterval.Year,     new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2019, 01, 01) },\n+            new object[]{ RollingInterval.Year,     new DateTime(2018, 06, 01),           new DateTime(2018, 01, 01), new DateTime(2019, 01, 01) },\n+            new object[]{ RollingInterval.Month,    new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2018, 02, 01) },\n+            new object[]{ RollingInterval.Month,    new DateTime(2018, 01, 14),           new DateTime(2018, 01, 01), new DateTime(2018, 02, 01) },\n+            new object[]{ RollingInterval.Day,      new DateTime(2018, 01, 01),           new DateTime(2018, 01, 01), new DateTime(2018, 01, 02) },\n+            new object[]{ RollingInterval.Day,      new DateTime(2018, 01, 01, 12, 0, 0), new DateTime(2018, 01, 01), new DateTime(2018, 01, 02) },\n+            new object[]{ RollingInterval.Hour,     new DateTime(2018, 01, 01, 0, 0, 0),  new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 1, 0, 0) },\n+            new object[]{ RollingInterval.Hour,     new DateTime(2018, 01, 01, 0, 30, 0), new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 1, 0, 0) },\n+            new object[]{ RollingInterval.Minute,   new DateTime(2018, 01, 01, 0, 0, 0),  new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 0, 1, 0) },\n+            new object[]{ RollingInterval.Minute,   new DateTime(2018, 01, 01, 0, 0, 30), new DateTime(2018, 01, 01), new DateTime(2018, 01, 01, 0, 1, 0) }\n+        };\n+\n+        [Theory]\n+        [MemberData(nameof(IntervalInstantCurrentNextCheckpoint))]\n+        public void NextIntervalTests(RollingInterval interval, DateTime instant, DateTime? currentCheckpoint, DateTime? nextCheckpoint)\n+        {\n+            var current = interval.GetCurrentCheckpoint(instant);\n+            Assert.Equal(currentCheckpoint, current);\n+\n+            var next = interval.GetNextCheckpoint(instant);\n+            Assert.Equal(nextCheckpoint, next);\n+        }\n+    }\n+}"
    },
    {
      "sha": "3491e32d731e7267e488215061a55791d99c004b",
      "filename": "test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.csproj?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,36 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFrameworks>net452;netcoreapp1.0;netcoreapp2.0</TargetFrameworks>\n+    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n+    <AssemblyName>Serilog.Sinks.File.Tests</AssemblyName>\n+    <AssemblyOriginatorKeyFile>../../assets/Serilog.snk</AssemblyOriginatorKeyFile>\n+    <SignAssembly>true</SignAssembly>\n+    <PublicSign Condition=\" '$(OS)' != 'Windows_NT' \">true</PublicSign>\n+    <PackageId>Serilog.Sinks.RollingFile.Tests</PackageId>\n+    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>\n+    <PackageTargetFallback Condition=\" '$(TargetFramework)' == 'netcoreapp1.0' \">$(PackageTargetFallback);dnxcore50;portable-net45+win8</PackageTargetFallback>\n+    <RuntimeFrameworkVersion Condition=\" '$(TargetFramework)' == 'netcoreapp1.0' \">1.0.4</RuntimeFrameworkVersion>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\..\\src\\Serilog.Sinks.File\\Serilog.Sinks.File.csproj\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.0.0\" />\n+    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0\" />\n+    <PackageReference Include=\"xunit\" Version=\"2.2.0\" />\n+  </ItemGroup>\n+\n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'net452' \">\n+    <Reference Include=\"System\" />\n+    <Reference Include=\"Microsoft.CSharp\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />\n+  </ItemGroup>\n+\n+\n+</Project>"
    },
    {
      "sha": "3234f8a6db99c845968fa18ea9c358f8fac03232",
      "filename": "test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "status": "removed",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Serilog.Sinks.File.Tests.xproj?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,21 +0,0 @@\n-﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <PropertyGroup>\n-    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">14.0</VisualStudioVersion>\n-    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\n-  </PropertyGroup>\n-  <Import Project=\"$(VSToolsPath)\\DNX\\Microsoft.DNX.Props\" Condition=\"'$(VSToolsPath)' != ''\" />\n-  <PropertyGroup Label=\"Globals\">\n-    <ProjectGuid>3c2d8e01-5580-426a-bdd9-ec59cd98e618</ProjectGuid>\n-    <RootNamespace>Serilog.Tests</RootNamespace>\n-    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)'=='' \">.\\obj</BaseIntermediateOutputPath>\n-    <OutputPath Condition=\"'$(OutputPath)'=='' \">.\\bin\\</OutputPath>\n-  </PropertyGroup>\n-  <PropertyGroup>\n-    <SchemaVersion>2.0</SchemaVersion>\n-  </PropertyGroup>\n-  <ItemGroup>\n-    <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />\n-  </ItemGroup>\n-  <Import Project=\"$(VSToolsPath)\\DotNet\\Microsoft.DotNet.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\n-</Project>\n\\ No newline at end of file"
    },
    {
      "sha": "565be9bf4329a1db4d4677ea83cb166f2598a8e5",
      "filename": "test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/SharedFileSinkTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -2,7 +2,8 @@\n using Xunit;\n using Serilog.Formatting.Json;\n using Serilog.Sinks.File.Tests.Support;\n-using Serilog.Tests.Support;\n+\n+#pragma warning disable 618\n \n namespace Serilog.Sinks.File.Tests\n {"
    },
    {
      "sha": "244ae5cad83a68cbf863fba666bea2879eae4809",
      "filename": "test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/CollectingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,21 @@\n+﻿using System.Collections.Generic;\n+using System.Linq;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    class CollectingSink : ILogEventSink\n+    {\n+        readonly List<LogEvent> _events = new List<LogEvent>();\n+\n+        public List<LogEvent> Events { get { return _events; } }\n+\n+        public LogEvent SingleEvent { get { return _events.Single(); } }\n+ \n+        public void Emit(LogEvent logEvent)\n+        {\n+            _events.Add(logEvent);\n+        }\n+    }\n+}"
    },
    {
      "sha": "3ac997449f0698aca8719dab75ebd523e5cc8c89",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegateDisposable.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,24 @@\n+using System;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    public class DelegateDisposable : IDisposable\n+    {\n+        private readonly Action _disposeAction;\n+        private bool _disposed;\n+\n+        public DelegateDisposable(Action disposeAction)\n+        {\n+            _disposeAction = disposeAction;\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_disposed)\n+                return;\n+\n+            _disposeAction();\n+            _disposed = true;\n+        }\n+    }\n+}"
    },
    {
      "sha": "0a480fb770801108661f407bf332e94fa02ecbe6",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegatingEnricher.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,22 @@\n+﻿using System;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    class DelegatingEnricher : ILogEventEnricher\n+    {\n+        readonly Action<LogEvent, ILogEventPropertyFactory> _enrich;\n+\n+        public DelegatingEnricher(Action<LogEvent, ILogEventPropertyFactory> enrich)\n+        {\n+            if (enrich == null) throw new ArgumentNullException(nameof(enrich));\n+            _enrich = enrich;\n+        }\n+\n+        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n+        {\n+            _enrich(logEvent, propertyFactory);\n+        }\n+    }\n+}"
    },
    {
      "sha": "9d81cc21f9956c5bec67f38c2089ad9a7622bc22",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DelegatingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,33 @@\n+﻿using System;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    public class DelegatingSink : ILogEventSink\n+    {\n+        readonly Action<LogEvent> _write;\n+\n+        public DelegatingSink(Action<LogEvent> write)\n+        {\n+            if (write == null) throw new ArgumentNullException(nameof(write));\n+            _write = write;\n+        }\n+\n+        public void Emit(LogEvent logEvent)\n+        {\n+            _write(logEvent);\n+        }\n+\n+        public static LogEvent GetLogEvent(Action<ILogger> writeAction)\n+        {\n+            LogEvent result = null;\n+            var l = new LoggerConfiguration()\n+                .WriteTo.Sink(new DelegatingSink(le => result = le))\n+                .CreateLogger();\n+\n+            writeAction(l);\n+            return result;\n+        }\n+    }\n+}"
    },
    {
      "sha": "befcbd489c4ceee07617cce2dbd6d1d4df29974d",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "status": "added",
      "additions": 422,
      "deletions": 0,
      "changes": 422,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DisposableLogger.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,422 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    public class DisposableLogger : ILogger, IDisposable\n+    {\n+        public bool Disposed { get; set; }\n+\n+        public void Dispose()\n+        {\n+            Disposed = true;\n+        }\n+\n+        public ILogger ForContext(ILogEventEnricher enricher)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public ILogger ForContext(IEnumerable<ILogEventEnricher> enrichers)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public ILogger ForContext(string propertyName, object value, bool destructureObjects = false)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public ILogger ForContext<TSource>()\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public ILogger ForContext(Type source)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write(LogEvent logEvent)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write(LogEventLevel level, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T>(LogEventLevel level, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T0, T1>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T0, T1, T2>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write(LogEventLevel level, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write(LogEventLevel level, Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T>(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T0, T1>(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0,\n+            T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write<T0, T1, T2>(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0,\n+            T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Write(LogEventLevel level, Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public bool IsEnabled(LogEventLevel level)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Verbose(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Debug(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Information(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Warning(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Error(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal(string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T>(string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal(string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal(Exception exception, string messageTemplate)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T>(Exception exception, string messageTemplate, T propertyValue)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T0, T1>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal<T0, T1, T2>(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1,\n+            T2 propertyValue2)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public void Fatal(Exception exception, string messageTemplate, params object[] propertyValues)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public bool BindMessageTemplate(string messageTemplate, object[] propertyValues, out MessageTemplate parsedTemplate,\n+            out IEnumerable<LogEventProperty> boundProperties)\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        public bool BindProperty(string propertyName, object value, bool destructureObjects, out LogEventProperty property)\n+        {\n+            throw new NotImplementedException();\n+        }\n+    }\n+}"
    },
    {
      "sha": "29cac56b6f1b361ccd36d2b96301636daa99f4ab",
      "filename": "test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/DisposeTrackingSink.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,20 @@\n+﻿using System;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    class DisposeTrackingSink : ILogEventSink, IDisposable\n+    {\n+        public bool IsDisposed { get; set; }\n+\n+        public void Emit(LogEvent logEvent)\n+        {            \n+        }\n+\n+        public void Dispose()\n+        {\n+            IsDisposed = true;\n+        }\n+    }\n+}"
    },
    {
      "sha": "a31122d5f5525f401a57d866b6290b7f5f6f47f0",
      "filename": "test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Extensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/Extensions.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,12 @@\n+﻿using Serilog.Events;\n+\n+namespace Serilog.Sinks.File.Tests.Support\n+{\n+    public static class Extensions\n+    {\n+        public static object LiteralValue(this LogEventPropertyValue @this)\n+        {\n+            return ((ScalarValue)@this).Value;\n+        }\n+    }\n+}"
    },
    {
      "sha": "2d29d4d513c0d72f213153365c1d9b09ab1909f0",
      "filename": "test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "status": "modified",
      "additions": 80,
      "deletions": 1,
      "changes": 81,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/Some.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/Some.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -1,12 +1,48 @@\n ﻿using System;\n using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n using Serilog.Events;\n+using Serilog.Parsing;\n using Xunit.Sdk;\n \n-namespace Serilog.Tests.Support\n+namespace Serilog.Sinks.File.Tests.Support\n {\n     static class Some\n     {\n+        static int _counter;\n+\n+        public static int Int()\n+        {\n+            return Interlocked.Increment(ref _counter);\n+        }\n+\n+        public static decimal Decimal()\n+        {\n+            return Int() + 0.123m;\n+        }\n+\n+        public static string String(string tag = null)\n+        {\n+            return (tag ?? \"\") + \"__\" + Int();\n+        }\n+\n+        public static TimeSpan TimeSpan()\n+        {\n+            return System.TimeSpan.FromMinutes(Int());\n+        }\n+\n+        public static DateTime Instant()\n+        {\n+            return new DateTime(2012, 10, 28) + TimeSpan();\n+        }\n+\n+        public static DateTimeOffset OffsetInstant()\n+        {\n+            return new DateTimeOffset(Instant());\n+        }\n+\n         public static LogEvent LogEvent(string messageTemplate, params object[] propertyValues)\n         {\n             var log = new LoggerConfiguration().CreateLogger();\n@@ -20,5 +56,48 @@ public static LogEvent LogEvent(string messageTemplate, params object[] property\n             }\n             return new LogEvent(DateTimeOffset.Now, LogEventLevel.Information, null, template, properties);\n         }\n+\n+        public static LogEvent LogEvent(DateTimeOffset? timestamp = null, LogEventLevel level = LogEventLevel.Information)\n+        {\n+            return new LogEvent(timestamp ?? OffsetInstant(), level,\n+                null, MessageTemplate(), Enumerable.Empty<LogEventProperty>());\n+        }\n+\n+        public static LogEvent InformationEvent(DateTimeOffset? timestamp = null)\n+        {\n+            return LogEvent(timestamp, LogEventLevel.Information);\n+        }\n+\n+        public static LogEvent DebugEvent(DateTimeOffset? timestamp = null)\n+        {\n+            return LogEvent(timestamp, LogEventLevel.Debug);\n+        }\n+\n+        public static LogEventProperty LogEventProperty()\n+        {\n+            return new LogEventProperty(String(), new ScalarValue(Int()));\n+        }\n+\n+        public static string NonexistentTempFilePath()\n+        {\n+            return Path.Combine(Path.GetTempPath(), Guid.NewGuid() + \".txt\");\n+        }\n+\n+        public static string TempFilePath()\n+        {\n+            return Path.GetTempFileName();\n+        }\n+\n+        public static string TempFolderPath()\n+        {\n+            var dir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());\n+            Directory.CreateDirectory(dir);\n+            return dir;\n+        }\n+\n+        public static MessageTemplate MessageTemplate()\n+        {\n+            return new MessageTemplateParser().Parse(String());\n+        }\n     }\n }"
    },
    {
      "sha": "7ff90f85cdecb3bc7a20b227526c56e1f952bd0c",
      "filename": "test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/Support/TempFolder.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -11,13 +11,13 @@ class TempFolder : IDisposable\n \n         readonly string _tempFolder;\n \n-        public TempFolder(string name)\n+        public TempFolder(string name = null)\n         {\n             _tempFolder = System.IO.Path.Combine(\n-                Environment.GetEnvironmentVariable(\"TMP\"),\n+                Environment.GetEnvironmentVariable(\"TMP\") ?? Environment.GetEnvironmentVariable(\"TMPDIR\") ?? \"/tmp\",\n                 \"Serilog.Sinks.File.Tests\",\n                 Session.ToString(\"n\"),\n-                name);\n+                name ?? Guid.NewGuid().ToString(\"n\"));\n \n             Directory.CreateDirectory(_tempFolder);\n         }"
    },
    {
      "sha": "5e1b015d6e694d8c66db88df3b4dc444d92f17e3",
      "filename": "test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "status": "added",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/6d463c050b26ea052c82af9d7fafa0c6e4b7e50d/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/TemplatedPathRollerTests.cs?ref=6d463c050b26ea052c82af9d7fafa0c6e4b7e50d",
      "patch": "@@ -0,0 +1,104 @@\n+﻿using System;\n+using System.IO;\n+using System.Linq;\n+using Xunit;\n+\n+namespace Serilog.Sinks.File.Tests\n+{\n+    public class PathRollerTests\n+    {\n+        [Fact]\n+        public void TheLogFileIncludesDateToken()\n+        {\n+            var roller = new PathRoller(Path.Combine(\"Logs\", \"log-.txt\"), RollingInterval.Day);\n+            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n+            string path;\n+            roller.GetLogFilePath(now, null, out path);\n+            AssertEqualAbsolute(Path.Combine(\"Logs\", \"log-20130714.txt\"), path);\n+        }\n+\n+        [Fact]\n+        public void ANonZeroIncrementIsIncludedAndPadded()\n+        {\n+            var roller = new PathRoller(Path.Combine(\"Logs\", \"log-.txt\"), RollingInterval.Day);\n+            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n+            string path;\n+            roller.GetLogFilePath(now, 12, out path);\n+            AssertEqualAbsolute(Path.Combine(\"Logs\", \"log-20130714_012.txt\"), path);\n+        }\n+\n+        static void AssertEqualAbsolute(string path1, string path2)\n+        {\n+            var abs1 = Path.GetFullPath(path1);\n+            var abs2 = Path.GetFullPath(path2);\n+            Assert.Equal(abs1, abs2);\n+        }\n+\n+        [Fact]\n+        public void TheRollerReturnsTheLogFileDirectory()\n+        {\n+            var roller = new PathRoller(Path.Combine(\"Logs\", \"log-.txt\"), RollingInterval.Day);\n+            AssertEqualAbsolute(\"Logs\", roller.LogFileDirectory);\n+        }\n+\n+        [Fact]\n+        public void TheLogFileIsNotRequiredToIncludeAnExtension()\n+        {\n+            var roller = new PathRoller(Path.Combine(\"Logs\", \"log-\"), RollingInterval.Day);\n+            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n+            string path;\n+            roller.GetLogFilePath(now, null, out path);\n+            AssertEqualAbsolute(Path.Combine(\"Logs\", \"log-20130714\"), path);\n+        }\n+\n+        [Fact]\n+        public void TheLogFileIsNotRequiredToIncludeADirectory()\n+        {\n+            var roller = new PathRoller(\"log-\", RollingInterval.Day);\n+            var now = new DateTime(2013, 7, 14, 3, 24, 9, 980);\n+            string path;\n+            roller.GetLogFilePath(now, null, out path);\n+            AssertEqualAbsolute(\"log-20130714\", path);\n+        }\n+\n+        [Fact]\n+        public void MatchingExcludesSimilarButNonmatchingFiles()\n+        {\n+            var roller = new PathRoller(\"log-.txt\", RollingInterval.Day);\n+            const string similar1 = \"log-0.txt\";\n+            const string similar2 = \"log-helloyou.txt\";\n+            var matched = roller.SelectMatches(new[] { similar1, similar2 });\n+            Assert.Equal(0, matched.Count());\n+        }\n+\n+        [Fact]\n+        public void TheDirectorSearchPatternUsesWildcardInPlaceOfDate()\n+        {\n+            var roller = new PathRoller(Path.Combine(\"Logs\", \"log-.txt\"), RollingInterval.Day);\n+            Assert.Equal(\"log-*.txt\", roller.DirectorySearchPattern);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"log-.txt\", \"log-20131210.txt\", \"log-20131210_031.txt\", RollingInterval.Day)]\n+        [InlineData(\"log-.txt\", \"log-2013121013.txt\", \"log-2013121013_031.txt\", RollingInterval.Hour)]\n+        public void MatchingSelectsFiles(string template, string zeroth, string thirtyFirst, RollingInterval interval)\n+        {\n+            var roller = new PathRoller(template, interval);\n+            var matched = roller.SelectMatches(new[] { zeroth, thirtyFirst }).ToArray();\n+            Assert.Equal(2, matched.Length);\n+            Assert.Equal(null, matched[0].SequenceNumber);\n+            Assert.Equal(31, matched[1].SequenceNumber);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"log-.txt\", \"log-20150101.txt\", \"log-20141231.txt\", RollingInterval.Day)]\n+        [InlineData(\"log-.txt\", \"log-2015010110.txt\", \"log-2015010109.txt\", RollingInterval.Hour)]\n+        public void MatchingParsesSubstitutions(string template, string newer, string older, RollingInterval interval)\n+        {\n+            var roller = new PathRoller(template, interval);\n+            var matched = roller.SelectMatches(new[] { older, newer }).OrderByDescending(m => m.DateTime).Select(m => m.Filename).ToArray();\n+            Assert.Equal(new[] { newer, older }, matched);\n+        }\n+    }\n+}\n+"
    },
    {
      "sha": "3f14b0e649f30810f330fc591210ee616eb9669c",
      "filename": "test/Serilog.Sinks.File.Tests/project.json",
      "status": "removed",
      "additions": 0,
      "deletions": 24,
      "changes": 24,
      "blob_url": "https://github.com/serilog/serilog-sinks-file/blob/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/project.json",
      "raw_url": "https://github.com/serilog/serilog-sinks-file/raw/c8418ed96ad8c02fa4b472b03459153175adb4d6/test/Serilog.Sinks.File.Tests/project.json",
      "contents_url": "https://api.github.com/repos/serilog/serilog-sinks-file/contents/test/Serilog.Sinks.File.Tests/project.json?ref=c8418ed96ad8c02fa4b472b03459153175adb4d6",
      "patch": "@@ -1,24 +0,0 @@\n-{\n-  \"testRunner\": \"xunit\",\n-  \"dependencies\": {\n-    \"Serilog.Sinks.File\": { \"target\": \"project\" },\n-    \"xunit\": \"2.1.0\",\n-    \"dotnet-test-xunit\": \"1.0.0-rc2-build10025\"\n-  },\n-  \"frameworks\": {\n-    \"netcoreapp1.0\": {\n-      \"dependencies\": {\n-        \"Microsoft.NETCore.App\": {\n-          \"type\": \"platform\",\n-          \"version\": \"1.0.0\"\n-        }\n-      },\n-      \"imports\": [\n-        \"dnxcore50\",\n-        \"portable-net45+win8\"\n-      ]\n-    },\n-    \"net4.5.2\": {\n-    }\n-  }\n-}"
    }
  ]
}