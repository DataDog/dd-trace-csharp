{
  "sha": "870feca66f81844ed279998a4d28a3b2614bbd7a",
  "node_id": "MDY6Q29tbWl0ODE5ODUxMTo4NzBmZWNhNjZmODE4NDRlZDI3OTk5OGE0ZDI4YTNiMjYxNGJiZDdh",
  "commit": {
    "author": {
      "name": "Nicholas Blumhardt",
      "email": "nblumhardt@nblumhardt.com",
      "date": "2019-01-16T23:24:01Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-01-16T23:24:01Z"
    },
    "message": "Merge pull request #1271 from serilog/dev\n\n2.8.0 Release",
    "tree": {
      "sha": "ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf",
      "url": "https://api.github.com/repos/serilog/serilog/git/trees/ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf"
    },
    "url": "https://api.github.com/repos/serilog/serilog/git/commits/870feca66f81844ed279998a4d28a3b2614bbd7a",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcP70RCRBK7hj4Ov3rIwAAdHIIAA221tbSOb0pETYUCJspvNqX\necMFH8adX0Qpze43uTV6e898NVh/TsH4UiWmDRzsUTDWL9fAcML5TtUXHu4NVKIk\nUUCcrBwu5BwFLnyYp3v5Z3Iu1z5yWanZwuxmGnWhUgq7HaoRyAGhrG/4yKWq/xk1\nWKbcfuvORk/30173EthVhuXLObdpxiUEL/vDPMrrOldGrgcurumUzgaSHIoWs1Qc\n1rCHceJnRLJxsJJxo+WxoH6sUC/Ab1GJOrAzu71f08z4fiMEoIWsftHbjbxURwlw\nqsTCWTwxGM7YcZXN6A1cctMesaD55U7WyHWK3MJcb81MEf3IhS9pCdj43gi8A7I=\n=UhaB\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ddab2da66f16ea0815edb34c35eb8ebb2bf1acbf\nparent 12ca0599315758d97d4fdccf0cf4db71029cbd4d\nparent f1972698c3912a8ded1f72829026608400cd66bc\nauthor Nicholas Blumhardt <nblumhardt@nblumhardt.com> 1547681041 +1000\ncommitter GitHub <noreply@github.com> 1547681041 +1000\n\nMerge pull request #1271 from serilog/dev\n\n2.8.0 Release"
    }
  },
  "url": "https://api.github.com/repos/serilog/serilog/commits/870feca66f81844ed279998a4d28a3b2614bbd7a",
  "html_url": "https://github.com/serilog/serilog/commit/870feca66f81844ed279998a4d28a3b2614bbd7a",
  "comments_url": "https://api.github.com/repos/serilog/serilog/commits/870feca66f81844ed279998a4d28a3b2614bbd7a/comments",
  "author": {
    "login": "nblumhardt",
    "id": 342712,
    "node_id": "MDQ6VXNlcjM0MjcxMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/342712?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nblumhardt",
    "html_url": "https://github.com/nblumhardt",
    "followers_url": "https://api.github.com/users/nblumhardt/followers",
    "following_url": "https://api.github.com/users/nblumhardt/following{/other_user}",
    "gists_url": "https://api.github.com/users/nblumhardt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nblumhardt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nblumhardt/subscriptions",
    "organizations_url": "https://api.github.com/users/nblumhardt/orgs",
    "repos_url": "https://api.github.com/users/nblumhardt/repos",
    "events_url": "https://api.github.com/users/nblumhardt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nblumhardt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "12ca0599315758d97d4fdccf0cf4db71029cbd4d",
      "url": "https://api.github.com/repos/serilog/serilog/commits/12ca0599315758d97d4fdccf0cf4db71029cbd4d",
      "html_url": "https://github.com/serilog/serilog/commit/12ca0599315758d97d4fdccf0cf4db71029cbd4d"
    },
    {
      "sha": "f1972698c3912a8ded1f72829026608400cd66bc",
      "url": "https://api.github.com/repos/serilog/serilog/commits/f1972698c3912a8ded1f72829026608400cd66bc",
      "html_url": "https://github.com/serilog/serilog/commit/f1972698c3912a8ded1f72829026608400cd66bc"
    }
  ],
  "stats": {
    "total": 1201,
    "additions": 1111,
    "deletions": 90
  },
  "files": [
    {
      "sha": "a55a9938a24b83eccd4e511ffa3bad8b16fb8737",
      "filename": "CHANGES.md",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/CHANGES.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/CHANGES.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/CHANGES.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,3 +1,33 @@\n+2.7.1\n+ * #1075 - overload of `LoggerSinkConfiguration.Wrap()` accepting `LoggingLevelSwitch`\n+ * #1083 - update package metadata, including `https://` project and icon URLs\n+ * #1091 - make `{Properties:j}` work consistently with the console sink\n+ * #1110 - expose an efficient `Logger.None`\n+ * #1113 - (tooling) improve tests for `LogContext`\n+ * #1136 - (tooling) fix `build.sh` exit code\n+ * #1141 - fix logging of `byte[]` smaller than 1 KB\n+ * #1157 - (tooling) update _.gitignore_\n+ * #1158 - (tooling) re-enable macOS builds\n+ * #1163 - SourceLink v2 support\n+ * #1165 - fix a number of issues with `LoggerSinkConfiguration.Wrap()` affecting `WriteTo.Async()`\n+ * #1134 - (tooling) add README badges for downloads/stats\n+ * #1166 - allow `LoggerConfiguration` to be garbage collected after logger is created\n+ * #1160 - (tooling) update NuGet.org API key\n+ * (tooling) Update to use the latest .NET SDK\n+\n+2.6.0\n+ * #992 - fix `LogContext` remoting issue on .NET Framework 4.5\n+ * #1007 - `LogContext.Suspend()` and `LogContext.Reset()` to pass or drop context from child tasks\n+ * #1018 - include source in NUPKGs\n+ * #1020 - support for `LoggingLevelSwitch` in key-value/`<appSettings>` settings\n+ * #1033 - warn when `MinimumLevel.Override()` is used in a sub-logger\n+ * #1034 - more efficient levelled `ILogger.ForContext()`/`Log.ForContext()`\n+ * #1051 - handle duplicate keys in key-value/`<appSettings>` settings (last-in wins)\n+ * #1064 - support static member references as key-value/`<appSettings>` values\n+ * #1059 - support for abstract class parameters in settings\n+ * #1068 - handle parsing of token width more robustly\n+ * Plus build/documentation items #988, #994, #996, #1019, #842, #1042, #1050, #1055, #1063.\n+\n 2.5.0\n  * #939, #946, #972 - RTM .NET Standard/Core tooling\n  * #955 - `LoggerSinkConfiguration.Wrap()`"
    },
    {
      "sha": "da542a88a2eff587338608054c9b04717e62c466",
      "filename": "build.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/build.sh",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/build.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/build.sh?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -14,6 +14,5 @@ for path in test/*.Tests/*.csproj; do\n done\n \n for path in test/*.PerformanceTests/*.PerformanceTests.csproj; do\n-    dotnet build -f netcoreapp1.1 -c Release ${path}\n-    # dotnet test -f netcoreapp1.1 -c Release ${path}\n+    dotnet build -f netcoreapp2.0  -c Release ${path}\n done"
    },
    {
      "sha": "8c071d87a3428665361de5df5798051275993d20",
      "filename": "results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/AllocationsBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/AllocationsBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,19 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |               Method |          Mean |       Error |        StdDev |        Median |   Scaled | ScaledSD |  Gen 0 | Allocated |\n+ |--------------------- |--------------:|------------:|--------------:|--------------:|---------:|---------:|-------:|----------:|\n+ |             LogEmpty |      8.295 ns |   0.1916 ns |     0.1882 ns |      8.251 ns |     1.00 |     0.00 |      - |       0 B |\n+ | LogEmptyWithEnricher |    129.205 ns |   4.7752 ns |    13.5464 ns |    126.329 ns |    15.58 |     1.66 | 0.0265 |      56 B |\n+ |            LogScalar |    998.006 ns |  19.7947 ns |    48.5568 ns |    993.968 ns |   120.37 |     6.37 | 0.2060 |     432 B |\n+ |        LogDictionary |  6,418.543 ns | 142.5459 ns |   418.0626 ns |  6,304.087 ns |   774.13 |    52.90 | 1.0910 |    2296 B |\n+ |          LogSequence |  2,664.592 ns |  52.9768 ns |   145.9136 ns |  2,655.944 ns |   321.37 |    18.83 | 0.4158 |     880 B |\n+ |         LogAnonymous | 12,776.209 ns | 378.7175 ns | 1,110.7127 ns | 12,563.375 ns | 1,540.91 |   137.42 | 1.6785 |    3528 B |"
    },
    {
      "sha": "39897845d6000ed31e41a60fdbf1d1b04bdf577c",
      "filename": "results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LevelControlBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/LevelControlBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,17 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |         Method |      Mean |     Error |    StdDev | Scaled | ScaledSD |\n+ |--------------- |----------:|----------:|----------:|-------:|---------:|\n+ |            Off |  2.931 ns | 0.0893 ns | 0.0877 ns |   1.00 |     0.00 |\n+ | LevelSwitchOff |  3.636 ns | 0.1048 ns | 0.1029 ns |   1.24 |     0.05 |\n+ | MinimumLevelOn | 10.497 ns | 0.2462 ns | 0.3370 ns |   3.58 |     0.15 |\n+ |  LevelSwitchOn | 10.981 ns | 0.3005 ns | 0.3340 ns |   3.75 |     0.15 |"
    },
    {
      "sha": "381593159d5c3dd76afba4557fba0fb35084766f",
      "filename": "results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,17 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |               Method |      Mean |     Error |     StdDev | Scaled | ScaledSD |\n+ |--------------------- |----------:|----------:|-----------:|-------:|---------:|\n+ |                 Bare |  12.05 ns | 0.3210 ns |  0.5789 ns |   1.00 |     0.00 |\n+ |         PushProperty | 149.67 ns | 2.9527 ns |  3.2820 ns |  12.45 |     0.62 |\n+ |   PushPropertyNested | 296.44 ns | 6.7011 ns | 11.0101 ns |  24.65 |     1.43 |\n+ | PushPropertyEnriched | 304.18 ns | 5.7287 ns |  8.3971 ns |  25.29 |     1.33 |"
    },
    {
      "sha": "c6040821389814868c2ff810852d2fd582ead624",
      "filename": "results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,43 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |     Method | Items | MaxDegreeOfParallelism |        Mean |      Error |      StdDev |      Median | Scaled | ScaledSD |\n+ |----------- |------ |----------------------- |------------:|-----------:|------------:|------------:|-------:|---------:|\n+ | **Dictionary** |    **10** |                     **-1** |   **484.65 us** | **29.5203 us** |  **86.1121 us** |   **475.13 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    10 |                     -1 |    74.78 us |  1.5697 us |   2.8304 us |    73.99 us |   0.16 |     0.03 |\n+ | Concurrent |    10 |                     -1 |    69.52 us |  0.6831 us |   0.5704 us |    69.62 us |   0.15 |     0.03 |\n+ | **Dictionary** |    **10** |                      **1** |   **116.22 us** |  **2.2490 us** |   **2.4998 us** |   **115.86 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    10 |                      1 |   140.77 us |  2.8065 us |   4.1137 us |   140.40 us |   1.21 |     0.04 |\n+ | Concurrent |    10 |                      1 |   132.99 us |  2.2509 us |   1.9954 us |   132.61 us |   1.14 |     0.03 |\n+ | **Dictionary** |    **20** |                     **-1** |   **593.71 us** | **30.5094 us** |  **89.9578 us** |   **602.83 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    20 |                     -1 |   136.36 us |  3.6865 us |  10.5773 us |   133.11 us |   0.24 |     0.04 |\n+ | Concurrent |    20 |                     -1 |   127.68 us |  2.7541 us |   5.1729 us |   125.60 us |   0.22 |     0.03 |\n+ | **Dictionary** |    **20** |                      **1** |   **247.53 us** |  **4.9128 us** |   **8.8589 us** |   **247.69 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    20 |                      1 |   269.34 us |  5.0332 us |   4.7081 us |   270.26 us |   1.09 |     0.04 |\n+ | Concurrent |    20 |                      1 |   265.41 us |  5.0592 us |   4.2247 us |   264.26 us |   1.07 |     0.04 |\n+ | **Dictionary** |    **50** |                     **-1** | **1,344.03 us** | **75.5937 us** | **219.3111 us** | **1,299.64 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    50 |                     -1 |   319.29 us |  6.2183 us |  10.7263 us |   316.55 us |   0.24 |     0.04 |\n+ | Concurrent |    50 |                     -1 |   311.74 us |  6.3992 us |  16.7456 us |   305.20 us |   0.24 |     0.04 |\n+ | **Dictionary** |    **50** |                      **1** |   **580.35 us** | **10.5809 us** |   **9.3797 us** |   **580.59 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |    50 |                      1 |   685.28 us | 16.2339 us |  23.2821 us |   682.71 us |   1.18 |     0.04 |\n+ | Concurrent |    50 |                      1 |   663.75 us | 14.2723 us |  16.9902 us |   664.83 us |   1.14 |     0.03 |\n+ | **Dictionary** |   **100** |                     **-1** | **2,766.91 us** | **70.1788 us** | **206.9237 us** | **2,776.40 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |   100 |                     -1 |   634.39 us | 11.9496 us |  17.8855 us |   632.35 us |   0.23 |     0.02 |\n+ | Concurrent |   100 |                     -1 |   607.86 us | 12.1245 us |  14.8900 us |   605.14 us |   0.22 |     0.02 |\n+ | **Dictionary** |   **100** |                      **1** | **1,145.86 us** | **21.7679 us** |  **19.2966 us** | **1,151.96 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |   100 |                      1 | 1,384.02 us | 26.6146 us |  27.3312 us | 1,386.84 us |   1.21 |     0.03 |\n+ | Concurrent |   100 |                      1 | 1,374.88 us | 30.0217 us |  59.2599 us | 1,363.38 us |   1.20 |     0.05 |\n+ | **Dictionary** |  **1000** |                     **-1** | **2,722.48 us** | **70.6602 us** | **206.1192 us** | **2,724.74 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |  1000 |                     -1 |   634.43 us | 12.5225 us |  19.4960 us |   642.28 us |   0.23 |     0.02 |\n+ | Concurrent |  1000 |                     -1 |   611.38 us | 11.9573 us |  22.1637 us |   609.39 us |   0.23 |     0.02 |\n+ | **Dictionary** |  **1000** |                      **1** | **1,202.34 us** | **27.6262 us** |  **32.8871 us** | **1,196.17 us** |   **1.00** |     **0.00** |\n+ |  Hashtable |  1000 |                      1 | 1,408.56 us | 24.4617 us |  22.8815 us | 1,410.87 us |   1.17 |     0.04 |\n+ | Concurrent |  1000 |                      1 | 1,342.42 us | 19.1854 us |  17.9460 us | 1,338.93 us |   1.12 |     0.03 |"
    },
    {
      "sha": "bf1ffdec5bbbaebb8da094bb58c02d1c01e8ab07",
      "filename": "results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,37 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |     Method | Items | OverflowCount | MaxDegreeOfParallelism |       Mean |      Error |     StdDev |     Median | Scaled | ScaledSD |\n+ |----------- |------ |-------------- |----------------------- |-----------:|-----------:|-----------:|-----------:|-------:|---------:|\n+ | **Dictionary** | **10000** |             **1** |                     **-1** |   **3.809 ms** |  **0.1689 ms** |  **0.4900 ms** |   **3.695 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |             1 |                     -1 |   3.401 ms |  0.0587 ms |  0.0763 ms |   3.386 ms |   0.91 |     0.11 |\n+ | Concurrent | 10000 |             1 |                     -1 | 141.271 ms | 14.7981 ms | 43.6325 ms | 141.945 ms |  37.67 |    12.51 |\n+ | **Dictionary** | **10000** |             **1** |                      **1** |   **1.995 ms** |  **0.0396 ms** |  **0.0617 ms** |   **1.982 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |             1 |                      1 |   2.581 ms |  0.0429 ms |  0.0401 ms |   2.575 ms |   1.30 |     0.04 |\n+ | Concurrent | 10000 |             1 |                      1 | 193.445 ms |  2.1087 ms |  1.9725 ms | 193.561 ms |  97.07 |     3.08 |\n+ | **Dictionary** | **10000** |            **10** |                     **-1** |   **3.300 ms** |  **0.0726 ms** |  **0.2119 ms** |   **3.281 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |            10 |                     -1 |   3.252 ms |  0.0646 ms |  0.1498 ms |   3.232 ms |   0.99 |     0.08 |\n+ | Concurrent | 10000 |            10 |                     -1 |  81.583 ms |  3.0187 ms |  8.9007 ms |  79.069 ms |  24.82 |     3.12 |\n+ | **Dictionary** | **10000** |            **10** |                      **1** |   **1.979 ms** |  **0.0390 ms** |  **0.0449 ms** |   **1.970 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |            10 |                      1 |   2.576 ms |  0.0398 ms |  0.0352 ms |   2.563 ms |   1.30 |     0.03 |\n+ | Concurrent | 10000 |            10 |                      1 | 200.065 ms |  4.9247 ms |  5.8626 ms | 200.199 ms | 101.16 |     3.64 |\n+ | **Dictionary** | **10000** |           **100** |                     **-1** |   **4.076 ms** |  **0.0813 ms** |  **0.2292 ms** |   **4.066 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |           100 |                     -1 |   3.660 ms |  0.0719 ms |  0.1008 ms |   3.653 ms |   0.90 |     0.06 |\n+ | Concurrent | 10000 |           100 |                     -1 | 167.547 ms | 20.0876 ms | 58.2777 ms | 175.712 ms |  41.23 |    14.48 |\n+ | **Dictionary** | **10000** |           **100** |                      **1** |   **2.061 ms** |  **0.0354 ms** |  **0.0331 ms** |   **2.054 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |           100 |                      1 |   2.685 ms |  0.0331 ms |  0.0310 ms |   2.685 ms |   1.30 |     0.02 |\n+ | Concurrent | 10000 |           100 |                      1 | 198.448 ms |  2.5433 ms |  2.3790 ms | 198.288 ms |  96.31 |     1.86 |\n+ | **Dictionary** | **10000** |          **1000** |                     **-1** |   **3.923 ms** |  **0.1650 ms** |  **0.4788 ms** |   **3.865 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |          1000 |                     -1 |   3.870 ms |  0.0766 ms |  0.1907 ms |   3.862 ms |   1.00 |     0.13 |\n+ | Concurrent | 10000 |          1000 |                     -1 | 207.440 ms | 23.7700 ms | 70.0864 ms | 182.505 ms |  53.66 |    19.30 |\n+ | **Dictionary** | **10000** |          **1000** |                      **1** |   **2.150 ms** |  **0.0278 ms** |  **0.0246 ms** |   **2.154 ms** |   **1.00** |     **0.00** |\n+ |  Hashtable | 10000 |          1000 |                      1 |   2.806 ms |  0.0398 ms |  0.0373 ms |   2.795 ms |   1.31 |     0.02 |\n+ | Concurrent | 10000 |          1000 |                      1 | 201.843 ms |  3.2293 ms |  2.8627 ms | 201.881 ms |  93.91 |     1.66 |"
    },
    {
      "sha": "e6d28084abc57763088ac08f719ce009c1624dba",
      "filename": "results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,15 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |                       Method |       Mean |     Error |    StdDev | Scaled | ScaledSD |  Gen 0 | Allocated |\n+ |----------------------------- |-----------:|----------:|----------:|-------:|---------:|-------:|----------:|\n+ |                EmptyTemplate |   371.0 ns |  7.570 ns |  14.03 ns |   1.00 |     0.00 | 0.1259 |     264 B |\n+ | DefaultConsoleOutputTemplate | 2,912.1 ns | 66.661 ns | 190.19 ns |   7.86 |     0.58 | 1.0948 |    2296 B |"
    },
    {
      "sha": "55bc3041a60e4afb2cca14b41a0bdc7ccad5b59a",
      "filename": "results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,15 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |                       Method |       Mean |     Error |     StdDev |  Gen 0 | Allocated |\n+ |----------------------------- |-----------:|----------:|-----------:|-------:|----------:|\n+ |     TemplateWithNoProperties |   5.067 ns | 0.1194 ns |  0.1058 ns |      - |       0 B |\n+ | TemplateWithVariedProperties | 423.457 ns | 8.8139 ns | 12.3559 ns | 0.0453 |      96 B |"
    },
    {
      "sha": "19223de66a7e24621426349600c8489c8a2a62b6",
      "filename": "results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,15 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |           Method |     Mean |    Error |   StdDev |\n+ |----------------- |---------:|---------:|---------:|\n+ | ForContextString | 104.5 ns | 2.126 ns | 4.884 ns |\n+ |   ForContextType | 173.8 ns | 3.425 ns | 5.021 ns |"
    },
    {
      "sha": "b722d87282e6781cd4c0701b9eec99c092cccd2d",
      "filename": "results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,15 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |       Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |\n+ |------------- |---------:|----------:|----------:|-------:|---------:|\n+ |   RootLogger | 11.78 ns | 0.1157 ns | 0.1082 ns |   1.00 |     0.00 |\n+ | NestedLogger | 41.70 ns | 0.1993 ns | 0.1556 ns |   3.54 |     0.03 |"
    },
    {
      "sha": "bba42387e6da0d24f417e4d5fe0b6ac5ad2a2807",
      "filename": "results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,14 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |         Method |     Mean |     Error |    StdDev |  Gen 0 | Allocated |\n+ |--------------- |---------:|----------:|----------:|-------:|----------:|\n+ | FormatToOutput | 1.386 us | 0.0237 us | 0.0222 us | 0.2327 |     488 B |"
    },
    {
      "sha": "e945e1b0958e3e4d163b1e15f781b661373bfedf",
      "filename": "results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/results/netcoreapp2.0/PipelineBenchmark-report-github.md",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/results/netcoreapp2.0/PipelineBenchmark-report-github.md?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,14 @@\n+``` ini\n+\n+BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\n+Processor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\n+Frequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\n+dotnet cli version=2.1.4\n+  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n+  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n+\n+\n+```\n+ |       Method |     Mean |    Error |   StdDev |  Gen 0 | Allocated |\n+ |------------- |---------:|---------:|---------:|-------:|----------:|\n+ | EmitLogEvent | 837.9 ns | 16.17 ns | 15.88 ns | 0.2060 |     432 B |"
    },
    {
      "sha": "2a024ec1cb30e0f4c2a8e71a28c3d7b4d96592e7",
      "filename": "run_perf_tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/run_perf_tests.sh",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/run_perf_tests.sh",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/run_perf_tests.sh?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -2,5 +2,5 @@\n dotnet restore\n \n for path in test/*.PerformanceTests/*.csproj; do\n-    dotnet test -f netcoreapp1.1 -c Release ${path}\n+    dotnet test -f netcoreapp2.0 -c Release ${path}\n done"
    },
    {
      "sha": "90f8a935c5a9911d3a5ed3f6f98d77bd427db56d",
      "filename": "src/Serilog/Capturing/GetablePropertyFinder.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Capturing/GetablePropertyFinder.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Capturing/GetablePropertyFinder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Capturing/GetablePropertyFinder.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -39,8 +39,14 @@ internal static IEnumerable<PropertyInfo> GetPropertiesRecursive(this Type type)\n                     yield return propertyInfo;\n                 }\n \n-                currentTypeInfo = currentTypeInfo.BaseType.GetTypeInfo();\n+                var baseType = currentTypeInfo.BaseType;\n+                if(baseType == null)\n+                {\n+                    yield break;\n+                }\n+\n+                currentTypeInfo = baseType.GetTypeInfo();\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"
    },
    {
      "sha": "05c3f3ae268acd0e0d44d8a195e5a3c1291e2ff6",
      "filename": "src/Serilog/Core/Logger.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Logger.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Logger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Core/Logger.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1377,6 +1377,6 @@ public void Dispose()\n         /// <summary>\n         /// An <see cref=\"ILogger\"/> instance that efficiently ignores all method calls.\n         /// </summary>\n-        public static ILogger None { get; } = new SilentLogger();\n+        public static ILogger None { get; } = SilentLogger.Instance;\n     }\n }"
    },
    {
      "sha": "4d878d5cc14d1af15e990b3e8ea7eb2e9d8d2831",
      "filename": "src/Serilog/Core/Pipeline/SilentLogger.cs",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Pipeline/SilentLogger.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Core/Pipeline/SilentLogger.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Core/Pipeline/SilentLogger.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -20,6 +20,12 @@ namespace Serilog.Core.Pipeline\n {\n     class SilentLogger : ILogger\n     {\n+        public static readonly ILogger Instance = new SilentLogger();\n+\n+        private SilentLogger()\n+        {\n+        }\n+\n         public ILogger ForContext(ILogEventEnricher enricher)\n         {\n             return this;"
    },
    {
      "sha": "4b30fc180a5509f0bc310ac7cd8dc03c2e33ac27",
      "filename": "src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Formatting/Display/MessageTemplateTextFormatter.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -116,7 +116,7 @@ public void Format(LogEvent logEvent, TextWriter output)\n                         }\n                         else\n                         {\n-                            propertyValue.Render(output, pt.Format, _formatProvider);\n+                            propertyValue.Render(writer, pt.Format, _formatProvider);\n                         }\n                     }\n "
    },
    {
      "sha": "4efb023a9f7f70351313fdba5edd0f1846b0aba1",
      "filename": "src/Serilog/Log.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Log.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Log.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Log.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -40,7 +40,7 @@ namespace Serilog\n     /// </remarks>\n     public static class Log\n     {\n-        static ILogger _logger = new SilentLogger();\n+        static ILogger _logger = SilentLogger.Instance;\n \n         /// <summary>\n         /// The globally-shared logger.\n@@ -61,7 +61,7 @@ public static ILogger Logger\n         /// </summary>\n         public static void CloseAndFlush()\n         {\n-            ILogger logger = Interlocked.Exchange(ref _logger, new SilentLogger());\n+            ILogger logger = Interlocked.Exchange(ref _logger, SilentLogger.Instance);\n \n             (logger as IDisposable)?.Dispose();\n         }"
    },
    {
      "sha": "333ef29f8d2e13559e9e5d91805bb91345ea633a",
      "filename": "src/Serilog/Serilog.csproj",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Serilog.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Serilog.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Serilog.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,10 +1,10 @@\n-<Project Sdk=\"Microsoft.NET.Sdk\">\n+﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n \n   <PropertyGroup>\n     <Description>Simple .NET logging with fully-structured events</Description>\n-    <VersionPrefix>2.7.1</VersionPrefix>\n+    <VersionPrefix>2.8.0</VersionPrefix>\n     <Authors>Serilog Contributors</Authors>\n-    <TargetFrameworks>net45;net46;netstandard1.0;netstandard1.3</TargetFrameworks>\n+    <TargetFrameworks>net45;net46;netstandard1.0;netstandard1.3;netstandard2.0</TargetFrameworks>\n     <GenerateDocumentationFile>true</GenerateDocumentationFile>\n     <AssemblyName>Serilog</AssemblyName>\n     <AssemblyOriginatorKeyFile>../../assets/Serilog.snk</AssemblyOriginatorKeyFile>\n@@ -15,6 +15,8 @@\n     <PackageIconUrl>https://serilog.net/images/serilog-nuget.png</PackageIconUrl>\n     <PackageProjectUrl>https://github.com/serilog/serilog</PackageProjectUrl>\n     <PackageLicenseUrl>https://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>\n+    <RepositoryUrl>https://github.com/serilog/serilog</RepositoryUrl>\n+    <RepositoryType>git</RepositoryType>\n     <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>\n     <TreatWarningsAsErrors>True</TreatWarningsAsErrors>\n     <TreatSpecificWarningsAsErrors />\n@@ -34,6 +36,10 @@\n     <DefineConstants>$(DefineConstants);ASYNCLOCAL;HASHTABLE</DefineConstants>\n   </PropertyGroup>\n \n+  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netstandard2.0' \">\n+    <DefineConstants>$(DefineConstants);ASYNCLOCAL;HASHTABLE</DefineConstants>\n+  </PropertyGroup>\n+\n   <ItemGroup Condition=\" '$(TargetFramework)' == 'net45' \">\n     <Reference Include=\"System\" />\n     <Reference Include=\"System.Core\" />\n@@ -50,4 +56,8 @@\n     <PackageReference Include=\"System.Collections.NonGeneric\" Version=\"4.3.0\" />\n   </ItemGroup>\n \n+  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard2.0' \">\n+    <PackageReference Include=\"System.Collections.NonGeneric\" Version=\"4.3.0\" />\n+  </ItemGroup>\n+\n </Project>"
    },
    {
      "sha": "89366fa69ea950f186df9e200554bb1169d79f1f",
      "filename": "src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/CallableConfigurationMethodFinder.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -23,13 +23,6 @@ namespace Serilog.Settings.KeyValuePairs\n {\n     static class CallableConfigurationMethodFinder\n     {\n-        internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration)\n-        {\n-            return loggerEnrichmentConfiguration.FromLogContext();\n-        }\n-\n-        static readonly MethodInfo SurrogateFromLogContextConfigurationMethod = typeof(CallableConfigurationMethodFinder).GetTypeInfo().DeclaredMethods.Single(m => m.Name == nameof(FromLogContext));\n-\n         internal static IList<MethodInfo> FindConfigurationMethods(IEnumerable<Assembly> configurationAssemblies, Type configType)\n         {\n             var methods = configurationAssemblies\n@@ -41,10 +34,30 @@ internal static IList<MethodInfo> FindConfigurationMethods(IEnumerable<Assembly>\n                 .Where(m => m.GetParameters()[0].ParameterType == configType)\n                 .ToList();\n \n-            // Unlike the other configuration methods, FromLogContext is an instance method rather than an extension. This\n-            // hack ensures we find it.\n+            // some configuration methods are not extension methods. They are added manually\n+            // so they can be discovered\n+\n+            // WriteTo.Sink(params ILogEventSink[]) is not an extension method\n+            // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system\n+            if (configType == typeof(LoggerSinkConfiguration))\n+                methods.AddRange(SurrogateConfigurationMethods.WriteTo);\n+\n+            // AuditTo.Sink(params ILogEventSink[]) is not an extension method\n+            // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system\n+            if (configType == typeof(LoggerAuditSinkConfiguration))\n+                methods.AddRange(SurrogateConfigurationMethods.AuditTo);\n+\n+            // FromLogContext is an instance method rather than an extension. \n             if (configType == typeof(LoggerEnrichmentConfiguration))\n-                methods.Add(SurrogateFromLogContextConfigurationMethod);\n+                methods.AddRange(SurrogateConfigurationMethods.Enrich);\n+\n+            // Some of the useful Destructure configuration methods are defined as methods rather than extension methods\n+            if (configType == typeof(LoggerDestructuringConfiguration))\n+                methods.AddRange(SurrogateConfigurationMethods.Destructure);\n+\n+            // Some of the useful Filter configuration methods are defined as methods rather than extension methods\n+            if (configType == typeof(LoggerFilterConfiguration))\n+                methods.AddRange(SurrogateConfigurationMethods.Filter);\n \n             return methods;\n         }"
    },
    {
      "sha": "535cbf989f6b6b10fa9322ef70dc11bc099fbcf9",
      "filename": "src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/KeyValuePairSettings.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -34,12 +34,13 @@ class KeyValuePairSettings : ILoggerSettings\n         const string EnrichWithDirective = \"enrich\";\n         const string EnrichWithPropertyDirective = \"enrich:with-property\";\n         const string FilterDirective = \"filter\";\n+        const string DestructureDirective = \"destructure\";\n \n         const string UsingDirectiveFullFormPrefix = \"using:\";\n         const string EnrichWithPropertyDirectivePrefix = \"enrich:with-property:\";\n         const string MinimumLevelOverrideDirectivePrefix = \"minimum-level:override:\";\n \n-        const string CallableDirectiveRegex = @\"^(?<directive>audit-to|write-to|enrich|filter):(?<method>[A-Za-z0-9]*)(\\.(?<argument>[A-Za-z0-9]*)){0,1}$\";\n+        const string CallableDirectiveRegex = @\"^(?<directive>audit-to|write-to|enrich|filter|destructure):(?<method>[A-Za-z0-9]*)(\\.(?<argument>[A-Za-z0-9]*)){0,1}$\";\n         const string LevelSwitchDeclarationDirectiveRegex = @\"^level-switch:(?<switchName>.*)$\";\n         const string LevelSwitchNameRegex = @\"^\\$[A-Za-z]+[A-Za-z0-9]*$\";\n \n@@ -53,23 +54,26 @@ class KeyValuePairSettings : ILoggerSettings\n             MinimumLevelControlledByDirective,\n             EnrichWithPropertyDirective,\n             EnrichWithDirective,\n-            FilterDirective\n+            FilterDirective,\n+            DestructureDirective\n         };\n \n         static readonly Dictionary<string, Type> CallableDirectiveReceiverTypes = new Dictionary<string, Type>\n         {\n             [\"audit-to\"] = typeof(LoggerAuditSinkConfiguration),\n             [\"write-to\"] = typeof(LoggerSinkConfiguration),\n             [\"enrich\"] = typeof(LoggerEnrichmentConfiguration),\n-            [\"filter\"] = typeof(LoggerFilterConfiguration)\n+            [\"filter\"] = typeof(LoggerFilterConfiguration),\n+            [\"destructure\"] = typeof(LoggerDestructuringConfiguration),\n         };\n \n         static readonly Dictionary<Type, Func<LoggerConfiguration, object>> CallableDirectiveReceivers = new Dictionary<Type, Func<LoggerConfiguration, object>>\n         {\n             [typeof(LoggerAuditSinkConfiguration)] = lc => lc.AuditTo,\n             [typeof(LoggerSinkConfiguration)] = lc => lc.WriteTo,\n             [typeof(LoggerEnrichmentConfiguration)] = lc => lc.Enrich,\n-            [typeof(LoggerFilterConfiguration)] = lc => lc.Filter\n+            [typeof(LoggerFilterConfiguration)] = lc => lc.Filter,\n+            [typeof(LoggerDestructuringConfiguration)] = lc => lc.Destructure,\n         };\n \n         readonly IReadOnlyDictionary<string, string> _settings;"
    },
    {
      "sha": "9c1dace029971c27180c959dc7adfdbb75f09019",
      "filename": "src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/SettingValueConversions.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -30,7 +30,8 @@ class SettingValueConversions\n         static Dictionary<Type, Func<string, object>> ExtendedTypeConversions = new Dictionary<Type, Func<string, object>>\n             {\n                 { typeof(Uri), s => new Uri(s) },\n-                { typeof(TimeSpan), s => TimeSpan.Parse(s) }\n+                { typeof(TimeSpan), s => TimeSpan.Parse(s) },\n+                { typeof(Type), s => Type.GetType(s, throwOnError:true) },\n             };\n \n         public static object ConvertToType(string value, Type toType)"
    },
    {
      "sha": "1160f3366de0833f346119d99fede3b67b8508b8",
      "filename": "src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/src/Serilog/Settings/KeyValuePairs/SurrogateConfigurationMethods.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,111 @@\n+﻿// Copyright 2013-2018 Serilog Contributors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Reflection;\n+using Serilog.Configuration;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace Serilog.Settings.KeyValuePairs\n+{\n+    /// <summary>\n+    /// Contains \"fake extension\" methods for the Serilog configuration API.\n+    /// By default the settings knows how to find extension methods, but some configuration\n+    /// are actually \"regular\" method calls and would not be found otherwise.\n+    ///\n+    /// This static class contains internal methods that can be used instead.\n+    ///\n+    /// See also <seealso cref=\"CallableConfigurationMethodFinder\"/>\n+    /// </summary>\n+    static class SurrogateConfigurationMethods\n+    {\n+        static readonly Dictionary<Type, MethodInfo[]> SurrogateMethodCandidates = typeof(SurrogateConfigurationMethods)\n+            .GetTypeInfo().DeclaredMethods\n+            .GroupBy(m => m.GetParameters().First().ParameterType)\n+            .ToDictionary(g => g.Key, g => g.ToArray());\n+\n+        internal static readonly MethodInfo[] WriteTo = SurrogateMethodCandidates[typeof(LoggerSinkConfiguration)];\n+        internal static readonly MethodInfo[] AuditTo = SurrogateMethodCandidates[typeof(LoggerAuditSinkConfiguration)];\n+        internal static readonly MethodInfo[] Enrich = SurrogateMethodCandidates[typeof(LoggerEnrichmentConfiguration)];\n+        internal static readonly MethodInfo[] Destructure = SurrogateMethodCandidates[typeof(LoggerDestructuringConfiguration)];\n+        internal static readonly MethodInfo[] Filter = SurrogateMethodCandidates[typeof(LoggerFilterConfiguration)];\n+\n+        internal static LoggerConfiguration Sink(\n+            LoggerSinkConfiguration loggerSinkConfiguration,\n+            ILogEventSink sink,\n+            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n+            LoggingLevelSwitch levelSwitch = null)\n+        {\n+            return loggerSinkConfiguration.Sink(sink, restrictedToMinimumLevel, levelSwitch);\n+        }\n+\n+        internal static LoggerConfiguration Sink(\n+            LoggerAuditSinkConfiguration auditSinkConfiguration,\n+            ILogEventSink sink,\n+            LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum,\n+            LoggingLevelSwitch levelSwitch = null)\n+        {\n+            return auditSinkConfiguration.Sink(sink, restrictedToMinimumLevel, levelSwitch);\n+        }\n+\n+        internal static LoggerConfiguration With(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, ILogEventEnricher enricher)\n+        {\n+            return loggerEnrichmentConfiguration.With(enricher);\n+        }\n+\n+        internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration)\n+        {\n+            return loggerEnrichmentConfiguration.FromLogContext();\n+        }\n+\n+        internal static LoggerConfiguration With(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            IDestructuringPolicy policy)\n+        {\n+            return loggerDestructuringConfiguration.With(policy);\n+        }\n+\n+        internal static LoggerConfiguration AsScalar(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            Type scalarType)\n+        {\n+            return loggerDestructuringConfiguration.AsScalar(scalarType);\n+        }\n+\n+        internal static LoggerConfiguration ToMaximumCollectionCount(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            int maximumCollectionCount)\n+        {\n+            return loggerDestructuringConfiguration.ToMaximumCollectionCount(maximumCollectionCount);\n+        }\n+\n+        internal static LoggerConfiguration ToMaximumDepth(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            int maximumDestructuringDepth)\n+        {\n+            return loggerDestructuringConfiguration.ToMaximumDepth(maximumDestructuringDepth);\n+        }\n+\n+        internal static LoggerConfiguration ToMaximumStringLength(LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            int maximumStringLength)\n+        {\n+            return loggerDestructuringConfiguration.ToMaximumStringLength(maximumStringLength);\n+        }\n+\n+        internal static LoggerConfiguration With(LoggerFilterConfiguration loggerFilterConfiguration,\n+            ILogEventFilter filter)\n+        {\n+            return loggerFilterConfiguration.With(filter);\n+        }\n+    }\n+}"
    },
    {
      "sha": "03cb721d6d5ecaa31bb5eb83556eec5975107612",
      "filename": "test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.PerformanceTests/Serilog.PerformanceTests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,6 +1,6 @@\n ﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n-    <TargetFrameworks>netcoreapp1.1;net46</TargetFrameworks>\n+    <TargetFrameworks>netcoreapp2.0;net46</TargetFrameworks>\n     <AssemblyName>Serilog.PerformanceTests</AssemblyName>\n     <AssemblyOriginatorKeyFile>../../assets/Serilog.snk</AssemblyOriginatorKeyFile>\n     <SignAssembly>true</SignAssembly>"
    },
    {
      "sha": "dc3049c208ccd2cb4f577542fc079fa2b951b727",
      "filename": "test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Capturing/GetablePropertyFinderTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,64 @@\n+﻿using Serilog.Capturing;\n+using Xunit;\n+using System.Linq;\n+\n+namespace Serilog.Tests.Capturing\n+{\n+    public class GetablePropertyFinderTests\n+    {\n+        [Fact]\n+        public void GetPropertiesRecursiveIntegerTypeYieldNoResult()\n+        {\n+            var result = (default(int)).GetType().GetPropertiesRecursive();\n+            Assert.Empty(result);\n+        }\n+\n+        [Fact]\n+        public void GetPropertiesRecursiveBooleanTypeYieldNoResult()\n+        {\n+            var result = (default(bool)).GetType().GetPropertiesRecursive();\n+            Assert.Empty(result);\n+        }\n+\n+        [Fact]\n+        public void GetPropertiesRecursiveCharTypeYieldNoResult()\n+        {\n+            var result = (default(char)).GetType().GetPropertiesRecursive();\n+            Assert.Empty(result);\n+        }\n+\n+        [Fact]\n+        public void GetPropertiesRecursiveObjectTypeYieldNoResult()\n+        {\n+            var result = (new object()).GetType().GetPropertiesRecursive();\n+            Assert.Empty(result);\n+        }\n+\n+        [Fact]\n+        public void GetPropertiesRecursiveStringTypeYieldResult()\n+        {\n+            var result = (string.Empty).GetType().GetPropertiesRecursive();\n+            Assert.NotEmpty(result);\n+        }\n+\n+        [Fact]\n+        // https://github.com/serilog/serilog/issues/1235\n+        public void GetPropertiesRecursiveBaseTypeSucceedsOnWcfProxyType()\n+        {\n+            var remoteAddress = new System.ServiceModel.EndpointAddress(\"http://localhost\");\n+            var binding = new System.ServiceModel.BasicHttpBinding();\n+\n+            var myFactory = new System.ServiceModel.ChannelFactory<IMyChannel>(binding, remoteAddress);\n+            var channel = myFactory.CreateChannel();\n+\n+            var _ = channel.GetType().GetPropertiesRecursive().ToList();\n+        }\n+\n+        [System.ServiceModel.ServiceContract]\n+        interface IMyChannel\n+        {\n+            [System.ServiceModel.OperationContract]\n+            string Get();\n+        }\n+    }\n+}"
    },
    {
      "sha": "bcdd401d3cc5acc963b85cae21b5da87527f64bb",
      "filename": "test/Serilog.Tests/Core/LoggerTests.cs",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Core/LoggerTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Core/LoggerTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Core/LoggerTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -133,5 +133,15 @@ public void TheNoneLoggerIsAConstant()\n             var secondCall = Logger.None;\n             Assert.Equal(firstCall, secondCall);\n         }\n-\t}\n+\n+        [Fact]\n+        public void TheNoneLoggerIsSingleton()\n+        {\n+            lock (new object())\n+            {\n+                Log.CloseAndFlush();\n+                Assert.Same(Log.Logger, Logger.None);\n+            }\n+        }\n+    }\n }"
    },
    {
      "sha": "e6a86f4d129f0a833edac22ef24d239ed16a89a1",
      "filename": "test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "status": "modified",
      "additions": 87,
      "deletions": 3,
      "changes": 90,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Formatting/Display/MessageTemplateTextFormatterTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,4 +1,4 @@\n-﻿using System;\n+using System;\n using System.Globalization;\n using System.IO;\n using System.Linq;\n@@ -101,7 +101,7 @@ public void LowercaseFormatSpecifierIsSupportedForStrings()\n         [InlineData(LogEventLevel.Warning, 8, \"Warning\")]\n         public void FixedLengthLevelIsSupported(\n             LogEventLevel level,\n-            int width, \n+            int width,\n             string expected)\n         {\n             var formatter = new MessageTemplateTextFormatter($\"{{Level:t{width}}}\", CultureInfo.InvariantCulture);\n@@ -245,7 +245,7 @@ public void AppliesLiteralFormattingToMessageStringsWhenSpecified(string format,\n         public void AppliesJsonFormattingToMessageStructuresWhenSpecified(string format, string expected)\n         {\n             var formatter = new MessageTemplateTextFormatter(\"{Message\" + format + \"}\", null);\n-            var evt = DelegatingSink.GetLogEvent(l => l.Information(\"{@Obj}\", new {Name = \"World\"}));\n+            var evt = DelegatingSink.GetLogEvent(l => l.Information(\"{@Obj}\", new { Name = \"World\" }));\n             var sw = new StringWriter();\n             formatter.Format(evt, sw);\n             Assert.Equal(expected, sw.ToString());\n@@ -276,5 +276,89 @@ public void AnEmptyPropertiesTokenIsAnEmptyStructureValueWithDefaultFormatting()\n             var expected = new StructureValue(Enumerable.Empty<LogEventProperty>()).ToString();\n             Assert.Equal(expected, sw.ToString());\n         }\n+\n+        [Theory]\n+        [InlineData(\"\", true)]\n+        [InlineData(\":lj\", false)]\n+        [InlineData(\":jl\", false)]\n+        [InlineData(\":j\", false)]\n+        [InlineData(\":l\", true)]\n+        public void FormatProviderWithScalarProperties(string format, bool shouldUseCustomFormatter)\n+        {\n+            var frenchFormatProvider = new CultureInfo(\"fr-FR\");\n+            var defaultFormatProvider = CultureInfo.InvariantCulture;\n+\n+            var date = new DateTime(2018, 01, 01);\n+            var number = 12.345;\n+\n+            var expectedFormattedDate = shouldUseCustomFormatter\n+                ? date.ToString(frenchFormatProvider)\n+                : date.ToString(\"O\", defaultFormatProvider);\n+            var expectedFormattedNumber = shouldUseCustomFormatter\n+                ? number.ToString(frenchFormatProvider)\n+                : number.ToString(defaultFormatProvider);\n+\n+            var formatter = new MessageTemplateTextFormatter(\"{Message\" + format + \"}\", frenchFormatProvider);\n+            var evt = DelegatingSink.GetLogEvent(l =>\n+            {\n+                l.Information(\"{MyDate}{MyNumber}\", date, number);\n+            });\n+            var sw = new StringWriter();\n+            formatter.Format(evt, sw);\n+\n+            Assert.Contains(expectedFormattedDate, sw.ToString());\n+            Assert.Contains(expectedFormattedNumber, sw.ToString());\n+        }\n+\n+        [Theory]\n+        [InlineData(\"\", true)]\n+        [InlineData(\":lj\", false)]\n+        [InlineData(\":jl\", false)]\n+        [InlineData(\":j\", false)]\n+        [InlineData(\":l\", true)]\n+        public void FormatProviderWithDestructuredProperties(string format, bool shouldUseCustomFormatter)\n+        {\n+            var frenchFormatProvider = new CultureInfo(\"fr-FR\");\n+            var defaultFormatProvider = CultureInfo.InvariantCulture;\n+\n+            var date = new DateTime(2018, 01, 01);\n+            var number = 12.345;\n+\n+            var expectedFormattedDate = shouldUseCustomFormatter\n+                ? date.ToString(frenchFormatProvider)\n+                : date.ToString(\"O\", defaultFormatProvider);\n+            var expectedFormattedNumber = shouldUseCustomFormatter\n+                ? number.ToString(frenchFormatProvider)\n+                : number.ToString(defaultFormatProvider);\n+\n+            var formatter = new MessageTemplateTextFormatter(\"{Message\" + format + \"}\", frenchFormatProvider);\n+            var evt = DelegatingSink.GetLogEvent(l =>\n+            {\n+                l.Information(\"{@Item}\", new\n+                {\n+                    MyDate = date,\n+                    MyNumber = number\n+                });\n+            });\n+            var sw = new StringWriter();\n+            formatter.Format(evt, sw);\n+\n+            Assert.Contains(expectedFormattedDate, sw.ToString());\n+            Assert.Contains(expectedFormattedNumber, sw.ToString());\n+        }\n+\n+        [Theory]\n+        [InlineData(15, \"\", \"15\")]\n+        [InlineData(15, \",5\", \"   15\")]\n+        [InlineData(15, \",-5\", \"15   \")]\n+        public void PaddingIsApplied(int n, string format, string expected)\n+        {\n+            var formatter = new MessageTemplateTextFormatter(\"{ThreadId\" + format + \"}\", null);\n+            var evt = Some.InformationEvent();\n+            evt.AddOrUpdateProperty(new LogEventProperty(\"ThreadId\", new ScalarValue(n)));\n+            var sw = new StringWriter();\n+            formatter.Format(evt, sw);\n+            Assert.Equal(expected, sw.ToString());\n+        }\n     }\n }"
    },
    {
      "sha": "82e8a3056c1d67c2733b900b5bb2b59166943bca",
      "filename": "test/Serilog.Tests/LoggerConfigurationTests.cs",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/LoggerConfigurationTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/LoggerConfigurationTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/LoggerConfigurationTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -590,7 +590,7 @@ class ThrowingProperty\n         [Fact]\n         public void WrappingDecoratesTheConfiguredSink()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.Dummy(w => w.Sink(sink))\n@@ -623,7 +623,7 @@ public void WrappingDoesNotPermitEnrichment()\n         [Fact]\n         public void WrappingIsAppliedWhenChaining()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink1 = new CollectingSink();\n             var sink2 = new CollectingSink();\n             var logger = new LoggerConfiguration()\n@@ -642,7 +642,7 @@ public void WrappingIsAppliedWhenChaining()\n         [Fact]\n         public void WrappingIsAppliedWhenCallingMultipleTimes()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink1 = new CollectingSink();\n             var sink2 = new CollectingSink();\n             var logger = new LoggerConfiguration()\n@@ -678,7 +678,7 @@ public void WrappingWarnsAboutNonDisposableWrapper()\n         [Fact]\n         public void WrappingSinkRespectsLogEventLevelSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap(w => w.Sink(sink), LogEventLevel.Error, null)\n@@ -693,7 +693,7 @@ public void WrappingSinkRespectsLogEventLevelSetting()\n         [Fact]\n         public void WrappingSinkRespectsLevelSwitchSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap(\n@@ -710,7 +710,7 @@ public void WrappingSinkRespectsLevelSwitchSetting()\n         [Fact]\n         public void WrappingSinkRespectsSetting()\n         {\n-            DummyWrappingSink.Emitted.Clear();\n+            DummyWrappingSink.Reset();\n             var sink = new CollectingSink();\n             var logger = new LoggerConfiguration()\n                 .WriteTo.DummyWrap("
    },
    {
      "sha": "e6cfd86e14c44ec8dc19d67b8c6ca04950065d17",
      "filename": "test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/MethodOverloadConventionTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/MethodOverloadConventionTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -933,7 +933,7 @@ static ILogger GetLogger(Type loggerType, out CollectingSink sink, LogEventLevel\n             }\n \n             if (loggerType == typeof(SilentLogger))\n-                return new SilentLogger();\n+                return SilentLogger.Instance;\n \n             throw new ArgumentException($\"Logger Type of {loggerType} is not supported\");\n         }"
    },
    {
      "sha": "9ab406ea74e42627cfbf47d5877e908157154e2f",
      "filename": "test/Serilog.Tests/Serilog.Tests.csproj",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Serilog.Tests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Serilog.Tests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Serilog.Tests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -15,6 +15,8 @@\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.5.0\" />\n     <PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\" />\n+    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.5.3\" />\n+    <PackageReference Include=\"System.ServiceModel.Primitives\" Version=\"4.5.3\" />\n     <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.3.1\" />\n     <PackageReference Include=\"xunit\" Version=\"2.3.1\" />\n     <PackageReference Include=\"System.ValueTuple\" Version=\"4.3.1\" />"
    },
    {
      "sha": "ed463994fa4cd521ebea4b044d198483aefd32cb",
      "filename": "test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "status": "modified",
      "additions": 80,
      "deletions": 8,
      "changes": 88,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/CallableConfigurationMethodFinderTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -9,22 +9,94 @@ namespace Serilog.Tests.Settings\n {\n     public class CallableConfigurationMethodFinderTests\n     {\n+        static readonly Assembly SerilogAssembly = typeof(Log).GetTypeInfo().Assembly;\n+        static readonly Assembly TestDummiesAssembly = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly;\n+\n+        [Fact]\n+        public void FindsSinkSpecificConfigurationMethods()\n+        {\n+            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n+\n+            var sinkMethods = CallableConfigurationMethodFinder\n+                .FindConfigurationMethods(\n+                    searchInAssemblies,\n+                    typeof(LoggerSinkConfiguration))\n+                .Select(m => m.Name)\n+                .Distinct()\n+                .ToList();\n+\n+            Assert.Contains(nameof(LoggerSinkConfiguration.Sink), sinkMethods);\n+        }\n+\n+        [Fact]\n+        public void FindsAuditSinkSpecificConfigurationMethods()\n+        {\n+            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n+\n+            var auditSinkMethods = CallableConfigurationMethodFinder\n+                .FindConfigurationMethods(\n+                    searchInAssemblies,\n+                    typeof(LoggerAuditSinkConfiguration))\n+                .Select(m => m.Name)\n+                .Distinct()\n+                .ToList();\n+\n+            Assert.Contains(nameof(LoggerAuditSinkConfiguration.Sink), auditSinkMethods);\n+        }\n+\n         [Fact]\n         public void FindsEnricherSpecificConfigurationMethods()\n         {\n-            var eventEnrichers = CallableConfigurationMethodFinder\n-                .FindConfigurationMethods(new[]\n-                {\n-                    typeof(Log).GetTypeInfo().Assembly,\n-                    typeof(DummyThreadIdEnricher).GetTypeInfo().Assembly\n-                }, typeof(LoggerEnrichmentConfiguration))\n+            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n+\n+            var enricherMethods = CallableConfigurationMethodFinder\n+                .FindConfigurationMethods(\n+                    searchInAssemblies,\n+                    typeof(LoggerEnrichmentConfiguration))\n+                .Select(m => m.Name)\n+                .Distinct()\n+                .ToList();\n+\n+            Assert.Contains(nameof(LoggerEnrichmentConfiguration.With), enricherMethods);\n+            Assert.Contains(nameof(LoggerEnrichmentConfiguration.FromLogContext), enricherMethods);\n+            Assert.Contains(nameof(DummyLoggerConfigurationExtensions.WithDummyThreadId), enricherMethods);\n+        }\n+\n+        [Fact]\n+        public void FindsDestructureSpecificConfigurationMethods()\n+        {\n+            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n+\n+            var destructuringMethods = CallableConfigurationMethodFinder\n+                .FindConfigurationMethods(\n+                    searchInAssemblies,\n+                    typeof(LoggerDestructuringConfiguration))\n                 .Select(m => m.Name)\n                 .Distinct()\n                 .ToList();\n \n+            Assert.Contains(nameof(LoggerDestructuringConfiguration.AsScalar), destructuringMethods);\n+            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumCollectionCount), destructuringMethods);\n+            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumDepth), destructuringMethods);\n+            Assert.Contains(nameof(LoggerDestructuringConfiguration.ToMaximumStringLength), destructuringMethods);\n+            Assert.Contains(nameof(DummyLoggerConfigurationExtensions.WithDummyHardCodedString), destructuringMethods);\n+            Assert.Contains(nameof(LoggerDestructuringConfiguration.With), destructuringMethods);\n+        }\n+\n+        [Fact]\n+        public void FindsFilterSpecificConfigurationMethods()\n+        {\n+            var searchInAssemblies = new[] { SerilogAssembly, TestDummiesAssembly };\n+\n+            var filterMethods = CallableConfigurationMethodFinder\n+                .FindConfigurationMethods(\n+                    searchInAssemblies,\n+                    typeof(LoggerFilterConfiguration))\n+                .Select(m => m.Name)\n+                .Distinct()\n+                .ToList();\n \n-            Assert.Contains(\"FromLogContext\", eventEnrichers);\n-            Assert.Contains(\"WithDummyThreadId\", eventEnrichers);\n+            Assert.Contains(nameof(LoggerFilterConfiguration.With), filterMethods);\n         }\n     }\n }"
    },
    {
      "sha": "0659dfd0c2fdf04464dbdda4366204ed50521725",
      "filename": "test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "status": "modified",
      "additions": 300,
      "deletions": 4,
      "changes": 304,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/KeyValuePairSettingsTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -115,8 +115,8 @@ public void SinksAreConfigured()\n                 .ReadFrom.KeyValuePairs(settings)\n                 .CreateLogger();\n \n-            DummyRollingFileSink.Emitted.Clear();\n-            DummyRollingFileAuditSink.Emitted.Clear();\n+            DummyRollingFileSink.Reset();\n+            DummyRollingFileAuditSink.Reset();\n \n             log.Write(Some.InformationEvent());\n \n@@ -137,8 +137,8 @@ public void AuditSinksAreConfigured()\n                 .ReadFrom.KeyValuePairs(settings)\n                 .CreateLogger();\n \n-            DummyRollingFileSink.Emitted.Clear();\n-            DummyRollingFileAuditSink.Emitted.Clear();\n+            DummyRollingFileSink.Reset();\n+            DummyRollingFileAuditSink.Reset();\n \n             log.Write(Some.InformationEvent());\n \n@@ -381,5 +381,301 @@ public void SinksAreConfiguredWithStaticMember()\n \n             Assert.Equal(ConsoleThemes.Theme1, DummyConsoleSink.Theme);\n         }\n+\n+        [Fact]\n+        public void DestructuringToMaximumDepthIsApplied()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"destructure:ToMaximumDepth.maximumDestructuringDepth\"] = \"3\"\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            var nestedObject = new\n+            {\n+                A = new\n+                {\n+                    B = new\n+                    {\n+                        C = new\n+                        {\n+                            D = \"F\"\n+                        }\n+                    }\n+                }\n+            };\n+\n+            log.Information(\"Destructuring a big graph {@DeeplyNested}\", nestedObject);\n+            var formattedProperty = evt.Properties[\"DeeplyNested\"].ToString();\n+\n+            Assert.Contains(\"C\", formattedProperty);\n+            Assert.DoesNotContain(\"D\", formattedProperty);\n+        }\n+\n+        [Fact]\n+        public void DestructuringToMaximumStringLengthIsApplied()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"destructure:ToMaximumStringLength.maximumStringLength\"] = \"3\"\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Information(\"Destructuring a long string {@LongString}\", \"ABCDEFGH\");\n+            var formattedProperty = evt.Properties[\"LongString\"].ToString();\n+\n+            Assert.Equal(\"\\\"AB…\\\"\", formattedProperty);\n+        }\n+\n+        [Fact]\n+        public void DestructuringToMaximumCollectionCountIsApplied()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"destructure:ToMaximumCollectionCount.maximumCollectionCount\"] = \"3\"\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            var collection = new[] { 1, 2, 3, 4, 5, 6 };\n+            log.Information(\"Destructuring a big collection {@BigCollection}\", collection);\n+            var formattedProperty = evt.Properties[\"BigCollection\"].ToString();\n+\n+            Assert.Contains(\"3\", formattedProperty);\n+            Assert.DoesNotContain(\"4\", formattedProperty);\n+        }\n+\n+        [Fact]\n+        public void DestructuringWithCustomExtensionMethodIsApplied()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"destructure:WithDummyHardCodedString.hardCodedString\"] = \"hardcoded\"\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Information(\"Destructuring with hard-coded policy {@Input}\", new { Foo = \"Bar\" });\n+            var formattedProperty = evt.Properties[\"Input\"].ToString();\n+\n+            Assert.Equal(\"\\\"hardcoded\\\"\", formattedProperty);\n+        }\n+\n+        [Fact]\n+        public void DestructuringAsScalarIsAppliedWithShortTypeName()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"destructure:AsScalar.scalarType\"] = \"System.Version\"\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Information(\"Destructuring as scalar {@Scalarized}\", new Version(2, 3));\n+            var prop = evt.Properties[\"Scalarized\"];\n+\n+            Assert.IsType<ScalarValue>(prop);\n+        }\n+\n+        [Fact]\n+        public void DestructuringAsScalarIsAppliedWithAssemblyQualifiedName()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"destructure:AsScalar.scalarType\"] = typeof(Version).AssemblyQualifiedName\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Information(\"Destructuring as scalar {@Scalarized}\", new Version(2, 3));\n+            var prop = evt.Properties[\"Scalarized\"];\n+\n+            Assert.IsType<ScalarValue>(prop);\n+        }\n+\n+        [Fact]\n+        public void DestructuringWithIsAppliedWithCustomDestructuringPolicy()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"destructure:With.policy\"] = typeof(DummyReduceVersionToMajorPolicy).AssemblyQualifiedName\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Information(\"Destructuring with policy {@Version}\", new Version(2, 3));\n+            var prop = evt.Properties[\"Version\"];\n+\n+            Assert.IsType<ScalarValue>(prop);\n+            Assert.Equal(2, (prop as ScalarValue)?.Value);\n+        }\n+\n+        [Fact]\n+        public void WriteToSinkIsAppliedWithCustomSink()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"write-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void WriteToSinkIsAppliedWithCustomSinkAndMinimumLevel()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"write-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n+                    [\"write-to:Sink.restrictedToMinimumLevel\"] = \"Warning\"\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+            log.Write(Some.WarningEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void WriteToSinkIsAppliedWithCustomSinkAndLevelSwitch()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"level-switch:$switch1\"] = \"Warning\",\n+                    [\"write-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n+                    [\"write-to:Sink.levelSwitch\"] = \"$switch1\"\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+            log.Write(Some.WarningEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void AuditToSinkIsAppliedWithCustomSink()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"audit-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void AuditToSinkIsAppliedWithCustomSinkAndMinimumLevel()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"audit-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n+                    [\"audit-to:Sink.restrictedToMinimumLevel\"] = \"Warning\"\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+            log.Write(Some.WarningEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void AuditToSinkIsAppliedWithCustomSinkAndLevelSwitch()\n+        {\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"level-switch:$switch1\"] = \"Warning\",\n+                    [\"audit-to:Sink.sink\"] = typeof(DummyRollingFileSink).AssemblyQualifiedName,\n+                    [\"audit-to:Sink.levelSwitch\"] = \"$switch1\"\n+                })\n+                .CreateLogger();\n+\n+            DummyRollingFileSink.Reset();\n+            log.Write(Some.InformationEvent());\n+            log.Write(Some.WarningEvent());\n+\n+            Assert.Single(DummyRollingFileSink.Emitted);\n+        }\n+\n+        [Fact]\n+        public void EnrichWithIsAppliedWithCustomEnricher()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"enrich:With.enricher\"] = typeof(DummyThreadIdEnricher).AssemblyQualifiedName\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.Write(Some.InformationEvent());\n+\n+            Assert.NotNull(evt);\n+            Assert.True(evt.Properties.ContainsKey(\"ThreadId\"), \"Event should have enriched property ThreadId\");\n+        }\n+\n+        [Fact]\n+        public void FilterWithIsAppliedWithCustomFilter()\n+        {\n+            LogEvent evt = null;\n+            var log = new LoggerConfiguration()\n+                .ReadFrom.KeyValuePairs(new Dictionary<string, string>\n+                {\n+                    [\"using:TestDummies\"] = typeof(DummyLoggerConfigurationExtensions).GetTypeInfo().Assembly.FullName,\n+                    [\"filter:With.filter\"] = typeof(DummyAnonymousUserFilter).AssemblyQualifiedName\n+                })\n+                .WriteTo.Sink(new DelegatingSink(e => evt = e))\n+                .CreateLogger();\n+\n+            log.ForContext(\"User\", \"anonymous\").Write(Some.InformationEvent());\n+            Assert.Null(evt);\n+            log.ForContext(\"User\", \"the user\").Write(Some.InformationEvent());\n+            Assert.NotNull(evt);\n+        }\n     }\n }"
    },
    {
      "sha": "e53a1b9b55c4e9e6364baf0f26018b47465110e6",
      "filename": "test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.Tests/Settings/SettingValueConversionsTests.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -45,6 +45,21 @@ public void ValuesConvertToEnumMembers()\n             Assert.Equal(LogEventLevel.Information, result);\n         }\n \n+        [Fact]\n+        public void ValuesConvertToTypeFromQualifiedName()\n+        {\n+            var result = (Type)SettingValueConversions.ConvertToType(\"System.Version\", typeof(Type));\n+            Assert.Equal(typeof(Version), result);\n+        }\n+\n+        [Fact]\n+        public void ValuesConvertToTypeFromAssemblyQualifiedName()\n+        {\n+            var assemblyQualifiedName = typeof(Version).AssemblyQualifiedName;\n+            var result = (Type)SettingValueConversions.ConvertToType(assemblyQualifiedName, typeof(Type));\n+            Assert.Equal(typeof(Version), result);\n+        }\n+\n         [Fact]\n         public void StringValuesConvertToDefaultInstancesIfTargetIsInterface()\n         {\n@@ -102,7 +117,7 @@ public void TimeSpanValuesCanBeParsed(string input, int expDays, int expHours, i\n                     null, null)]\n         [InlineData(null,\n                     null, null)]\n-        [InlineData(\" \" ,\n+        [InlineData(\" \",\n                     null, null)]\n         // a full-qualified type name should not be considered a static member accessor\n         [InlineData(\"My.NameSpace.Class, MyAssembly, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\","
    },
    {
      "sha": "6f6bc642498ec279d45d0f74dcd439545eabbcb9",
      "filename": "test/Serilog.UwpTests/Package.appxmanifest",
      "status": "modified",
      "additions": 7,
      "deletions": 24,
      "changes": 31,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Package.appxmanifest",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Package.appxmanifest",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Package.appxmanifest?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -1,40 +1,23 @@\n ﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Package\n-  xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\"\n-  xmlns:mp=\"http://schemas.microsoft.com/appx/2014/phone/manifest\"\n-  xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\"\n-  IgnorableNamespaces=\"uap mp\">\n-\n-  <Identity Name=\"87ea80a0-d6f0-4b89-beeb-900b848f1b7c\"\n-            Publisher=\"CN=User\"\n-            Version=\"1.0.0.0\" />\n-\n-  <mp:PhoneIdentity PhoneProductId=\"87ea80a0-d6f0-4b89-beeb-900b848f1b7c\" PhonePublisherId=\"00000000-0000-0000-0000-000000000000\"/>\n-\n+<Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\" xmlns:mp=\"http://schemas.microsoft.com/appx/2014/phone/manifest\" xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\" IgnorableNamespaces=\"uap mp\">\n+  <Identity Name=\"87ea80a0-d6f0-4b89-beeb-900b848f1b7c\" Publisher=\"CN=Serilog\" Version=\"1.0.0.0\" />\n+  <mp:PhoneIdentity PhoneProductId=\"87ea80a0-d6f0-4b89-beeb-900b848f1b7c\" PhonePublisherId=\"00000000-0000-0000-0000-000000000000\" />\n   <Properties>\n     <DisplayName>Serilog.UwpTests</DisplayName>\n     <PublisherDisplayName>User</PublisherDisplayName>\n     <Logo>Assets\\StoreLogo.png</Logo>\n   </Properties>\n-\n   <Dependencies>\n     <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.0.0\" MaxVersionTested=\"10.0.0.0\" />\n   </Dependencies>\n-\n   <Resources>\n     <Resource Language=\"x-generate\" />\n   </Resources>\n   <Applications>\n-    <Application Id=\"vstest.executionengine.universal.App\"\n-        Executable=\"$targetnametoken$.exe\"\n-        EntryPoint=\"Serilog.UwpTests.App\">\n-      <uap:VisualElements\n-        DisplayName=\"Serilog.UwpTests\"\n-        Square150x150Logo=\"Assets\\Square150x150Logo.png\"\n-        Square44x44Logo=\"Assets\\Square44x44Logo.png\"\n-        Description=\"Serilog.UwpTests\"\n-        BackgroundColor=\"transparent\">\n-        <uap:DefaultTile Wide310x150Logo=\"Assets\\Wide310x150Logo.png\"/>\n+    <Application Id=\"vstest.executionengine.universal.App\" Executable=\"$targetnametoken$.exe\" EntryPoint=\"Serilog.UwpTests.App\">\n+      <uap:VisualElements DisplayName=\"Serilog.UwpTests\" Square150x150Logo=\"Assets\\Square150x150Logo.png\" Square44x44Logo=\"Assets\\Square44x44Logo.png\" Description=\"Serilog.UwpTests\" BackgroundColor=\"transparent\">\n+        <uap:DefaultTile Wide310x150Logo=\"Assets\\Wide310x150Logo.png\">\n+        </uap:DefaultTile>\n         <uap:SplashScreen Image=\"Assets\\SplashScreen.png\" />\n       </uap:VisualElements>\n     </Application>"
    },
    {
      "sha": "956847f18bdb85cc0d9cdd1f8418368f9d8f5070",
      "filename": "test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests.csproj",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Serilog.UwpTests.csproj?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -18,6 +18,7 @@\n     <ProjectTypeGuids>{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>\n     <PackageCertificateKeyFile>Serilog.UwpTests_TemporaryKey.pfx</PackageCertificateKeyFile>\n     <UnitTestPlatformVersion Condition=\"'$(UnitTestPlatformVersion)' == ''\">$(VisualStudioVersion)</UnitTestPlatformVersion>\n+    <PackageCertificateThumbprint>BDD6FD6CCE198001F3CD008EAF2F1CD86E3682D5</PackageCertificateThumbprint>\n   </PropertyGroup>\n   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x86'\">\n     <DebugSymbols>true</DebugSymbols>\n@@ -128,13 +129,13 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.NETCore.UniversalWindowsPlatform\">\n-      <Version>5.3.3</Version>\n+      <Version>6.1.5</Version>\n     </PackageReference>\n     <PackageReference Include=\"xunit\">\n-      <Version>2.2.0</Version>\n+      <Version>2.3.1</Version>\n     </PackageReference>\n     <PackageReference Include=\"xunit.runner.visualstudio\">\n-      <Version>2.2.0</Version>\n+      <Version>2.3.1</Version>\n     </PackageReference>\n   </ItemGroup>\n   <ItemGroup>"
    },
    {
      "sha": "c9cc685c2eb5d0339d4ab97d3c799032b66ffa69",
      "filename": "test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/Serilog.UwpTests/Serilog.UwpTests_TemporaryKey.pfx?ref=870feca66f81844ed279998a4d28a3b2614bbd7a"
    },
    {
      "sha": "a47dd11b833725ecea7fe37da13fdb546931d8da",
      "filename": "test/TestDummies/DummyAnonymousUserFilter.cs",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyAnonymousUserFilter.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyAnonymousUserFilter.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyAnonymousUserFilter.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,25 @@\n+﻿\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace TestDummies\n+{\n+    public class DummyAnonymousUserFilter : ILogEventFilter\n+    {\n+        public bool IsEnabled(LogEvent logEvent)\n+        {\n+            if (logEvent.Properties.ContainsKey(\"User\"))\n+            {\n+                if (logEvent.Properties[\"User\"] is ScalarValue sv)\n+                {\n+                    if (sv.Value is string s && s == \"anonymous\")\n+                    {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n+            return true;\n+        }\n+    }\n+}"
    },
    {
      "sha": "25d27249074f6592eb1cd4703c67b9cd16f97749",
      "filename": "test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyHardCodedStringDestructuringPolicy.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,22 @@\n+﻿using System;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace TestDummies\n+{\n+    public class DummyHardCodedStringDestructuringPolicy : IDestructuringPolicy\n+    {\n+        readonly string _hardCodedString;\n+\n+        public DummyHardCodedStringDestructuringPolicy(string hardCodedString)\n+        {\n+            _hardCodedString = hardCodedString ?? throw new ArgumentNullException(nameof(hardCodedString));\n+        }\n+\n+        public bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue result)\n+        {\n+            result = new ScalarValue(_hardCodedString);\n+            return true;\n+        }\n+    }\n+}"
    },
    {
      "sha": "aa6e61932ab8ff32a0a81ba34dcaa8358652fdc3",
      "filename": "test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyLoggerConfigurationExtensions.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyLoggerConfigurationExtensions.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -86,5 +86,13 @@ public static LoggerConfiguration WithDummyThreadId(this LoggerEnrichmentConfigu\n                 logEventLevel,\n                 levelSwitch);\n         }\n+\n+        public static LoggerConfiguration WithDummyHardCodedString(\n+            this LoggerDestructuringConfiguration loggerDestructuringConfiguration,\n+            string hardCodedString\n+        )\n+        {\n+            return loggerDestructuringConfiguration.With(new DummyHardCodedStringDestructuringPolicy(hardCodedString));\n+        }\n     }\n }"
    },
    {
      "sha": "bf754477313cc64f574ef0ffd5b40bf4a69c2b13",
      "filename": "test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyReduceVersionToMajorPolicy.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyReduceVersionToMajorPolicy.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -0,0 +1,21 @@\n+﻿using System;\n+using Serilog.Core;\n+using Serilog.Events;\n+\n+namespace TestDummies\n+{\n+    public class DummyReduceVersionToMajorPolicy : IDestructuringPolicy\n+    {\n+        public bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue result)\n+        {\n+            if (value is Version version)\n+            {\n+                result = new ScalarValue(version.Major);\n+                return true;\n+            }\n+\n+            result = null;\n+            return false;\n+        }\n+    }\n+}"
    },
    {
      "sha": "2ba17e35752c703778bb0086e352ce133799adb9",
      "filename": "test/TestDummies/DummyRollingFileAuditSink.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileAuditSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileAuditSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyRollingFileAuditSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,13 +8,18 @@ namespace TestDummies\n     public class DummyRollingFileAuditSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List<LogEvent> Emitted = new List<LogEvent>();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n+        static List<LogEvent> _emitted;\n+\n+        public static List<LogEvent> Emitted => _emitted ?? (_emitted = new List<LogEvent>());\n \n         public void Emit(LogEvent logEvent)\n         {\n             Emitted.Add(logEvent);\n         }\n+\n+        public static void Reset()\n+        {\n+            _emitted = null;\n+        }\n     }\n }"
    },
    {
      "sha": "2f6f229ebb71a25f6564f50259a419bd9558cbbc",
      "filename": "test/TestDummies/DummyRollingFileSink.cs",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyRollingFileSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyRollingFileSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,13 +8,18 @@ namespace TestDummies\n     public class DummyRollingFileSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List<LogEvent> Emitted = new List<LogEvent>();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n+        static List<LogEvent> _emitted;\n+\n+        public static List<LogEvent> Emitted => _emitted ?? (_emitted = new List<LogEvent>());\n \n         public void Emit(LogEvent logEvent)\n         {\n             Emitted.Add(logEvent);\n         }\n+\n+        public static void Reset()\n+        {\n+            _emitted = null;\n+        }\n     }\n }"
    },
    {
      "sha": "a640d55e4ff84e4c8709277f8e92e8a747107682",
      "filename": "test/TestDummies/DummyThreadIdEnricher.cs",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyThreadIdEnricher.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyThreadIdEnricher.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyThreadIdEnricher.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -6,7 +6,9 @@ namespace TestDummies\n     public class DummyThreadIdEnricher : ILogEventEnricher\n     {\n         public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n-        {          \n+        {\n+            logEvent.AddPropertyIfAbsent(propertyFactory\n+                .CreateProperty(\"ThreadId\", \"SomeId\"));\n         }\n     }\n }"
    },
    {
      "sha": "cb2f048ff2188237a88622b9146308c9905d78ca",
      "filename": "test/TestDummies/DummyWrappingSink.cs",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/serilog/serilog/blob/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyWrappingSink.cs",
      "raw_url": "https://github.com/serilog/serilog/raw/870feca66f81844ed279998a4d28a3b2614bbd7a/test/TestDummies/DummyWrappingSink.cs",
      "contents_url": "https://api.github.com/repos/serilog/serilog/contents/test/TestDummies/DummyWrappingSink.cs?ref=870feca66f81844ed279998a4d28a3b2614bbd7a",
      "patch": "@@ -8,11 +8,11 @@ namespace TestDummies\n     public class DummyWrappingSink : ILogEventSink\n     {\n         [ThreadStatic]\n-        // ReSharper disable ThreadStaticFieldHasInitializer\n-        public static List<LogEvent> Emitted = new List<LogEvent>();\n-        // ReSharper restore ThreadStaticFieldHasInitializer\n+        static List<LogEvent> _emitted;\n \n-        private readonly ILogEventSink _sink;\n+        public static List<LogEvent> Emitted => _emitted ?? (_emitted = new List<LogEvent>());\n+\n+        readonly ILogEventSink _sink;\n \n         public DummyWrappingSink(ILogEventSink sink)\n         {\n@@ -24,5 +24,10 @@ public void Emit(LogEvent logEvent)\n             Emitted.Add(logEvent);\n             _sink.Emit(logEvent);\n         }\n+\n+        public static void Reset()\n+        {\n+            _emitted = null;\n+        }\n     }\n }"
    }
  ]
}